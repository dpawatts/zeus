<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoundInTheory.DynamicImage</name>
    </assembly>
    <members>
        <member name="M:SoundInTheory.DynamicImage.Filters.ConvolutionFilterHelper.ApplyKernel(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,SoundInTheory.DynamicImage.Filters.ConvolutionKernel,SoundInTheory.DynamicImage.Filters.EdgeMode,System.Nullable{System.Drawing.Color})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="kernel"></param>
            <param name="edgeMode">The method used to extend the input image so that pixels at the edge can be evaluated.</param>
            <param name="borderColor"></param>
        </member>
        <member name="T:SoundInTheory.DynamicImage.FillType">
            <summary>
            Specifies the method used to fill a region.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.FillType.Solid">
            <summary>
            Specifies a solid colour fill type.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.FillType.Gradient">
            <summary>
            Specifies a gradient colour fill type.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Caching.DynamicImageCachingMode">
            <summary>
            Specifies how generated images will be cached.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Caching.DynamicImageCachingMode.Off">
            <summary>
            Caching is disabled.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Caching.DynamicImageCachingMode.InProc">
            <summary>
            Caching is in-process with an ASP.NET worker process.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Caching.DynamicImageCachingMode.Custom">
            <summary>
            Caching is using a custom data store to store generated images.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.UnitType">
            <summary>
            Specifies the unit of measurement.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.UnitType.Pixel">
            <summary>
            Measurement is in pixels.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.UnitType.Percentage">
            <summary>
            Measurement is a percentage relative to the overall image size.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.StateManagedObject">
            <summary>
            Provides a base class for objects which require view state management.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.IStateManagedObject">
            <summary>
            Defines the methods that any class must implement to support view state management.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.IStateManagedObject.SaveViewState(System.Boolean)">
            <summary>
            A protected method. Saves any state that has been modified after the 
            <see cref="M:System.Web.UI.IStateManager.TrackViewState"/> method was invoked.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.IStateManagedObject.SetDirty">
            <summary>
            Marks the <see cref="T:SoundInTheory.DynamicImage.IStateManagedObject"/> so that its 
            state will be recorded in view state.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.StateManagedObject.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved state.
            </summary>
            <param name="savedState">The previously saved state.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.StateManagedObject.SaveViewState(System.Boolean)">
            <summary>
            A protected method. Saves any state that has been modified after the 
            <see cref="M:SoundInTheory.DynamicImage.StateManagedObject.TrackViewState"/> method was invoked.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.StateManagedObject.TrackViewState">
            <summary>
            A protected method. Marks the beginning for tracking state changes on the object. 
            Any changes made after "mark" will be tracked and saved as part of the object view state.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.StateManagedObject.SoundInTheory#DynamicImage#IStateManagedObject#SetDirty">
            <summary>
            Marks the <see cref="T:SoundInTheory.DynamicImage.StateManagedObject"/> so that its 
            state will be recorded in view state.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.StateManagedObject.GetCacheKey">
            <summary>
            Creates a unique key which describes the current object. This key is used
            by <see cref="T:SoundInTheory.DynamicImage.Caching.DynamicImageCacheManager"/>
            to cache dynamically generated images.
            </summary>
            <returns>A unique key which describes the current object.</returns>
        </member>
        <member name="P:SoundInTheory.DynamicImage.StateManagedObject.IsTrackingViewState">
            <summary>
            Returns a value indicating whether any properties have been defined in the state bag.
            </summary>
            <value>
            <c>true</c> if there are style elements defined in the state bag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SoundInTheory.DynamicImage.StateManagedObject.ViewState">
            <summary>
            <para>This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
            <para>Gets the state bag that holds the style elements.</para>
            </summary>
            <value>
            A state bag that holds the properties defined in it.
            </value>
        </member>
        <member name="T:SoundInTheory.DynamicImage.DataBoundObject">
            <summary>
            Provides a base class for objects which require support for data binding.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.DataBoundObject.DataBind">
            <summary>
            Binds a data source to the invoked object and all its child controls.
            </summary>
        </member>
        <member name="E:SoundInTheory.DynamicImage.DataBoundObject.DataBinding">
            <summary>
            Occurs when the server control binds to a data source.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.DataBoundObject.BindingContainer">
            <summary>
            Gets the control that contains this control's data binding.
            </summary>
            <value>
            The <see cref="T:System.Web.UI.Control"/> that contains this control's data binding.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoundInTheory.DynamicImage.Filters.ConvolutionFilter" -->
        <member name="T:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter">
            <summary>
            Provides the abstract base class for a filter which replaces the entire image.
            Examples of this filter include <see cref="T:SoundInTheory.DynamicImage.Filters.ResizeFilter"/>
            and <see cref="T:SoundInTheory.DynamicImage.Filters.RotationFilter"/>.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.Filter">
            <summary>
            Provides the abstract base class for filters.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.Filter.ApplyFilter(Isis.Drawing.FastBitmap)">
            <summary>
            When overridden in a derived class, applies the filter algorithm to
            the specified image.
            </summary>
            <param name="bitmap">Image to apply the 
            <see cref="T:SoundInTheory.DynamicImage.Filters.Filter"/> to.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter.ApplyFilter(Isis.Drawing.FastBitmap)">
            <summary>
            Applies the filter to the specified <paramref name="bitmap"/>. This method
            first calls <see cref="M:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)"/>
            to calculate the size of the destination image. Then it calls
            <see cref="M:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)"/> 
            which is where the overridden class implements its filter algorithm.
            </summary>
            <param name="bitmap">
            Image to apply the <see cref="T:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter"/> to.
            </param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            When overridden in a derived class, returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            Some filters may not need to change the image; for example, if the <see cref="T:SoundInTheory.DynamicImage.Filters.ResizeFilter"/>
            detects that the requested dimensions are the same as the source's dimensions, then it will
            return <c>false</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ImageReplacementFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            When overridden in a derived class, applies the filter to the specified source.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ConvolutionFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            Returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            Filters inheriting from <see cref="T:SoundInTheory.DynamicImage.Filters.ConvolutionFilter"/> will always 
            create the destination image.</returns>
            <remarks>
            The destination dimensions for filters inheriting from <see cref="T:SoundInTheory.DynamicImage.Filters.ConvolutionFilter"/>
            will always be the same as the source dimensions.
            </remarks>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ConvolutionFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            When overridden in a derived class, applies the <see cref="T:SoundInTheory.DynamicImage.Filters.ConvolutionFilter"/> to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ColorTintFilter">
            <summary>
            Adjusts the colour tint of the layer.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="../documentation.xml" path="docs/types/type[@name = 'ColorTintFilter']/*"/>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.PixelFilter.OnBeginApplyFilter(Isis.Drawing.FastBitmap)">
            <summary>
            This method allows derived classes to perform actions 
            prior to the filter being applied.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.PixelFilter.OnEndApplyFilter">
            <summary>
            This method allows derived classes to perform actions 
            after the filter has been applied.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.PixelFilter.GetOutputColour(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            This method is called for each pixel in the source image.
            Derived classes must implement their functionality within this method.
            </summary>
            <param name="inputColour">The input colour.</param>
            <returns>The output colour.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ColorTintFilter.GetOutputColour(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Calculates the colour after the tint has been applied.
            </summary>
            <param name="inputColour">The input colour.</param>
            <returns>The output colour.</returns>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ColorTintFilter.Color">
            <summary>
            Gets or sets the colour used to tint the layer.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ColorTintFilter.Amount">
            <summary>
            Gets or sets the color tint amount. Values range from 0 (image will be grayscale) to 100.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.CustomStateManagedCollection`1">
            <summary>
            Provides an abstract base class for collections of 
            <typeparamref name="T"/>-derived objects.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.Add(`0)">
            <summary>
            Appends the specified object to the end of the collection.
            </summary>
            <param name="value">The <typeparamref name="T"/> to append to the collection.</param>
            <returns>The index value of the added item.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.GetKnownTypes">
            <summary>
            Gets an array of types that the <see cref="T:SoundInTheory.DynamicImage.CustomStateManagedCollection`1"/> 
            collection can contain.
            </summary>
            <returns>
            An ordered array of <see cref="T:System.Type"/> objects that identify the types of 
            objects that the collection can contain.
            </returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified object into the <see cref="T:SoundInTheory.DynamicImage.CustomStateManagedCollection`1"/> 
            collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the object is inserted.</param>
            <param name="value">The object to insert.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="o">The <c>object</c> being validated.</param>
            <remarks>
            The <c>OnValidate</c> method determines whether the object specified 
            in the <paramref name="o"/> parameter is a <typeparamref name="T"/> instance. 
            If not, it throws an <see cref="T:System.ArgumentException"/> exception.
            </remarks>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.Remove(`0)">
            <summary>
            Removes the specified object from the
            <see cref="T:SoundInTheory.DynamicImage.CustomStateManagedCollection`1"/> object.
            </summary>
            <param name="value">The object to remove from the collection.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index location from the
            <see cref="T:SoundInTheory.DynamicImage.CustomStateManagedCollection`1"/> object.
            </summary>
            <param name="index">The zero-based index location of the object to remove.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.SetDirtyObject(System.Object)">
            <summary>
            Marks the specified object as having changed since the last 
            load or save from view state.
            </summary>
            <param name="o">The object to mark as having changed since the last 
            load or save from view state.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.SoundInTheory#DynamicImage#IStateManagedObject#SetDirty">
            <summary>
            Provides an abstract base class for collections of 
            <typeparamref name="T"/>-derived objects.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="P:SoundInTheory.DynamicImage.CustomStateManagedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index in the collection.
            </summary>
            <param name="index">The index of the object to retrieve from the collection.</param>
            <value>The object at the specified index in the collection.</value>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ResizeFilter">
            <summary>
            <para>Changes the size of a <see cref="T:SoundInTheory.DynamicImage.Layer"/>. This filter can be used in several ways
            depending on the effect you wish to achieve.</para>
            <para>There are five modes available for the <see cref="T:SoundInTheory.DynamicImage.Filters.ResizeFilter"/> filter.</para>
            </summary>
            <remarks>By default, images will not be enlarged if they are smaller than 
            the target size. However, you can set the <see cref="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.EnlargeImage"/> 
            property to true to allow enlargement.</remarks>
            <example>
				<para>
					This example shows the use of the <see cref="T:ResizeFilter"/> with
					<see cref="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Mode"/> set to <see cref="F:SoundInTheory.DynamicImage.Filters.ResizeMode.UseWidth"/>.
					The content is resized based on the new width value while it preserves its native aspect ratio.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ResizeFilter Mode="UseWidth" Width="200" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/resizefilterusewidth.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:ResizeFilter"/> with
					<see cref="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Mode"/> set to <see cref="F:SoundInTheory.DynamicImage.Filters.ResizeMode.UseHeight"/>.
					The content is resized based on the new height value while it preserves its native aspect ratio.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ResizeFilter Mode="UseHeight" Height="200" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/resizefilteruseheight.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:ResizeFilter"/> with
					<see cref="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Mode"/> set to <see cref="F:SoundInTheory.DynamicImage.Filters.ResizeMode.Fill"/>.
					The content is resized to fill the destination dimensions. The aspect ratio is not preserved.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ResizeFilter Mode="Fill" Width="200" Height="200" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/resizefilterfill.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:ResizeFilter"/> with
					<see cref="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Mode"/> set to <see cref="F:SoundInTheory.DynamicImage.Filters.ResizeMode.Uniform"/>.
					The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ResizeFilter Mode="Uniform" Width="200" Height="200" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/resizefilteruniform.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:ResizeFilter"/> with
					<see cref="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Mode"/> set to <see cref="F:SoundInTheory.DynamicImage.Filters.ResizeMode.UniformFill"/>.
					The content is resized to fill the destination dimensions while it preserves 
					its native aspect ratio. If the aspect ratio of the destination rectangle differs 
					from the source, the source content is clipped to fit in the destination 
					dimensions. The source content is centred in the clipped rectangle.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ResizeFilter Mode="UniformFill" Width="200" Height="200" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/resizefilteruniformfill.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ResizeFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            Returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            The <see cref="T:SoundInTheory.DynamicImage.Filters.ResizeFilter"/> will only create the destination image
            if the requested dimensions are different from the current dimensions.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ResizeFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            Applies the <see cref="T:SoundInTheory.DynamicImage.Filters.ResizeFilter"/> to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Mode">
            <summary>
            Gets or sets a value that describes how the image should be stretched 
            to fill the specified width and height.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Width">
            <summary>
            Gets or sets the desired image width.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.Height">
            <summary>
            Gets or sets the desired image height.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.InterpolationMode">
            <summary>
            Gets or sets how the image is interpolated when it is resized. Usually this can
            be left as the default value.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ResizeFilter.EnlargeImage">
            <summary>
            Gets or sets a value that indicates whether the image will be enlarged 
            if it is smaller than the requested dimensions.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ResizeMode">
            <summary>
            Specifies how the image should be stretched.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Filters.ResizeMode.UseWidth">
            <summary>
            The content is resized based on the new width value 
            while it preserves its native aspect ratio.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Filters.ResizeMode.UseHeight">
            <summary>
            The content is resized based on the new height value 
            while it preserves its native aspect ratio.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Filters.ResizeMode.Fill">
            <summary>
            The content is resized to fill the destination dimensions. 
            The aspect ratio is not preserved.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Filters.ResizeMode.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while 
            it preserves its native aspect ratio.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.Filters.ResizeMode.UniformFill">
            <summary>
            The content is resized to fill the destination dimensions while it preserves its native aspect ratio.
            If the aspect ratio of the destination rectangle differs from the source,
            the source content is clipped to fit in the destination dimensions.
            The source content is centred in the clipped rectangle.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.BrightnessAdjustmentFilter">
            <summary>
            Adjusts the brightness of the layer.
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.BrightnessAdjustmentFilter"/> with a level of 50.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:BrightnessAdjustmentFilter Level="50" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/brightnessadjustmentfilter.jpg"/>
				</para>
			</example>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ColourMatrixFilter">
            <summary>
            The base class for filters that apply a colour matrix to the image.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ColourMatrixFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            Returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            <see cref="T:SoundInTheory.DynamicImage.Filters.ColourMatrixFilter"/> always returns <c>true</c> and sets the destination
            dimensions to the same as the source dimensions.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ColourMatrixFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            Applies the filter to the specified source.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ColourMatrixFilter.GetColourMatrixValues">
            <summary>
            When overridden in an inherited class, returns a matrix that will be used
            to transform the colour of each pixel in an image.
            </summary>
            <returns>Returns a float array that is used to create a 
            <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.BrightnessAdjustmentFilter.GetColourMatrixValues">
            <summary>
            Returns a matrix that will be used
            to transform the brightness of each pixel in an image.
            </summary>
            <returns>Returns a float array that is used to create a 
            <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.BrightnessAdjustmentFilter.Level">
            <summary>
            Gets or sets the brightness level. Values range from -100 to 100.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.FractalLayer">
            <summary>
            http://student.kuleuven.be/~m0216922/CG/juliamandelbrot.html
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Layer.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.Layer"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.Layer"/> object.
            </param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Layer.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.Layer"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Layer.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.Layer"/> object.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.DropShadowFilter">
            <summary>
            http://www.jhlabs.com/ip/ShadowFilter.java
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ShadowFilterBase.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            Returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            The <see cref="T:SoundInTheory.DynamicImage.Filters.DropShadowFilter"/> always returns <c>true</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ShadowFilterBase.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            Applies the <see cref="T:SoundInTheory.DynamicImage.Filters.DropShadowFilter"/> to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ShadowFilterBase.Color">
            <summary>
            Gets or sets the color of shadow or glow.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ShadowFilterBase.Opacity">
            <summary>
            Gets or sets the opacity of the shadow. Values range from 0 to 100.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ShadowFilterBase.Size">
            <summary>
            Gets or sets the size of the shadow or glow.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.DropShadowFilter.Angle">
            <summary>
            Gets or sets the angle of the light source. The angle is measured counter-clockwise from the x-axis.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.DropShadowFilter.Distance">
            <summary>
            Gets or sets the offset for the shadow.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.GaussianBlurFilter">
            <summary>
            Blurs the image. A Gaussian blur removes fine image detail
            and noise leaving only larger scale changes.
            </summary>
            <example>
				<para>This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.GaussianBlurFilter"/> with a radius of 5.</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:GaussianBlurFilter Radius="5" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/gaussianblurfilter.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.GaussianBlurFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            Applies the <see cref="T:SoundInTheory.DynamicImage.Filters.GaussianBlurFilter"/> to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.GaussianBlurFilter.Radius">
            <summary>
            Gets or sets the radius used in the blur kernel. A larger radius implies more blurring.
            Valid values are between 0 and 20 (inclusive).
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Composition.GetImageProperties">
            <summary>
            Used when we only want the properties and don't want to actually return the image
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Composition.GetImageInternal(System.Boolean)">
            <summary>
            
            </summary>
            <param name="loadImage">If true, the Image property of CompositionImage will be assigned; otherwise, it will be null</param>
            <returns></returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Composition.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.Composition"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.Composition"/> object.
            </param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Composition.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.Composition"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Composition.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.Composition"/> object.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.ImageProperties.IsImagePresent">
            <summary>
            Image might be null due to, for example, the source column in the database containing null
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.ImageProperties.FileExtension">
            <summary>
            Gets the file extension, not including a '.'
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.ClosedShapeLayer">
            <summary>
            An abstract base class that provides basic functionality for derived close shape classes.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ShapeLayer.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.ShapeLayer"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.ShapeLayer"/> object.
            </param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ShapeLayer.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.ShapeLayer"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ShapeLayer.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.ShapeLayer"/> object.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ClosedShapeLayer.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.ClosedShapeLayer"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.ClosedShapeLayer"/> object.
            </param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ClosedShapeLayer.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.ClosedShapeLayer"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ClosedShapeLayer.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.ClosedShapeLayer"/> object.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.AnchorStyles">
            <summary>
            Specifies the anchor position for layers.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.None">
            <summary>
            Specifies no anchoring.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.BottomCenter">
            <summary>
            Specifies that the layer will be anchored to the bottom and center of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.BottomLeft">
            <summary>
            Specifies that the layer will be anchored to the bottom and left of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.BottomRight">
            <summary>
            Specifies that the layer will be anchored to the bottom and right of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.MiddleCenter">
            <summary>
            Specifies that the layer will be anchored to the middle and center of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.MiddleLeft">
            <summary>
            Specifies that the layer will be anchored to the middle and left of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.MiddleRight">
            <summary>
            Specifies that the layer will be anchored to the middle and right of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.TopCenter">
            <summary>
            Specifies that the layer will be anchored to the top and center of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.TopLeft">
            <summary>
            Specifies that the layer will be anchored to the top and left of the output image.
            </summary>
        </member>
        <member name="F:SoundInTheory.DynamicImage.AnchorStyles.TopRight">
            <summary>
            Specifies that the layer will be anchored to the top and right of the output image.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ImageLayer.LoadViewState(System.Object)">
            <summary>
            /// <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.ImageLayer"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.ImageLayer"/> object.
            </param>
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ImageLayer.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.ImageLayer"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.ImageLayer.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.ImageLayer"/> object.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.ImageLayer.SourceFileName">
            <summary>
            Shortcut route to Source/FileImageSource
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.InversionFilter">
            <summary>
            Inverts the colours of the image.
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.InversionFilter"/>. 
					There are no parameters for this filter.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:InversionFilter /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/inversionfilter.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.InversionFilter.GetColourMatrixValues">
            <summary>
            Returns a matrix that will be used
            to invert the colour of each pixel in an image.
            </summary>
            <returns>Returns a float array that is used to create a 
            <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter">
            <summary>
            Creates the effect of an image placed on a shiny floor. This filter
            adds a reflection of the image just below it.
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter"/>. This example uses a ReflectionPercentage value of 100 and a ReflectionOpacity value of 25.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ShinyFloorFilter ReflectionPercentage="100" ReflectionOpacity="25" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/shinyfloorfilter1.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter"/>. This example uses a ReflectionPercentage value of 50 and a ReflectionOpacity value of 0.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ShinyFloorFilter ReflectionPercentage="50" ReflectionOpacity="0" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/shinyfloorfilter2.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter"/>.
					This example includes text that goes below the text baseline, so it sets ReflectionPositionY
					to position the reflection correctly.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:TextLayer Text="Generic message." Font-Size="40" Font-Bold="true" StrokeWidth="2" StrokeColour="Red"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ShinyFloorFilter ReflectionPercentage="100" ReflectionOpacity="50" ReflectionPositionY="19" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/shinyfloorfilter3.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            Returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            The <see cref="T:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter"/> will only create the destination image
            if the <see cref="P:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.ReflectionPercentage"/> property is not 0, 
            and the <see cref="P:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.ReflectionOpacity"/> property is not 100.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            Applies the <see cref="T:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter"/> to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.ReflectionPercentage">
            <summary>
            Gets or sets the percentage of the image height that will be reflected
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.ReflectionOpacity">
            <summary>
            Gets or sets the opacity of the start of the reflected image.
            The reflection will fade out to an opaque white.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ShinyFloorFilter.ReflectionPositionY">
            <summary>
            Gets or sets the y-position of the reflected image
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.SepiaFilter">
            <summary>
            Converts the image to grayscale (using the correct colour ratios).
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="../documentation.xml" path="docs/types/type[@name = 'SepiaFilter']/*"/>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.SepiaFilter.GetColourMatrixValues">
            <summary>
            Returns a matrix that will be used
            to convert each pixel in an image to a sepia tone.
            </summary>
            <returns>Returns a float array that is used to create a 
            <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.GrayscaleFilter">
            <summary>
            Converts the image to grayscale (using the correct colour ratios).
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.GrayscaleFilter"/>. 
					There are no parameters for this filter.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:GrayscaleFilter /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/grayscalefilter.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.GrayscaleFilter.GetColourMatrixValues">
            <summary>
            Returns a matrix that will be used
            to convert each pixel in an image to grayscale.
            </summary>
            <returns>Returns a float array that is used to create a 
            <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ContrastAdjustmentFilter">
            <summary>
            Adjusts the contrast of the layer.
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.ContrastAdjustmentFilter"/> with a level of -90.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ContrastAdjustmentFilter Level="-90" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/contrastadjustmentfilter1.jpg"/>
				</para>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.ContrastAdjustmentFilter"/> with a level of 100.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:ContrastAdjustmentFilter Level="100" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/contrastadjustmentfilter2.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ContrastAdjustmentFilter.GetOutputColour(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Calculates the colour after contrast adjustment has been applied.
            </summary>
            <param name="inputColour">The input colour.</param>
            <returns>The output colour.</returns>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ContrastAdjustmentFilter.Level">
            <summary>
            Gets or sets the contrast level. Values range from -100 to 100.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.FeatherFilter">
            <summary>
            Adjusts the brightness of the layer.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="../documentation.xml" path="docs/types/type[@name = 'FeatherFilter']/*"/>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.FeatherFilter.Radius">
            <summary>
            Gets or sets the feather radius. Values range from 0 to 100.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Handlers.DynamicImageHandler">
            <summary>
            Summary description for ImageGenerator.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter">
            <summary>
            Clips (reveals) the content of the layer based on the 
            non-transparent content of the specified image.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="../documentation.xml" path="docs/types/type[@name = 'ClippingMaskFilter']/*"/>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter.LoadViewState(System.Object)">
            <summary>
            /// <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter"/> object.
            </param>
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter"/> object.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter.MaskPositionX">
            <summary>
            Gets or sets the x-position of the left side of the mask image.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.ClippingMaskFilter.MaskPositionY">
            <summary>
            Gets or sets the y-position of the top side of the mask image.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.TextLayer.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved state of the <see cref="T:SoundInTheory.DynamicImage.TextLayer"/> object.
            </summary>
            <param name="savedState">
            An object containing the saved view state values for the <see cref="T:SoundInTheory.DynamicImage.TextLayer"/> object.
            </param>
        </member>
        <member name="M:SoundInTheory.DynamicImage.TextLayer.SaveViewState(System.Boolean)">
            <summary>
            Saves the current view state of the <see cref="T:SoundInTheory.DynamicImage.TextLayer"/> object.
            </summary>
            <param name="saveAll"><c>true</c> if all values should be saved regardless
            of whether they are dirty; otherwise <c>false</c>.</param>
            <returns>An object that represents the saved state. The default is <c>null</c>.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.TextLayer.TrackViewState">
            <summary>
            Tracks view state changes to the <see cref="T:SoundInTheory.DynamicImage.TextLayer"/> object.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.TextLayer.Width">
            <summary>
            Width of the text layer; if omitted, size will be calculated automatically 
            and all text will be rendered on a single line.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.TextLayer.Height">
            <summary>
            Height of the text layer; if both Width and Height are omitted,
            size will be calculated automatically and all text will be rendered
            on a single line; if just Height is omitted then text will be 
            wrapped based on the Width.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.RotationFilter">
            <summary>
            Rotates an image based on a specified angle. The image rotates around its centre point.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="../documentation.xml" path="docs/types/type[@name = 'RotateFilter']/*"/>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.RotationFilter.GetDestinationDimensions(Isis.Drawing.FastBitmap,System.Int32@,System.Int32@)">
            <summary>
            Returns the dimensions of the output image.
            </summary>
            <param name="source">The source image.</param>
            <param name="width">The desired width of the output image.</param>
            <param name="height">The desired height of the output image.</param>
            <returns><c>true</c> if the destination image should be created; otherwise <c>false</c>.
            The <see cref="T:SoundInTheory.DynamicImage.Filters.RotationFilter"/> will only create the destination image
            if the <see cref="P:SoundInTheory.DynamicImage.Filters.RotationFilter.Angle"/> property is not 0.</returns>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.RotationFilter.ApplyFilter(Isis.Drawing.FastBitmap,Isis.Drawing.FastBitmap,System.Drawing.Graphics)">
            <summary>
            Applies the <see cref="T:SoundInTheory.DynamicImage.Filters.RotationFilter"/> to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source image.</param>
            <param name="destination">The destination image.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object, created from <paramref name="destination"/>.</param>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.RotationFilter.Angle">
            <summary>
            Gets or sets the rotation angle. The angle is measured counter-clockwise from the x-axis.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.CropFilter">
            <summary>
            Crops an image. The rectangular section to crop is defined by X/Y coordinates and a size.
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.CropFilter"/> 
					to crop an image layer.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg"&gt;
			&lt;Filters&gt;
				&lt;sitdap:BrightnessAdjustmentFilter Level="50" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/cropfilter.jpg"/>
				</para>
			</example>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.CropFilter.X">
            <summary>
            Gets or sets the X-coordinate of the rectangular section to crop.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.CropFilter.Y">
            <summary>
            Gets or sets the Y-coordinate of the rectangular section to crop.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.CropFilter.Width">
            <summary>
            Gets or sets the width of the rectangular section to crop.
            </summary>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.CropFilter.Height">
            <summary>
            Gets or sets the height of the rectangular section to crop.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.Filters.OpacityAdjustmentFilter">
            <summary>
            Adjusts the opacity of a layer. Opacity can be from 0,
            which is totally transparent, to 100, which is totally opaque.
            </summary>
            <example>
				<para>
					This example shows the use of the <see cref="T:SoundInTheory.DynamicImage.Filters.OpacityAdjustmentFilter"/>.
					This example uses an Opacity value of 25 for the second layer, so that the first layer
					can be seen through the second layer.
				</para>
				<code>&lt;sitdap:DynamicImage runat="server" ImageFormat="Jpeg"&gt;
	&lt;Layers&gt;
		&lt;sitdap:ImageLayer SourceFileName="AutumnLeaves.jpg" /&gt;
		&lt;sitdap:ImageLayer SourceFileName="Forest.jpg" X="25" Y="25"&gt;
			&lt;Filters&gt;
				&lt;sitdap:OpacityAdjustmentFilter Opacity="50" /&gt;
			&lt;/Filters&gt;
		&lt;/sitdap:ImageLayer&gt;
	&lt;/Layers&gt;
&lt;/sitdap:DynamicImage&gt;</code>
				<para>The following illustration shows the effect created in the previous example.</para>
				<para>
					<img src="../art/filters/opacityadjustmentfilter.jpg"/>
				</para>
			</example>
        </member>
        <member name="M:SoundInTheory.DynamicImage.Filters.OpacityAdjustmentFilter.GetColourMatrixValues">
            <summary>
            Returns a matrix that will be used
            to transform the opacity of each pixel in an image.
            </summary>
            <returns>Returns a float array that is used to create a 
            <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="P:SoundInTheory.DynamicImage.Filters.OpacityAdjustmentFilter.Opacity">
            <summary>
            Gets or sets the opacity. Valid values range from 0 to 100.
            </summary>
        </member>
        <member name="T:SoundInTheory.DynamicImage.RectangleShapeLayer">
            <summary>
            Represents a rectangle shape layer.
            </summary>
        </member>
        <member name="M:SoundInTheory.DynamicImage.RectangleShapeLayer.CreateRoundedRectanglePath(System.Drawing.RectangleF,System.Int32)">
            <summary>
            http://www.wiredprairie.us/journal/2007/03/roundedrectangle_for_gdi_and_c.html
            </summary>
            <param name="rect"></param>
            <param name="cornerRadius"></param>
            <returns></returns>
        </member>
    </members>
</doc>
