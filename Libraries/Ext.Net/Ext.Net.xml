<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ext.Net</name>
    </assembly>
    <members>
        <member name="T:Ext.Net.Window">
            <summary>
            A specialized panel intended for use as an application window. Windows are floated and draggable by default, and also provide specific behavior like the ability to maximize and restore (with an event for minimizing, since the minimize behavior is application-specific). Windows can also be linked to a Ext.WindowGroup or managed by the Ext.WindowManager to provide grouping, activation, to front/back and other application-specific behavior.
            </summary>
        </member>
        <member name="T:Ext.Net.WindowBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ContentPanel">
            <summary>
            A Panel with a &lt;Body> region. 
            </summary>
        </member>
        <member name="T:Ext.Net.PanelBase">
            <summary>
            Base abstract Panel class.
            </summary>
        </member>
        <member name="T:Ext.Net.ContainerBase">
            <summary>
            Base Class for any visual Component that uses a box content Container.
            </summary>
        </member>
        <member name="T:Ext.Net.BoxComponentBase">
            <summary>
            Base Class for any visual Component that uses a box content Container.
            </summary>
        </member>
        <member name="T:Ext.Net.Component">
            <summary>
            Base Class for all Ext.Net Web Controls.
            </summary>
        </member>
        <member name="T:Ext.Net.Observable">
            <summary>
            Abstract base class that provides a common interface for publishing events
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.HasLayout">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.HasContent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.UnitPixelTypeCheck(System.Object,System.Web.UI.WebControls.Unit,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ResolveUrlLink(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToConfig">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToConfig(Ext.Net.LazyMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToScript(System.Boolean)">
            <summary>
            
            </summary>
            <param name="selfRendering"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToScript(Ext.Net.RenderMode,System.String)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToScript(Ext.Net.RenderMode,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="element"></param>
            <param name="selfRendering"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToScript(Ext.Net.RenderMode,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.ToScript(Ext.Net.RenderMode,System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="element"></param>
            <param name="selfRendering"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.AddScript(System.String)">
            <summary>
            Adds the script to be be called on the client.
            </summary>
            <param name="script">The script</param>
        </member>
        <member name="M:Ext.Net.XControl.AddScript(System.String,System.Object[])">
            <summary>
            Adds the script to be be called on the client. The script is formatted using the template and args.
            </summary>
            <param name="template">The script string template</param>
            <param name="args">The arguments to use with the template</param>
        </member>
        <member name="M:Ext.Net.XControl.Set(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.XControl.Set(Ext.Net.ScriptPosition,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.XControl.Call(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Ext.Net.XControl.Call(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.XControl.Call(Ext.Net.ScriptPosition,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.XControl.CallTemplate(System.String)">
            <summary>
            
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Ext.Net.XControl.CallTemplate(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="template"></param>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.XControl.CallTemplate(Ext.Net.ScriptPosition,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="template"></param>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.XControl.AddBeforeClientInitScript(System.String)">
            <summary>
            Adds the script directly before the ClientInitScript.
            </summary>
            <param name="script">The script</param>
        </member>
        <member name="M:Ext.Net.XControl.AddAfterClientInitScript(System.String)">
            <summary>
            Adds the script directly after the ClientInitScript.
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.OnClientInit(System.Boolean)">
            <summary>
            
            </summary>
            <param name="reinit"></param>
        </member>
        <member name="M:Ext.Net.XControl.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.XControl.PageLoadComplete(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.XControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.XControl.PreRenderAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.SimpleRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.XControl.RecreateChildControls">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.CreateChildControls">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.XControl.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Web.UI.Control)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.String,Ext.Net.RenderMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.String,System.Int32,Ext.Net.RenderMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Web.UI.Control,Ext.Net.RenderMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Web.UI.Control,System.Int32,Ext.Net.RenderMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.String,Ext.Net.RenderMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.String,System.Int32,Ext.Net.RenderMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Web.UI.Control,Ext.Net.RenderMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Web.UI.Control,System.Int32,Ext.Net.RenderMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.AddTo(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.AddTo(System.Web.UI.Control)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.AddTo(System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.AddTo(System.Web.UI.Control,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.InsertTo(System.Int32,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.InsertTo(System.Int32,System.Web.UI.Control)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.InsertTo(System.Int32,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.InsertTo(System.Int32,System.Web.UI.Control,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.OnDataBinding(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.XControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.XControl.HtmlRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.XControl.Apply``1(Ext.Net.IApply)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.XControl.Apply(Ext.Net.IApply)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.XControl.IsDefault">
            <summary>
            Does this object currently represent it's default state.
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.IsLazy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.IsLast">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.IsIdRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.IsGeneratedID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.ForceIdRendering">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.AllowCallbackScriptMonitoring">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.AlreadyRendered">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.IsDynamic">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.DeferInitScriptGeneration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.TopDynamicControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.ContentUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.RegisterAllResources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.VersionName">
            <summary>
            The version name
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.Version">
            <summary>
            The Version number of this build
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.ClientID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.ClientIDProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.HasOwnIDMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.IDMode">
            <summary>
            Options for controlling how the .ClientID property is rendered in the client.
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.LazyMode">
            <summary>
            Options for controlling how the lazy control is instantiated in the client.
            </summary>
        </member>
        <member name="P:Ext.Net.XControl.InitialConfig">
            <summary>
            This Component's initial configuration specification. Read-only.
            </summary>
        </member>
        <member name="T:Ext.Net.XControl.Builder`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ControlBuilder`2.op_Implicit(Ext.Net.ControlBuilder{`0,`1})~`0">
            <summary>
            Implicit conversion of a TBuilder object directly into a TComponent. 
            </summary>
        </member>
        <member name="M:Ext.Net.ControlBuilder`2.ID(System.String)">
            <summary>
            Identifier assigned to the server control.
            </summary>
            <param name="id">The id to assign to the server control.</param>
            <returns>ControlBuilder</returns>
        </member>
        <member name="M:Ext.Net.ControlBuilder`2.ToComponent">
            <summary>
            Get the instance of the underlying Control.
            </summary>
            <returns>Control</returns>
        </member>
        <member name="M:Ext.Net.ControlBuilder`2.Render(System.Web.UI.Control)">
            <summary>
            Render the Control.
            </summary>
            <param name="control">A Control in which to render this Builder into.</param>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.#ctor(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.ToScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.Render">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.Render(System.Web.UI.Control)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.Render(System.String,Ext.Net.RenderMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.Render(System.Web.UI.Control,Ext.Net.RenderMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.Render(System.String,Ext.Net.RenderMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.Render(System.Web.UI.Control,Ext.Net.RenderMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.AddTo(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.AddTo(System.Web.UI.Control)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.AddTo(System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.AddTo(System.Web.UI.Control,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.AddScript(System.String)">
            <summary>
            Adds the script to be be called on the client.
            </summary>
            <param name="script">The script</param>
        </member>
        <member name="M:Ext.Net.XControl.Builder`2.AddScript(System.String,System.Object[])">
            <summary>
            Adds the script to be be called on the client. The script is formatted using the template and args.
            </summary>
            <param name="template">The script string template</param>
            <param name="args">The arguments to use with the template</param>
        </member>
        <member name="M:Ext.Net.Observable.RegisterAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.RegisterCustomAttribute(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.Observable.AddEvents(System.String)">
            <summary>
            Used to define events on this Observable
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.AddListener(System.String,Ext.Net.JFunction)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.AddListener(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.AddListener(System.String,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.AddListener(System.String,System.String)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.AddListener(System.String,System.String,System.String)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.AddListener(System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.FireEvent(System.String,System.Object[])">
            <summary>
            Fires the specified event with the passed parameters (minus the event name)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.On(System.String,System.String)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.On(System.String,System.String,System.String)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.On(System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.On(System.String,Ext.Net.JFunction)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.On(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.On(System.String,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.PurgeListeners">
            <summary>
            Removes all listeners for this object
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.RemoveListener(System.String,System.String)">
            <summary>
            Removes a listener
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.RemoveListener(System.String,System.String,System.String)">
            <summary>
            Removes a listener
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.ResumeEvents">
            <summary>
            Resume firing events. (see suspendEvents)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.SuspendEvents(System.Boolean)">
            <summary>
            Suspend the firing of all events. (see resumeEvents)
            </summary>
            <param name="queueSuspended">Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events;</param>
        </member>
        <member name="M:Ext.Net.Observable.Un(System.String,System.String)">
            <summary>
            Removes a listener (shorthand for removeListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Un(System.String,System.String,System.String)">
            <summary>
            Removes a listener (shorthand for removeListener)
            </summary>
        </member>
        <member name="P:Ext.Net.Observable.CustomConfig">
            <summary>
            Collection of custom js config
            </summary>
        </member>
        <member name="P:Ext.Net.Observable.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Observable.XTypeProxy">
            <summary>
            The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child items of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddEvents(System.String)">
            <summary>
            Used to define events on this Observable
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddListener(System.String,Ext.Net.JFunction)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddListener(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddListener(System.String,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddListener(System.String,System.String)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddListener(System.String,System.String,System.String)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.AddListener(System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this component
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.FireEvent(System.String,System.Object[])">
            <summary>
            Fires the specified event with the passed parameters (minus the event name)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.On(System.String,System.String)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.On(System.String,System.String,System.String)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.On(System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.On(System.String,Ext.Net.JFunction)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.On(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.On(System.String,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this element (shorthand for addListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.PurgeListeners">
            <summary>
            Removes all listeners for this object
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.RemoveListener(System.String,System.String)">
            <summary>
            Removes a listener
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.RemoveListener(System.String,System.String,System.String)">
            <summary>
            Removes a listener
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.ResumeEvents">
            <summary>
            Resume firing events. (see suspendEvents)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.SuspendEvents(System.Boolean)">
            <summary>
            Suspend the firing of all events. (see resumeEvents)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.Un(System.String,System.String)">
            <summary>
            Removes a listener (shorthand for removeListener)
            </summary>
        </member>
        <member name="M:Ext.Net.Observable.Builder`2.Un(System.String,System.String,System.String)">
            <summary>
            Removes a listener (shorthand for removeListener)
            </summary>
        </member>
        <member name="P:Ext.Net.Observable.Config.CustomConfig">
            <summary>
            Collection of custom js config
            </summary>
        </member>
        <member name="M:Ext.Net.Component.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.Component.AddScript(System.String)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.Component.AfterPluginAdd(Ext.Net.Plugin)">
            <summary>
            
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:Ext.Net.Component.AfterPluginRemove(Ext.Net.Plugin)">
            <summary>
            
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:Ext.Net.Component.ToolTips_AfterItemAdd(Ext.Net.ToolTip)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.Component.ToolTips_AfterItemRemove(Ext.Net.ToolTip)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.Component.CallEl(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.Component.AddClass(System.String)">
            <summary>
            Adds a CSS class to the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.AddContainerClass(System.String)">
            <summary>
            Adds a CSS class to the component's container.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.ApplyStyles(System.String)">
            <summary>
            More flexible version of setStyle for setting style properties.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Destroy">
            <summary>
            Destroys this component by purging any event listeners, removing the component's element from the DOM, removing the component from its Ext.Container (if applicable) and unregistering it from Ext.ComponentMgr. Destruction is generally handled automatically by the framework and this method should usually not need to be called directly.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Focus">
            <summary>
            Try to focus this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Focus(System.Boolean)">
            <summary>
            Try to focus this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Focus(System.Boolean,System.Int32)">
            <summary>
            Try to focus this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Hide">
            <summary>
            Hide this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.RemoveClass(System.String)">
            <summary>
            Removes a CSS class from the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.RemoveContainerClass(System.String)">
            <summary>
            Removes a CSS class from the component's container.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Show">
            <summary>
            Show this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.SetDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.SetSelectable(System.Boolean)">
            <summary>
            Convenience function for setting selectable by boolean.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.SetVisible(System.Boolean)">
            <summary>
            Convenience function to hide or show this component by boolean.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.SetFieldLabel(System.String)">
            <summary>
            Convenience function for setting the FieldLabel of a Component during an DirectEvent or DirectMethod request.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mon(Ext.Net.Element,System.String,Ext.Net.JFunction)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mon(Ext.Net.Observable,System.String,Ext.Net.JFunction)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mon(Ext.Net.Element,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mon(Ext.Net.Observable,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mon(Ext.Net.Element,System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mon(Ext.Net.Observable,System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mun(Ext.Net.Element,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method. 
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mun(Ext.Net.Observable,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method. 
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mun(Ext.Net.Element,System.String,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method. 
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Mun(Ext.Net.Observable,System.String,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method. 
            </summary>
        </member>
        <member name="M:Ext.Net.Component.AddLabelCls(System.String)">
            <summary>
            
            </summary>
            <param name="labelCls"></param>
        </member>
        <member name="M:Ext.Net.Component.RemoveLabelCls(System.String)">
            <summary>
            
            </summary>
            <param name="labelCls"></param>
        </member>
        <member name="P:Ext.Net.Component.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.OwnerCt">
            <summary>
            This Component's owner Container (defaults to undefined, and is set automatically when this Component is added to a Container). Read-only.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Element">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Anchor">
            <summary>
            This configuation option is to be applied to child items of a container managed by this layout (ie. configured with layout:'anchor').
            This value is what tells the layout how an item should be anchored to the container. items added 
            to an AnchorLayout accept an anchoring-specific config property of anchor which is a string containing two values: 
            the horizontal anchor value and the vertical anchor value (for example, '100% 50%'). 
            
            The following types of anchor values are supported:
                Percentage : Any value between 1 and 100, expressed as a percentage.
                    The first anchor is the percentage width that the item should take up within the container, 
                    and the second is the percentage height. For example:
                    // two values specified
                    anchor: '100% 50%' // render item complete width of the container and
                                       // 1/2 height of the container
            
                    // one value specified
            
                    anchor: '100%'     // the width value; the height will default to auto
                
                Offsets : Any positive or negative integer value.
                    This is a raw adjustment where the first anchor is the offset from the right edge of the container, 
                    and the second is the offset from the bottom edge. For example:
                    // two values specified
            
                    anchor: '-50 -100' // render item the complete width of the container
                                       // minus 50 pixels and
                                       // the complete height minus 100 pixels.
            
                    // one value specified
            
                    anchor: '-50'      // anchor value is assumed to be the right offset value
                                       // bottom offset will default to 0
            
                Sides : Valid values are 'right' (or 'r') and 'bottom' (or 'b').
                    Either the container must have a fixed size or an anchorSize config value 
                    defined at render time in order for these to have any effect.
                
                Mixed :
                    Anchor values can also be mixed as needed. For example, to render the width 
                    offset from the container right edge by 50 pixels and 75% of the container's height use:
                    anchor: '-50 75%'
            </summary>
        </member>
        <member name="P:Ext.Net.Component.DefaultAnchor">
            <new date="2010-02-12" owner="geoff" key="Component">
            Added new .DefaultAnchor property to Component. The .DefaultAnchor is applied as the .Anchor config item to all child Items during render.
            </new>
            <summary>
            The DefaultAnchor is applied as the Anchor config item to all child Items during render.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AnchorHorizontal">
            <summary>
            See Anchor property
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AnchorVertical">
            <summary>
            See Anchor property
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ColumnWidth">
            <summary>
            The ColumnWidth property is only used with ColumnLayout is used. The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.IsFormField">
            <summary>
            True if component should be rendered as a Form Field with a Field Label and Label separator (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.LabelSeparator">
            <summary>
            The separator to display after the text of each fieldLabel. This property may be configured at various levels.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.LabelStyle">
            <summary>
            A CSS style specification string to apply directly to this field's label. Defaults to the container's labelStyle value if set (eg, Ext.layout.FormLayout.labelStyle , or '').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.HideLabels">
            <summary>
            True to hide field labels by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.LabelAlign">
            <summary>
            The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.LabelWidth">
            <summary>
            The default width in pixels of field labels (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.LabelPad">
            <summary>
            The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Flex">
            <summary>
            NOTE: This property is only used when the parent Layout is HBoxLayout or VBoxLayout. This configuation option is to be applied to child items of the container managed by this layout. Each child item with a flex property will be flexed horizontally according to each item's relative flex value compared to the sum of all items with a flex value specified. Any child items that have either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.RowHeight">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AdditionalConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ContextMenuID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ContextMenuIDProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AllowDomMove">
            <summary>
            Whether the component can move the Dom node when rendering (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ApplyTo">
            <summary>
            Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ApplyToProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AutoEl">
            <summary>
            A tag name or DomHelper spec used to create the Element which will encapsulate this Component.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AutoShow">
            <summary>
            True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ClearCls">
            <summary>
            The CSS class used to to apply to the special clearing div rendered directly after each form field wrapper to provide field clearing (defaults to 'x-form-clear-left').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Cls">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.CtCls">
            <summary>
            An optional extra CSS class that will be added to this component's container. This can be useful for adding customized styles to the container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Disabled">
            <summary>
            Render this component disabled (default is false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Selectable">
            <summary>
            Render this component disabled (default is false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.DisabledClass">
            <summary>
            CSS class added to the component when it is disabled (defaults to 'x-item-disabled').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.FieldLabel">
            <summary>
            The label text to display next to this Component (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Hidden">
            <summary>
            Render this component hidden (default is false). If true, the hide method will be called internally.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.HideLabel">
            <summary>
            true to completely hide the label element (label and separator). Defaults to false. By default, even if you do not specify a fieldLabel the space will still be reserved so that the field will line up with other fields that do have labels. Setting this to true will cause the field to not reserve that space.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.HideMode">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.HideParent">
            <summary>
            True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). 
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ItemCls">
            <summary>
            An additional CSS class to apply to the div wrapping the form item element of this field.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ItemID">
            <summary>
            An itemId can be used as an alternative way to get a reference to a component when no object reference is available.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.OverCls">
            <summary>
            An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element, and removed when the mouse moves out. (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.PType">
            <summary>
            The registered ptype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a Plugin is being specified not as a fully instantiated Component, but as a Component config object. The ptype will be looked up at render time up to determine what type of Plugin to create.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Ref">
            <summary>
            A path specification, relative to the Component's ownerCt specifying into which ancestor Container to place a named reference to this Component. The ancestor axis can be traversed by using '/' characters in the path.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.RenderTo">
            <summary>
            The id of the node, a DOM node or an existing Element that will be the content Container to render this component into.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.TopDynamicRenderTo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.RenderToProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.StateEvents">
            <summary>
            An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.StateID">
            <summary>
            The unique id for this component to use for state management purposes (defaults to the component id).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Stateful">
            <summary>
            A flag which causes the Component to attempt to restore the state of internal properties from a saved state on startup.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.StyleSpec">
            <summary>
            A custom style specification to be applied to this component's Element.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ClientID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Plugins">
            <summary>
            An object or array of controls that inherit from IPlugin that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.AutoRender">
            <summary>
            Automatically render control on client during page load. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.ToolTips">
            <summary>
            A collection of ToolTip configs used to add ToolTips to the Component
            </summary>
        </member>
        <member name="P:Ext.Net.Component.GetState">
            <summary>
            Return component's data which should be saved by StateProvider
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Anchor(System.String)">
            <summary>
            This config is only used when this Component is rendered by a Container which has been configured to use an AnchorLayout based layout manager
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.DefaultAnchor(System.String)">
            <summary>
            The DefaultAnchor is applied as the Anchor config item to all child Items during render.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AnchorHorizontal(System.String)">
            <summary>
            See Anchor property
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AnchorVertical(System.String)">
            <summary>
            See Anchor property
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.ColumnWidth(System.Double)">
            <summary>
            The ColumnWidth property is only used with ColumnLayout is used. The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.IsFormField(System.Boolean)">
            <summary>
            True if component should be rendered as a Form Field with a Field Label and Label separator (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.LabelSeparator(System.String)">
            <summary>
            The separator to display after the text of each fieldLabel. This property may be configured at various levels.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.LabelStyle(System.String)">
            <summary>
            A CSS style specification string to apply directly to this field's label. Defaults to the container's labelStyle value if set (eg, Ext.layout.FormLayout.labelStyle , or '').
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.HideLabels(System.Boolean)">
            <summary>
            True to hide field labels by default (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.LabelAlign(Ext.Net.LabelAlign)">
            <summary>
            The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.LabelWidth(System.Int32)">
            <summary>
            The default width in pixels of field labels (defaults to 100).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.LabelPad(System.Int32)">
            <summary>
            The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Flex(System.Int32)">
            <summary>
            NOTE: This property is only used when the parent Layout is HBoxLayout or VBoxLayout. This configuation option is to be applied to child items of the container managed by this layout. Each child item with a flex property will be flexed horizontally according to each item's relative flex value compared to the sum of all items with a flex value specified. Any child items that have either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.RowHeight(System.Double)">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AllowDomMove(System.Boolean)">
            <summary>
            Whether the component can move the Dom node when rendering (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.ApplyTo(System.String)">
            <summary>
            Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AutoShow(System.Boolean)">
            <summary>
            True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.ClearCls(System.String)">
            <summary>
            The CSS class used to to apply to the special clearing div rendered directly after each form field wrapper to provide field clearing (defaults to 'x-form-clear-left').
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Cls(System.String)">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.CtCls(System.String)">
            <summary>
            An optional extra CSS class that will be added to this component's container. This can be useful for adding customized styles to the container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Disabled(System.Boolean)">
            <summary>
            Render this component disabled (default is false).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Selectable(System.Boolean)">
            <summary>
            Determines if this component is selectable. (default is true).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.DisabledClass(System.String)">
            <summary>
            CSS class added to the component when it is disabled (defaults to 'x-item-disabled').
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.FieldLabel(System.String)">
            <summary>
            The label text to display next to this Component (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Hidden(System.Boolean)">
            <summary>
            Render this component hidden (default is false). If true, the hide method will be called internally.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.HideLabel(System.Boolean)">
            <summary>
            true to completely hide the label element (label and separator). Defaults to false. By default, even if you do not specify a fieldLabel the space will still be reserved so that the field will line up with other fields that do have labels. Setting this to true will cause the field to not reserve that space.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.HideMode(Ext.Net.HideMode)">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.HideParent(System.Boolean)">
            <summary>
            True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.ItemCls(System.String)">
            <summary>
            An additional CSS class to apply to the div wrapping the form item element of this field.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.ItemID(System.String)">
            <summary>
            An itemId can be used as an alternative way to get a reference to a component when no object reference is available.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.OverCls(System.String)">
            <summary>
            An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element, and removed when the mouse moves out. (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.PType(System.String)">
            <summary>
            The registered ptype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a Plugin is being specified not as a fully instantiated Component, but as a Component config object. The ptype will be looked up at render time up to determine what type of Plugin to create.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Ref(System.String)">
            <summary>
            A path specification, relative to the Component's ownerCt specifying into which ancestor Container to place a named reference to this Component. The ancestor axis can be traversed by using '/' characters in the path.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.RenderTo(System.String)">
            <summary>
            The id of the node, a DOM node or an existing Element that will be the content Container to render this component into.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.StateEvents(System.String[])">
            <summary>
            An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.StateID(System.String)">
            <summary>
            The unique id for this component to use for state management purposes (defaults to the component id).
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Stateful(System.Boolean)">
            <summary>
            A flag which causes the Component to attempt to restore the state of internal properties from a saved state on startup.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.StyleSpec(System.String)">
            <summary>
            A custom style specification to be applied to this component's Element.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AutoRender(System.Boolean)">
            <summary>
            Automatically render control on client during page load. Default is true.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.CallEl(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AddClass(System.String)">
            <summary>
            Adds a CSS class to the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.AddContainerClass(System.String)">
            <summary>
            Adds a CSS class to the component's container.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.ApplyStyles(System.String)">
            <summary>
            More flexible version of setStyle for setting style properties.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Destroy">
            <summary>
            Destroys this component by purging any event listeners, removing the component's element from the DOM, removing the component from its Ext.Container (if applicable) and unregistering it from Ext.ComponentMgr. Destruction is generally handled automatically by the framework and this method should usually not need to be called directly.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Focus">
            <summary>
            Try to focus this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Focus(System.Boolean)">
            <summary>
            Try to focus this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Focus(System.Boolean,System.Int32)">
            <summary>
            Try to focus this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Hide">
            <summary>
            Hide this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.RemoveClass(System.String)">
            <summary>
            Removes a CSS class from the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.RemoveContainerClass(System.String)">
            <summary>
            Removes a CSS class from the component's container.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Show">
            <summary>
            Show this component.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mon(Ext.Net.Element,System.String,Ext.Net.JFunction)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mon(Ext.Net.Observable,System.String,Ext.Net.JFunction)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mon(Ext.Net.Element,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mon(Ext.Net.Observable,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mon(Ext.Net.Element,System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mon(Ext.Net.Observable,System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Adds listeners to any Observable object (or Elements) which are automatically removed when this Component is destroyed.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mun(Ext.Net.Element,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mun(Ext.Net.Observable,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mun(Ext.Net.Element,System.String,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method.
            </summary>
        </member>
        <member name="M:Ext.Net.Component.Builder`2.Mun(Ext.Net.Observable,System.String,System.String,System.String)">
            <summary>
            Removes listeners that were added by the Mon method.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Anchor">
            <summary>
            This config is only used when this Component is rendered by a Container which has been configured to use an AnchorLayout based layout manager
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.DefaultAnchor">
            <summary>
            The DefaultAnchor is applied as the Anchor config item to all child Items during render.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.AnchorHorizontal">
            <summary>
            See Anchor property
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.AnchorVertical">
            <summary>
            See Anchor property
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.ColumnWidth">
            <summary>
            The ColumnWidth property is only used with ColumnLayout is used. The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.IsFormField">
            <summary>
            True if component should be rendered as a Form Field with a Field Label and Label separator (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.LabelSeparator">
            <summary>
            The separator to display after the text of each fieldLabel. This property may be configured at various levels.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.LabelStyle">
            <summary>
            A CSS style specification string to apply directly to this field's label. Defaults to the container's labelStyle value if set (eg, Ext.layout.FormLayout.labelStyle , or '').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.HideLabels">
            <summary>
            True to hide field labels by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.LabelAlign">
            <summary>
            The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.LabelWidth">
            <summary>
            The default width in pixels of field labels (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.LabelPad">
            <summary>
            The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Flex">
            <summary>
            NOTE: This property is only used when the parent Layout is HBoxLayout or VBoxLayout. This configuation option is to be applied to child items of the container managed by this layout. Each child item with a flex property will be flexed horizontally according to each item's relative flex value compared to the sum of all items with a flex value specified. Any child items that have either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.RowHeight">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.AllowDomMove">
            <summary>
            Whether the component can move the Dom node when rendering (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.ApplyTo">
            <summary>
            Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.AutoEl">
            <summary>
            A tag name or DomHelper spec used to create the Element which will encapsulate this Component.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.AutoShow">
            <summary>
            True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.ClearCls">
            <summary>
            The CSS class used to to apply to the special clearing div rendered directly after each form field wrapper to provide field clearing (defaults to 'x-form-clear-left').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Cls">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.CtCls">
            <summary>
            An optional extra CSS class that will be added to this component's container. This can be useful for adding customized styles to the container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Disabled">
            <summary>
            Render this component disabled (default is false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Selectable">
            <summary>
            Determines if this component is selectable. (default is true).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.DisabledClass">
            <summary>
            CSS class added to the component when it is disabled (defaults to 'x-item-disabled').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.FieldLabel">
            <summary>
            The label text to display next to this Component (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Hidden">
            <summary>
            Render this component hidden (default is false). If true, the hide method will be called internally.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.HideLabel">
            <summary>
            true to completely hide the label element (label and separator). Defaults to false. By default, even if you do not specify a fieldLabel the space will still be reserved so that the field will line up with other fields that do have labels. Setting this to true will cause the field to not reserve that space.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.HideMode">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.HideParent">
            <summary>
            True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.ItemCls">
            <summary>
            An additional CSS class to apply to the div wrapping the form item element of this field.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.ItemID">
            <summary>
            An itemId can be used as an alternative way to get a reference to a component when no object reference is available.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.OverCls">
            <summary>
            An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element, and removed when the mouse moves out. (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.PType">
            <summary>
            The registered ptype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a Plugin is being specified not as a fully instantiated Component, but as a Component config object. The ptype will be looked up at render time up to determine what type of Plugin to create.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Ref">
            <summary>
            A path specification, relative to the Component's ownerCt specifying into which ancestor Container to place a named reference to this Component. The ancestor axis can be traversed by using '/' characters in the path.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.RenderTo">
            <summary>
            The id of the node, a DOM node or an existing Element that will be the content Container to render this component into.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.StateEvents">
            <summary>
            An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.StateID">
            <summary>
            The unique id for this component to use for state management purposes (defaults to the component id).
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Stateful">
            <summary>
            A flag which causes the Component to attempt to restore the state of internal properties from a saved state on startup.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.StyleSpec">
            <summary>
            A custom style specification to be applied to this component's Element.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.Plugins">
            <summary>
            An object or array of controls that inherit from IPlugin that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.AutoRender">
            <summary>
            Automatically render control on client during page load. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.Component.Config.ToolTips">
            <summary>
            A collection of ToolTip configs used to add ToolTips to the Component
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetTabMenuVisible(System.Boolean)">
            <summary>
            Show and Hide the Tab Menu option.
            </summary>
            <param name="hidden"></param>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetAutoScroll">
            <summary>
            Sets the overflow on the content element of the component.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetAutoScroll(System.Boolean)">
            <summary>
            Sets the overflow on the content element of the component.
            </summary>
            <param name="scroll">True to allow the Component to auto scroll.</param>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetPagePosition(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the page XY position of the component. To set the left and addToStart instead, use setPosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetPagePosition(System.Int32,System.Int32)">
            <summary>
            Sets the page XY position of the component. To set the left and addToStart instead, use setPosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetPosition(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the left and addToStart of the component. To set the page XY position instead, use setPagePosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the left and addToStart of the component. To set the page XY position instead, use setPagePosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetSize(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the width and height of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the width and height of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SyncSize">
            <summary>
            Force the component's size to recalculate based on the underlying element's current height and width.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.UpdateBox(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the current box measurements of the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.UpdateBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current box measurements of the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the height of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetHeight(System.Int32)">
            <summary>
            Sets the height of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the width of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.SetWidth(System.Int32)">
            <summary>
            Sets the width of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.AutoScroll">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.AutoHeight">
            <summary>
            True to use height:'auto', false to use fixed height (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.AutoWidth">
            <summary>
            True to use width:'auto', false to use fixed width (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.CollapseMode">
            <summary>
            By default, collapsible regions are collapsed by clicking the expand/collapse tool button that renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's split bar will also display a small collapse button in the center of the bar. In 'mini' mode the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, and the only two supported values are undefined and 'mini'. Note that if a collapsible region does not have a title bar, then collapseMode must be set to 'mini' in order for the region to be collapsible by the user as the tool button will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.BoxMaxHeight">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.BoxMaxWidth">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.BoxMinHeight">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.BoxMinWidth">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.MaxHeight">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.MaxWidth">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.MinHeight">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.MinWidth">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.RegionMaxHeight">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region. 
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.RegionMaxWidth">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region. 
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.RegionMinHeight">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region. 
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.RegionMinWidth">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region. 
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Margins">
            <summary>
             Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout or one of the two BoxLayout subclasses.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.CMargins">
            <summary>
             Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout or one of the two BoxLayout subclasses.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.PageX">
            <summary>
            The page level x coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.PageY">
            <summary>
            The page level y coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Region">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout layout manager (e.g. specifying layout:'border').
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Split">
            <summary>
            True to create a SplitRegion and display a 5px wide Ext.SplitBar between this region and its neighbor, allowing the user to resize the regions dynamically. Defaults to false creating a Region. Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout layout manager (e.g. specifying layout:'border').
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.TabTip">
            <summary>
             A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over the associated tab selector element. NOTE: TabTip config is used when a BoxComponent is a child of a TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.X">
            <summary>
            The local x (left) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Y">
            <summary>
            The local y (addToStart) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.TabMenu">
            <summary>
            Tab's menu
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.TabMenuHidden">
            <summary>
            Defaults to false. True to hide tab's menu
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.AutoScroll(System.Boolean)">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.AutoHeight(System.Boolean)">
            <summary>
            True to use height:'auto', false to use fixed height (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.AutoWidth(System.Boolean)">
            <summary>
            True to use width:'auto', false to use fixed width (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.CollapseMode(Ext.Net.CollapseMode)">
            <summary>
            By default, collapsible regions are collapsed by clicking the expand/collapse tool button that renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's split bar will also display a small collapse button in the center of the bar. In 'mini' mode the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, and the only two supported values are undefined and 'mini'. Note that if a collapsible region does not have a title bar, then collapseMode must be set to 'mini' in order for the region to be collapsible by the user as the tool button will not be rendered.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.BoxMaxHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.BoxMaxWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.BoxMinHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.BoxMinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.MaxHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.MaxWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.MinHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.MinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.RegionMaxHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region. 
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.RegionMaxWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.RegionMinHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.RegionMinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.Height(System.Web.UI.WebControls.Unit)">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.Margins(System.String)">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout or one of the two BoxLayout subclasses.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.CMargins(System.String)">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout or one of the two BoxLayout subclasses.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.PageX(System.Web.UI.WebControls.Unit)">
            <summary>
            The page level x coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.PageY(System.Web.UI.WebControls.Unit)">
            <summary>
            The page level y coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.Region(Ext.Net.Region)">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout layout manager (e.g. specifying layout:'border').
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.Split(System.Boolean)">
            <summary>
            True to create a SplitRegion and display a 5px wide Ext.SplitBar between this region and its neighbor, allowing the user to resize the regions dynamically. Defaults to false creating a Region. Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout layout manager (e.g. specifying layout:'border').
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.TabTip(System.String)">
            <summary>
            A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over the associated tab selector element. NOTE: TabTip config is used when a BoxComponent is a child of a TabPanel.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.X(System.Int32)">
            <summary>
            The local x (left) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.Y(System.Int32)">
            <summary>
            The local y (addToStart) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.TabMenuHidden(System.Boolean)">
            <summary>
            Defaults to false. True to hide tab's menu.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetAutoScroll">
            <summary>
            Sets the overflow on the content element of the component.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetAutoScroll(System.Boolean)">
            <summary>
            Sets the overflow on the content element of the component.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetPagePosition(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the page XY position of the component. To set the left and addToStart instead, use setPosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetPagePosition(System.Int32,System.Int32)">
            <summary>
            Sets the page XY position of the component. To set the left and addToStart instead, use setPosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetPosition(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the left and addToStart of the component. To set the page XY position instead, use setPagePosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the left and addToStart of the component. To set the page XY position instead, use setPagePosition. This method fires the move event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetSize(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the width and height of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the width and height of the component. This method fires the resize event.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.SyncSize">
            <summary>
            Force the component's size to recalculate based on the underlying element's current height and width.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.UpdateBox(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets the current box measurements of the component's underlying element.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxComponentBase.Builder`2.UpdateBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current box measurements of the component's underlying element.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.AutoScroll">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.AutoHeight">
            <summary>
            True to use height:'auto', false to use fixed height (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.AutoWidth">
            <summary>
            True to use width:'auto', false to use fixed width (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.CollapseMode">
            <summary>
            By default, collapsible regions are collapsed by clicking the expand/collapse tool button that renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's split bar will also display a small collapse button in the center of the bar. In 'mini' mode the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, and the only two supported values are undefined and 'mini'. Note that if a collapsible region does not have a title bar, then collapseMode must be set to 'mini' in order for the region to be collapsible by the user as the tool button will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.BoxMaxHeight">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.BoxMaxWidth">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.BoxMinHeight">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.BoxMinWidth">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.MaxHeight">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.MaxWidth">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.MinHeight">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.MinWidth">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to. Warning: This will override any size management applied by layout managers.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.RegionMaxHeight">
            <summary>
            The maximum value in pixels which this BoxComponent will set its height to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region. 
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.RegionMaxWidth">
            <summary>
            The maximum value in pixels which this BoxComponent will set its width to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.RegionMinHeight">
            <summary>
            The minimum value in pixels which this BoxComponent will set its height to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.RegionMinWidth">
            <summary>
            The minimum value in pixels which this BoxComponent will set its width to in a BorderLayout Region. Warning: This will property will only be applied when this BoxComponent is rendered within a BorderLayout Region.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.Margins">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout or one of the two BoxLayout subclasses.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.CMargins">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout or one of the two BoxLayout subclasses.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.PageX">
            <summary>
            The page level x coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.PageY">
            <summary>
            The page level y coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.Region">
            <summary>
            Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout layout manager (e.g. specifying layout:'border').
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.Split">
            <summary>
            True to create a SplitRegion and display a 5px wide Ext.SplitBar between this region and its neighbor, allowing the user to resize the regions dynamically. Defaults to false creating a Region. Note: this config is only used when this BoxComponent is rendered by a Container which has been configured to use the BorderLayout layout manager (e.g. specifying layout:'border').
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.TabTip">
            <summary>
            A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over the associated tab selector element. NOTE: TabTip config is used when a BoxComponent is a child of a TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.X">
            <summary>
            The local x (left) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.Y">
            <summary>
            The local y (addToStart) coordinate for this component if contained within a positioning container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.TabMenu">
            <summary>
            Tab's menu
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentBase.Config.TabMenuHidden">
            <summary>
            Defaults to false. True to hide tab's menu.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Add(Ext.Net.Component)">
            <summary>
            Adds a component to this container. Fires the beforeadd event before adding, then fires the add event after the component has been added. If the container is already rendered when add is called, you may need to call doLayout to refresh the view. This is required so that you can add multiple child components if needed while only refreshing the layout once.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Add(System.Collections.Generic.IEnumerable{Ext.Net.Component})">
            <summary>
            Adds a range of components to this container.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Bubble(System.String)">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Bubble(System.String,System.String)">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Bubble(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Cascade(System.String)">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Cascade(System.String,System.String)">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Cascade(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.DoLayout">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.DoLayout(System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Insert(System.Int32,Ext.Net.Component)">
            <summary>
            Inserts a Component into this Container at a specified index. Fires the beforeadd event before inserting, then fires the add event after the Component has been inserted.
            </summary>
            <param name="index">The index at which the Component will be inserted into the Container's items collection</param>
            <param name="component">The child Component to insert.</param>
        </member>
        <member name="M:Ext.Net.ContainerBase.Insert(System.Int32,System.String)">
            <summary>
            Inserts a Component into this Container at a specified index. Fires the beforeadd event before inserting, then fires the add event after the Component has been inserted.
            </summary>
            <param name="index">The index at which the Component will be inserted into the Container's items collection</param>
            <param name="id">The id of the child Component to insert.</param>
        </member>
        <member name="M:Ext.Net.ContainerBase.Remove(Ext.Net.Component)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Remove(Ext.Net.Component,System.Boolean)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Remove(System.String)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Remove(System.String,System.Boolean)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.RemoveAll">
            <summary>
            Removes all components from this container.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.RemoveAll(System.Boolean)">
            <summary>
            Removes all components from this container.
            </summary>
            <param name="autoDestroy">(optional) True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config.</param>
        </member>
        <member name="P:Ext.Net.ContainerBase.ActiveItem">
            <summary>
            A string component id or the numeric index of the component that should be initially activated within the content Container's layout on render.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.ActiveIndex">
            <summary>
            A string component id or the numeric index of the component that should be initially activated within the content Container's layout on render.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.AutoDestroy">
            <summary>
            If true the content Container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.AutoDoLayout">
            <new date="2010-02-12" owner="geoff" key="Container">
            Added new AutoDoLayout property to Container. If .AutoDoLayout is true, the .doLayout() function will be called in the afterrender event. Default is false.
            </new>
            <summary>
            If true .doLayout() is called after render. Default is false.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Defaults">
            <summary>
            A config object that will be applied to all components added to this content Container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each items, and should be valid for the types of items being added to the content Container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.HideBorders">
            <summary>
            True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.MonitorResize">
            <summary>
            True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.ForceLayout">
            <summary>
            If true the container will force a layout initially even if hidden or collapsed. This option is useful for forcing forms to render in collapsed or hidden containers. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Items">
            <summary>
            Items Collection
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.ItemsProxy">
            <summary>
            Items Collection
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Layout">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.LayoutConfig">
            <summary>
            This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value)
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.ActiveItem">
            <summary>
            A string component id of the component that should be initially activated within the content Container's layout on render.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.ActiveIndex">
            <summary>
            A numeric index of the component that should be initially activated within the content Container's layout on render.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.AutoDestroy">
            <summary>
            If true the content Container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.AutoDoLayout">
            <summary>
            If true .doLayout() is called after render. Default is false.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.Defaults">
            <summary>
            A config object that will be applied to all components added to this content Container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each items, and should be valid for the types of items being added to the content Container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.HideBorders">
            <summary>
            True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.MonitorResize">
            <summary>
            True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.ForceLayout">
            <summary>
            If true the container will force a layout initially even if hidden or collapsed. This option is useful for forcing forms to render in collapsed or hidden containers. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.Items">
            <summary>
            Items Collection
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.Layout">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerBase.Config.LayoutConfig">
            <summary>
            This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value)
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Items(System.Action{Ext.Net.ItemsBuilder{`0,`1}})">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.ActiveItem(System.String)">
            <summary>
            A string component id of the component that should be initially activated within the content Container's layout on render.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.ActiveIndex(System.Int32)">
            <summary>
            A numeric index of the component that should be initially activated within the content Container's layout on render.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.AutoDestroy(System.Boolean)">
            <summary>
            If true the content Container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.AutoDoLayout(System.Boolean)">
            <summary>
            If true .doLayout() is called after render. Default is false.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.DefaultType(System.String)">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.HideBorders(System.Boolean)">
            <summary>
            True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.MonitorResize(System.Boolean)">
            <summary>
            True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.ForceLayout(System.Boolean)">
            <summary>
            If true the container will force a layout initially even if hidden or collapsed. This option is useful for forcing forms to render in collapsed or hidden containers. (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Layout(System.String)">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Add(Ext.Net.Component)">
            <summary>
            Adds a component to this container. Fires the beforeadd event before adding, then fires the add event after the component has been added. If the container is already rendered when add is called, you may need to call doLayout to refresh the view. This is required so that you can add multiple child components if needed while only refreshing the layout once.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Add(System.Collections.Generic.IEnumerable{Ext.Net.Component})">
            <summary>
            Adds a range of components to this container.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Bubble(System.String)">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Bubble(System.String,System.String)">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Bubble(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Cascade(System.String)">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Cascade(System.String,System.String)">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Cascade(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Cascades down the component/container heirarchy from this component (called first), calling the specified function with each component. The scope (this) of function call will be the scope provided or the current component. The arguments to the function will be the args provided or the current component. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.DoLayout">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.DoLayout(System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.DoLayout(System.Boolean,System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Insert(System.Int32,Ext.Net.Component)">
            <summary>
            Inserts a Component into this Container at a specified index. Fires the beforeadd event before inserting, then fires the add event after the Component has been inserted.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Insert(System.Int32,System.String)">
            <summary>
            Inserts a Component into this Container at a specified index. Fires the beforeadd event before inserting, then fires the add event after the Component has been inserted.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Remove(Ext.Net.Component)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Remove(Ext.Net.Component,System.Boolean)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Remove(System.String)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.Remove(System.String,System.Boolean)">
            <summary>
            Removes a component from this container. Fires the beforeremove event before removing, then fires the remove event after the component has been removed.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.RemoveAll">
            <summary>
            Removes all components from this container.
            </summary>
        </member>
        <member name="M:Ext.Net.ContainerBase.Builder`2.RemoveAll(System.Boolean)">
            <summary>
            Removes all components from this container.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="title"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="title"></param>
            <param name="html"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.OnStateChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="postDataKey"></param>
            <param name="postCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.PanelBase.RaisePostDataChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.AfterKeyBindingAdd(Ext.Net.KeyBinding)">
            <summary>
            
            </summary>
            <param name="keyBinding"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.CallBody(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.PanelBase.ApplyBodyStyles(System.String)">
            <summary>
            Apply css styles for body
            </summary>
            <param name="style">style string</param>
        </member>
        <member name="M:Ext.Net.PanelBase.AddBodyCssClass(System.String)">
            <summary>
            Add new css class for body
            </summary>
            <param name="cssClass">css class name</param>
        </member>
        <member name="M:Ext.Net.PanelBase.RemoveBodyCssClass(System.String)">
            <summary>
            Remove body's css class
            </summary>
            <param name="cssClass">css class name</param>
        </member>
        <member name="M:Ext.Net.PanelBase.Collapse">
            <summary>
            Collapses the panel body so that it becomes hidden. Fires the beforecollapse event which will cancel the collapse action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Collapse(System.Boolean)">
            <summary>
            Collapses the panel body so that it becomes hidden. Fires the beforecollapse event which will cancel the collapse action if it returns false.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="M:Ext.Net.PanelBase.Expand">
            <summary>
            Expands the panel body so that it becomes visible. Fires the beforeexpand event which will cancel the expand action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Expand(System.Boolean)">
            <summary>
            Expands the panel body so that it becomes visible. Fires the beforeexpand event which will cancel the expand action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.ClearContent">
            <summary>
            Clear loaded content
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.LoadContent">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.LoadContent(System.String)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.LoadContent(System.String,System.Boolean)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.LoadContent(Ext.Net.LoadConfig)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.LoadContent(Ext.Net.JFunction)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Reload">
            <summary>
            Reloads the content panel based on the current LoadConfig.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.SetHtml(System.String)">
            <summary>
            Updates the content of the Panel body with the supplied string ('html') value.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.SetIconClass(System.String)">
            <summary>
            Sets the CSS class that provides the icon image for this panel. This method will replace any existing icon class if one has already been set.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.SetIconClass(Ext.Net.Icon)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.SetTitle(System.String)">
            <summary>
            Sets the title text for the panel and optionally the icon class.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.SetTitle(System.String,System.String)">
            <summary>
            Sets the title text for the panel and optionally the icon class.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.ToggleCollapse">
            <summary>
            Shortcut for performing an expand or collapse based on the current state of the panel.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.ToggleCollapse(System.Boolean)">
            <summary>
            Shortcut for performing an expand or collapse based on the current state of the panel.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.CollapsedProxy(System.Boolean)">
            <summary>
            DirectEvent proxy method for .Collapsed property.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Update(System.String)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
            <param name="html">The html string to update the body with. Replaces all content of the body.</param>
        </member>
        <member name="M:Ext.Net.PanelBase.Update(System.String,System.Boolean)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Update(System.String,System.Boolean,System.String)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Update(System.String,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.RenderToProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.IsCollapsible">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ext.Net.PanelBase.StateChanged">
            <summary>
            Fires when the panels state is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.AnimCollapse">
            <summary>
            True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.AutoLoad">
            <summary>
            A valid url spec according to the UpdateOptions Ext.UpdateOptions.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render. The URL will become the default URL for this panel's body element, so it may be refreshed at any time.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.AutoLoadProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.BaseCls">
            <summary>
            The base CSS class to apply to this panel's element (defaults to 'x-panel').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.BottomBar">
            <summary>
            The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Closable">
            <summary>
            True to display the 'close' button and allow the user to close the tab, false to hide the button and disallow closing the tab (default to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.CloseAction">
            <summary>
            The action to take when the Panel is closed. The default action is 'close' which will actually remove the Panel from the DOM and destroy it. The other valid option is 'hide' which will simply hide the Panel by setting visibility to hidden and applying negative offsets, keeping the Panel available to be redisplayed via the show method.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.TopBar">
            <summary>
            The top toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.FooterBar">
            <summary>
            A Toolbar object, a Toolbar config, or an array of Buttons/Button configs, describing a Toolbar to be rendered into this Panel's footer element.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.FormGroup">
            <summary>
            True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.BodyBorder">
            <summary>
            True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.BodyCssClass">
            <summary>
            Additional css class selector to be applied to the body element
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.BodyStyle">
            <summary>
            Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Border">
            <summary>
            True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.BorderProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.ButtonAlign">
            <summary>
            Valid values are "left", "center" and "right" (defaults to "right").
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Buttons">
            <summary>
            A collection of buttons configs used to add buttons to the footer of this panel
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.CollapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Collapsed">
            <summary>
            True to render the panel collapsed, false to render it expanded (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.CollapsedCls">
            <summary>
            A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Collapsible">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Draggable">
            <summary>
            True to enable dragging of this Panel (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.DraggableConfig">
            <summary>
            Drag config object.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.DraggableConfigProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Elements">
            <summary>
            A comma-delimited list of panel elements to initialize when the panel is rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Floating">
            <summary>
            True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Footer">
            <summary>
            True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Frame">
            <summary>
            True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Header">
            <summary>
            True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.HeaderAsText">
            <summary>
            True to display the panel title in the header, false to hide it (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.HideCollapseTool">
            <summary>
            True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Html">
            <summary>
            An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Icon">
            <summary>
            The icon to use in the Title bar. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.IconClsProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.IconCls">
            <summary>
            A CSS class that will provide a background image to be used as the panel header icon (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.KeyMap">
            <summary>
            A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.MaskDisabled">
            <summary>
            True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.MinButtonWidth">
            <summary>
            Minimum width in pixels of all buttons in this panel (defaults to 75).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Shadow">
            <summary>
            ShadowMode to display a shadow behind the panel. Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.ShadowOffset">
            <summary>
            The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Shim">
            <summary>
            False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Padding">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be a number to be applied to all sides, or a normal css string describing padding. See also, PaddingSummary.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.PaddingSummary">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be a number to be applied to all sides, or a normal css string describing padding. See also, Padding.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.LoadMask">
            <summary>
            An Ext.LoadMask to mask the Panel while loading (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Title">
            <summary>
            The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the content Container element will get created.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.TitleCollapse">
            <summary>
            True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.PanelBase.Tools" -->
        <member name="P:Ext.Net.PanelBase.Unstyled">
            <summary>
            Overrides the baseCls setting to baseCls = 'x-plain' which renders the panel unstyled except for required attributes for Ext layouts to function (e.g. overflow:hidden).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.PreventBodyReset">
            <summary>
            Defaults to false. When set to true, an extra css class 'x-panel-normal' will be added to the panel's element, effectively applying css styles suggested by the W3C (see http://www.w3.org/TR/CSS21/sample.html) to the Panel's body element (not the header, footer, etc.).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.AnimCollapse(System.Boolean)">
            <summary>
            True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.BaseCls(System.String)">
            <summary>
            The base CSS class to apply to this panel's element (defaults to 'x-panel').
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Closable(System.Boolean)">
            <summary>
            Panels themselves do not directly support being closed, but some Panel subclasses do (like Ext.Window) or a Panel Class within an Ext.TabPanel. Specify true to enable closing in such situations. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.CloseAction(Ext.Net.CloseAction)">
            <summary>
            The action to take when the Panel is closed. The default action is 'close' which will actually remove the Panel from the DOM and destroy it. The other valid option is 'hide' which will simply hide the Panel by setting visibility to hidden and applying negative offsets, keeping the Panel available to be redisplayed via the show method.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.FormGroup(System.Boolean)">
            <summary>
            True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.BodyBorder(System.Boolean)">
            <summary>
            True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.BodyCssClass(System.String)">
            <summary>
            Additional css class selector to be applied to the body element
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.BodyStyle(System.String)">
            <summary>
            Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Border(System.Boolean)">
            <summary>
            True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.ButtonAlign(Ext.Net.Alignment)">
            <summary>
            Valid values are \"left\", \"center\" and \"right\" (defaults to \"right\").
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.CollapseFirst(System.Boolean)">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Collapsed(System.Boolean)">
            <summary>
            True to render the panel collapsed, false to render it expanded (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.CollapsedCls(System.String)">
            <summary>
            A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed').
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Collapsible(System.Boolean)">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Draggable(System.Boolean)">
            <summary>
            True to enable dragging of this Panel (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Elements(System.String)">
            <summary>
            A comma-delimited list of panel elements to initialize when the panel is rendered.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Floating(System.Boolean)">
            <summary>
            True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Footer(System.Boolean)">
            <summary>
            True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Frame(System.Boolean)">
            <summary>
            True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Header(System.Boolean)">
            <summary>
            True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.HeaderAsText(System.Boolean)">
            <summary>
            True to display the panel title in the header, false to hide it (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.HideCollapseTool(System.Boolean)">
            <summary>
            True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Html(System.String)">
            <summary>
            An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the Title bar. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.IconCls(System.String)">
            <summary>
            A CSS class that will provide a background image to be used as the panel header icon (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.MaskDisabled(System.Boolean)">
            <summary>
            True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.MinButtonWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            Minimum width in pixels of all buttons in this panel (defaults to 75).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Shadow(Ext.Net.ShadowMode)">
            <summary>
            ShadowMode to display a shadow behind the panel. Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.ShadowOffset(System.Int32)">
            <summary>
            The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Shim(System.Boolean)">
            <summary>
            False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Padding(System.Int32)">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be a number to be applied to all sides, or a normal css string describing padding. See also, PaddingSummary.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.PaddingSummary(System.String)">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be a number to be applied to all sides, or a normal css string describing padding. See also, Padding.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Title(System.String)">
            <summary>
            The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the content Container element will get created.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.TitleCollapse(System.Boolean)">
            <summary>
            True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Unstyled(System.Boolean)">
            <summary>
            Overrides the baseCls setting to baseCls = 'x-plain' which renders the panel unstyled except for required attributes for Ext layouts to function (e.g. overflow:hidden).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.PreventBodyReset(System.Boolean)">
            <summary>
            Defaults to false. When set to true, an extra css class 'x-panel-normal' will be added to the panel's element, effectively applying css styles suggested by the W3C (see http://www.w3.org/TR/CSS21/sample.html) to the Panel's body element (not the header, footer, etc.).
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.ApplyBodyStyles(System.String)">
            <summary>
            Apply css styles for body
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.AddBodyCssClass(System.String)">
            <summary>
            Add new css class for body
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.RemoveBodyCssClass(System.String)">
            <summary>
            Remove body's css class
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Collapse">
            <summary>
            Collapses the panel body so that it becomes hidden. Fires the beforecollapse event which will cancel the collapse action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Collapse(System.Boolean)">
            <summary>
            Collapses the panel body so that it becomes hidden. Fires the beforecollapse event which will cancel the collapse action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Expand">
            <summary>
            Expands the panel body so that it becomes visible. Fires the beforeexpand event which will cancel the expand action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Expand(System.Boolean)">
            <summary>
            Expands the panel body so that it becomes visible. Fires the beforeexpand event which will cancel the expand action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.ClearContent">
            <summary>
            Clear loaded content.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.LoadContent">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.LoadContent(System.String)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.LoadContent(System.String,System.Boolean)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.LoadContent(Ext.Net.LoadConfig)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.LoadContent(Ext.Net.JFunction)">
            <summary>
            Loads this content panel immediately with content returned from an XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Reload">
            <summary>
            Reloads the content panel based on the current LoadConfig.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.SetTitle(System.String)">
            <summary>
            Sets the title text for the panel and optionally the icon class.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.SetTitle(System.String,System.String)">
            <summary>
            Sets the title text for the panel and optionally the icon class.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.ToggleCollapse">
            <summary>
            Shortcut for performing an expand or collapse based on the current state of the panel.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.ToggleCollapse(System.Boolean)">
            <summary>
            Shortcut for performing an expand or collapse based on the current state of the panel.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Update(System.String)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Update(System.String,System.Boolean)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Update(System.String,System.Boolean,System.String)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="M:Ext.Net.PanelBase.Builder`2.Update(System.String,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.AnimCollapse">
            <summary>
            True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.AutoLoad">
            <summary>
            A valid url spec according to the UpdateOptions Ext.UpdateOptions.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render. The URL will become the default URL for this panel's body element, so it may be refreshed at any time.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.BaseCls">
            <summary>
            The base CSS class to apply to this panel's element (defaults to 'x-panel').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.BottomBar">
            <summary>
            The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Closable">
            <summary>
            Panels themselves do not directly support being closed, but some Panel subclasses do (like Ext.Window) or a Panel Class within an Ext.TabPanel. Specify true to enable closing in such situations. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.CloseAction">
            <summary>
            The action to take when the Panel is closed. The default action is 'close' which will actually remove the Panel from the DOM and destroy it. The other valid option is 'hide' which will simply hide the Panel by setting visibility to hidden and applying negative offsets, keeping the Panel available to be redisplayed via the show method.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.TopBar">
            <summary>
            The top toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.FooterBar">
            <summary>
            A Toolbar object, a Toolbar config, or an array of Buttons/Button configs, describing a Toolbar to be rendered into this Panel's footer element.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.FormGroup">
            <summary>
            True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.BodyBorder">
            <summary>
            True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.BodyCssClass">
            <summary>
            Additional css class selector to be applied to the body element
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.BodyStyle">
            <summary>
            Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Border">
            <summary>
            True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.ButtonAlign">
            <summary>
            Valid values are \"left\", \"center\" and \"right\" (defaults to \"right\").
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Buttons">
            <summary>
            A collection of buttons configs used to add buttons to the footer of this panel.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.CollapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Collapsed">
            <summary>
            True to render the panel collapsed, false to render it expanded (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.CollapsedCls">
            <summary>
            A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Collapsible">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Draggable">
            <summary>
            True to enable dragging of this Panel (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Elements">
            <summary>
            A comma-delimited list of panel elements to initialize when the panel is rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Floating">
            <summary>
            True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Footer">
            <summary>
            True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Frame">
            <summary>
            True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Header">
            <summary>
            True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.HeaderAsText">
            <summary>
            True to display the panel title in the header, false to hide it (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.HideCollapseTool">
            <summary>
            True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Html">
            <summary>
            An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Icon">
            <summary>
            The icon to use in the Title bar. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.IconCls">
            <summary>
            A CSS class that will provide a background image to be used as the panel header icon (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.KeyMap">
            <summary>
            A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.MaskDisabled">
            <summary>
            True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.MinButtonWidth">
            <summary>
            Minimum width in pixels of all buttons in this panel (defaults to 75).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Shadow">
            <summary>
            ShadowMode to display a shadow behind the panel. Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.ShadowOffset">
            <summary>
            The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Shim">
            <summary>
            False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Padding">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be a number to be applied to all sides, or a normal css string describing padding. See also, PaddingSummary.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.PaddingSummary">
            <summary>
            A shortcut for setting a padding style on the body element. The value can either be a number to be applied to all sides, or a normal css string describing padding. See also, Padding.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.LoadMask">
            <summary>
            An Ext.LoadMask to mask the Panel while loading (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.Title">
            <summary>
            The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the content Container element will get created.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.TitleCollapse">
            <summary>
            True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.PanelBase.Config.Tools" -->
        <member name="P:Ext.Net.PanelBase.Config.Unstyled">
            <summary>
            Overrides the baseCls setting to baseCls = 'x-plain' which renders the panel unstyled except for required attributes for Ext layouts to function (e.g. overflow:hidden).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelBase.Config.PreventBodyReset">
            <summary>
            Defaults to false. When set to true, an extra css class 'x-panel-normal' will be added to the panel's element, effectively applying css styles suggested by the W3C (see http://www.w3.org/TR/CSS21/sample.html) to the Panel's body element (not the header, footer, etc.).
            </summary>
        </member>
        <member name="P:Ext.Net.ContentPanel.ContentEl">
            <summary>
            The id of an existing HTML node to use as the panel's body content (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.AlignTo(System.String,System.String)">
            <summary>
            Aligns the window to the specified element
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.AlignTo(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Aligns the window to the specified element
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.AnchorTo(System.String,System.String)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.AnchorTo(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.AnchorTo(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Center">
            <summary>
            Centers this window in the viewport
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Close">
            <summary>
            Closes the window, removes it from the DOM and destroys the window object. The beforeclose event is fired before the close happens and will cancel the close action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Focus">
            <summary>
            Focuses the window. If a defaultButton is set, it will receive focus, otherwise the window itself will receive focus.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide(System.Web.UI.Control)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide(System.Web.UI.Control,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide(System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide(System.String,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Hide(System.String,System.String,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Maximize">
            <summary>
            Fits the window within its current container and automatically replaces the 'maximize' tool button with the 'restore' tool button.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Minimize">
            <summary>
            Placeholder method for minimizing the window. By default, this method simply fires the minimize event since the behavior of minimizing a window is application-specific. To implement custom minimize behavior, either the minimize event can be handled or this method can be overridden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Restore">
            <summary>
            Restores a maximized window back to its original size and position prior to being maximized and also replaces the 'restore' tool button with the 'maximize' tool button.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.SetActive(System.Boolean)">
            <summary>
            Makes this the active window by showing its shadow, or deactivates it by hiding its shadow. This method also fires the activate or deactivate event depending on which action occurred.
            </summary>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:Ext.Net.WindowBase.SetAnimateTarget(System.String)">
            <summary>
            Sets the target element from which the window should animate while opening.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.SetAnimateTarget(System.Web.UI.Control)">
            <summary>
            Sets the target element from which the window should animate while opening.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show(System.Web.UI.Control)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show(System.Web.UI.Control,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show(System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show(System.String,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Show(System.String,System.String,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.ToBack">
            <summary>
            Sends this window to the back of (lower z-index than) any other visible windows
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.ToFront">
            <summary>
            Brings this window to the front of any other visible windows
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.ToggleMaximize">
            <summary>
            A shortcut method for toggling between maximize and restore based on the current maximized state of the window.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.ShowModal">
            <summary>
            Shows the Window in a Modal state.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.HideModal">
            <summary>
            Shows the Window in a non-Modal state.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.ToggleModal">
            <summary>
            Toggle the Modal state of the Window. Shows or Hides the body mask. 
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.ToggleModal(System.Boolean)">
            <summary>
            Toggle the Modal state of the Window. Shows or Hides the body mask. 
            </summary>
            <param name="hide">true to show the body mask.</param>
        </member>
        <member name="P:Ext.Net.WindowBase.AutoWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.AnimateTarget">
            <summary>
            Id or element from which the window should animate while opening (defaults to null with no animation).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Closable">
            <summary>
            True to display the 'close' tool button and allow the user to close the window, false to hide the button and disallow closing the window (default to true).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.CloseAction">
            <summary>
            The action to take when the close button is clicked. The default action is 'close' which will actually remove the window from the DOM and destroy it. The other valid option is 'hide' which will simply hide the window by setting visibility to hidden and applying negative offsets, keeping the window available to be redisplayed via the show method.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Constrain">
            <summary>
            True to constrain the window to the viewport, false to allow it to fall outside of the viewport (defaults to false). Optionally the header only can be constrained using ConstrainHeader.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.ConstrainHeader">
            <summary>
            True to constrain the window header to the viewport, allowing the window body to fall outside of the viewport, false to allow the header to fall outside the viewport (defaults to false). Optionally the entire window can be constrained using constrain.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.DefaultButton">
            <summary>
            The id of a button to focus when this window received the focus.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.DefaultRenderTo">
            <summary>
            The default render to Element (Body or Form). Using when AutoRender="false"
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Draggable">
            <summary>
            True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true). Note that by default the window will be centered in the viewport, so if dragging is disabled the window may need to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.ExpandOnShow">
            <summary>
            True to always expand the window when it is displayed, false to keep it in its current state (which may be collapsed) when displayed (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Maximizable">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.MinHeight">
            <summary>
            The minimum height in pixels allowed for this window (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.MinWidth">
            <summary>
            The minimum width in pixels allowed for this window (defaults to 200). Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Minimizable">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Modal">
            <summary>
            True to make the window modal and mask everything behind it when displayed, false to display it without restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.OnEsc">
            <summary>
            Allows override of the built-in processing for the escape key. Default action is to close the Window (performing whatever action is specified in closeAction. To prevent the Window closing when the escape key is pressed, specify this as Ext.emptyFn (See Ext.emptyFn).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Plain">
            <summary>
            True to render the window body with a transparent background so that it will blend into the framing elements, false to add a lighter background color to visually highlight the body element and separate it more distinctly from the surrounding frame (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Resizable">
            <summary>
            True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.ResizeHandles">
            <summary>
            A valid Ext.Resizable handles config string (defaults to 'all'). Only applies when resizable = true.
            
            Value   Description
            ------  -------------------
            'n'     north
            's'     south
            'e'     east
            'w'     west
            'nw'    northwest
            'sw'    southwest
            'se'    southeast
            'ne'    northeast
            'all'   all
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.InitCenter">
            <summary>
            Centers this window in the viewport when the Page loads.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AutoWidth(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AnimateTarget(System.String)">
            <summary>
            Id or element from which the window should animate while opening (defaults to null with no animation).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Closable(System.Boolean)">
            <summary>
            True to display the 'close' tool button and allow the user to close the window, false to hide the button and disallow closing the window (default to true).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.CloseAction(Ext.Net.CloseAction)">
            <summary>
            The action to take when the close button is clicked. The default action is 'close' which will actually remove the window from the DOM and destroy it. The other valid option is 'hide' which will simply hide the window by setting visibility to hidden and applying negative offsets, keeping the window available to be redisplayed via the show method.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Constrain(System.Boolean)">
            <summary>
            True to constrain the window to the viewport, false to allow it to fall outside of the viewport (defaults to false). Optionally the header only can be constrained using ConstrainHeader.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ConstrainHeader(System.Boolean)">
            <summary>
            True to constrain the window header to the viewport, allowing the window body to fall outside of the viewport, false to allow the header to fall outside the viewport (defaults to false). Optionally the entire window can be constrained using constrain.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.DefaultButton(System.String)">
            <summary>
            The id of a button to focus when this window received the focus.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.DefaultRenderTo(Ext.Net.DefaultRenderTo)">
            <summary>
            The default render to Element (Body or Form). Using when AutoRender='false'
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Draggable(System.Boolean)">
            <summary>
            True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true). Note that by default the window will be centered in the viewport, so if dragging is disabled the window may need to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ExpandOnShow(System.Boolean)">
            <summary>
            True to always expand the window when it is displayed, false to keep it in its current state (which may be collapsed) when displayed (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Maximizable(System.Boolean)">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Height(System.Web.UI.WebControls.Unit)">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.MinHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum height in pixels allowed for this window (defaults to 100).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.MinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width in pixels allowed for this window (defaults to 200). Only applies when resizable = true.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Minimizable(System.Boolean)">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Modal(System.Boolean)">
            <summary>
            True to make the window modal and mask everything behind it when displayed, false to display it without restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.OnEsc(System.String)">
            <summary>
            Allows override of the built-in processing for the escape key. Default action is to close the Window (performing whatever action is specified in closeAction. To prevent the Window closing when the escape key is pressed, specify this as Ext.emptyFn (See Ext.emptyFn).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Plain(System.Boolean)">
            <summary>
            True to render the window body with a transparent background so that it will blend into the framing elements, false to add a lighter background color to visually highlight the body element and separate it more distinctly from the surrounding frame (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Resizable(System.Boolean)">
            <summary>
            True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ResizeHandles(System.String)">
            <summary>
            A valid Ext.Resizable handles config string (defaults to 'all'). Only applies when resizable = true.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.InitCenter(System.Boolean)">
            <summary>
            Centers this window in the viewport when the window is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AlignTo(System.String,System.String)">
            <summary>
            Aligns the window to the specified element
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AlignTo(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Aligns the window to the specified element
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AnchorTo(System.String,System.String)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AnchorTo(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.AnchorTo(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Anchors this window to another element and realigns it when the window is resized or scrolled.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Center">
            <summary>
            Centers this window in the viewport
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Close">
            <summary>
            Closes the window, removes it from the DOM and destroys the window object. The beforeclose event is fired before the close happens and will cancel the close action if it returns false.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Focus">
            <summary>
            Focuses the window. If a defaultButton is set, it will receive focus, otherwise the window itself will receive focus.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide(System.Web.UI.Control)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide(System.Web.UI.Control,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide(System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide(System.String,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Hide(System.String,System.String,System.String)">
            <summary>
            Hides the window, setting it to invisible and applying negative offsets.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Maximize">
            <summary>
            Fits the window within its current container and automatically replaces the 'maximize' tool button with the 'restore' tool button.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Minimize">
            <summary>
            Placeholder method for minimizing the window. By default, this method simply fires the minimize event since the behavior of minimizing a window is application-specific. To implement custom minimize behavior, either the minimize event can be handled or this method can be overridden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Restore">
            <summary>
            Restores a maximized window back to its original size and position prior to being maximized and also replaces the 'restore' tool button with the 'maximize' tool button.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.SetActive(System.Boolean)">
            <summary>
            Makes this the active window by showing its shadow, or deactivates it by hiding its shadow. This method also fires the activate or deactivate event depending on which action occurred.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.SetAnimateTarget(System.String)">
            <summary>
            Sets the target element from which the window should animate while opening.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.SetAnimateTarget(System.Web.UI.Control)">
            <summary>
            Sets the target element from which the window should animate while opening.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show(System.Web.UI.Control)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show(System.Web.UI.Control,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show(System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show(System.String,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.Show(System.String,System.String,System.String)">
            <summary>
            Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ToBack">
            <summary>
            Sends this window to the back of (lower z-index than) any other visible windows
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ToFront">
            <summary>
            Brings this window to the front of any other visible windows
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ToggleMaximize">
            <summary>
            A shortcut method for toggling between maximize and restore based on the current maximized state of the window.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ShowModal">
            <summary>
            Shows the Window in a Modal state.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.HideModal">
            <summary>
            Shows the Window in a non-Modal state.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ToggleModal">
            <summary>
            Toggle the Modal state of the Window. Shows or Hides the body mask.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowBase.Builder`2.ToggleModal(System.Boolean)">
            <summary>
            Toggle the Modal state of the Window. Shows or Hides the body mask.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.AutoWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.AnimateTarget">
            <summary>
            Id or element from which the window should animate while opening (defaults to null with no animation).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Closable">
            <summary>
            True to display the 'close' tool button and allow the user to close the window, false to hide the button and disallow closing the window (default to true).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.CloseAction">
            <summary>
            The action to take when the close button is clicked. The default action is 'close' which will actually remove the window from the DOM and destroy it. The other valid option is 'hide' which will simply hide the window by setting visibility to hidden and applying negative offsets, keeping the window available to be redisplayed via the show method.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Constrain">
            <summary>
            True to constrain the window to the viewport, false to allow it to fall outside of the viewport (defaults to false). Optionally the header only can be constrained using ConstrainHeader.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.ConstrainHeader">
            <summary>
            True to constrain the window header to the viewport, allowing the window body to fall outside of the viewport, false to allow the header to fall outside the viewport (defaults to false). Optionally the entire window can be constrained using constrain.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.DefaultButton">
            <summary>
            The id of a button to focus when this window received the focus.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.DefaultRenderTo">
            <summary>
            The default render to Element (Body or Form). Using when AutoRender='false'
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Draggable">
            <summary>
            True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true). Note that by default the window will be centered in the viewport, so if dragging is disabled the window may need to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.ExpandOnShow">
            <summary>
            True to always expand the window when it is displayed, false to keep it in its current state (which may be collapsed) when displayed (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Maximizable">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.MinHeight">
            <summary>
            The minimum height in pixels allowed for this window (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.MinWidth">
            <summary>
            The minimum width in pixels allowed for this window (defaults to 200). Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Minimizable">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Modal">
            <summary>
            True to make the window modal and mask everything behind it when displayed, false to display it without restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.OnEsc">
            <summary>
            Allows override of the built-in processing for the escape key. Default action is to close the Window (performing whatever action is specified in closeAction. To prevent the Window closing when the escape key is pressed, specify this as Ext.emptyFn (See Ext.emptyFn).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Plain">
            <summary>
            True to render the window body with a transparent background so that it will blend into the framing elements, false to add a lighter background color to visually highlight the body element and separate it more distinctly from the surrounding frame (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.Resizable">
            <summary>
            True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.ResizeHandles">
            <summary>
            A valid Ext.Resizable handles config string (defaults to 'all'). Only applies when resizable = true.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowBase.Config.InitCenter">
            <summary>
            Centers this window in the viewport when the window is initialized.
            </summary>
        </member>
        <member name="P:Ext.Net.Window.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Window.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Window.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Window.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.ClientConfig.GetClientConfigAttribute(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ClientConfig.IsNullEmptyOrDefault(System.Object@,System.Object@)">
            <summary>
            
            </summary>
            <param name="defaultValue"></param>
            <param name="originalValue"></param>
            <returns></returns>
        </member>
        <member name="T:Ext.Net.Margins">
            <summary>
            An object containing margins to apply to the region when in the expanded state.
            </summary>
        </member>
        <member name="P:Ext.Net.Margins.IsDefault">
            <summary>
            Does this object currently represent it's default state.
            </summary>
        </member>
        <member name="T:Ext.Net.ISODateTimeJsonConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:Ext.Net.ISODateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ext.Net.ISODateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Ext.Net.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Ext.Net.ISODateTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Ext.Net.ISODateTimeJsonConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="T:Ext.Net.Toolbar">
            <summary>
            Basic Toolbar class. Toolbar elements can be created explicitly via their constructors, or implicitly via their xtypes. Some items also have shortcut strings for creation.
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarBase.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarBase.Flat">
            <summary>
            True to use flat style.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarBase.ClassicButtonStyle">
            <summary>
            True to use classic (none-flat) style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.ToolbarBase.EnableOverflow" -->
        <member name="P:Ext.Net.ToolbarBase.Config.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarBase.Config.Flat">
            <summary>
            True to use flat style.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarBase.Config.ClassicButtonStyle">
            <summary>
            True to use classic (none-flat) style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.ToolbarBase.Config.EnableOverflow" -->
        <member name="M:Ext.Net.ToolbarBase.Builder`2.DefaultType(System.String)">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarBase.Builder`2.Flat(System.Boolean)">
            <summary>
            True to use flat style.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarBase.Builder`2.ClassicButtonStyle(System.Boolean)">
            <summary>
            True to use classic (none-flat) style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Net.ToolbarBase.Builder`2.EnableOverflow(System.Boolean)" -->
        <member name="P:Ext.Net.Toolbar.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Toolbar.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Toolbar.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Toolbar.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.PageProxy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.DataProxy">
            <summary>
            This class is an abstract base class for implementations which provide retrieval of unformatted data objects.
            </summary>
        </member>
        <member name="M:Ext.Net.StateManagedItem.Builder`2.ToComponent">
            <summary>
            Get the instance of the underlying StateManagedItem.
            </summary>
            <returns>Control</returns>
        </member>
        <member name="P:Ext.Net.DataProxy.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxy.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxy.RestAPI">
            <summary>
            Specific urls to call on REST action methods "read", "create", "update" and "destroy".
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxy.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxy.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.PageProxy.Total">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PageProxy.Config.Total">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.PageProxy.Builder.Total(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.MenuItem">
            <summary>
            A base class for all menu items that require menu-related functionality (like sub-menus) and are not static display items. Item extends the base functionality of Ext.menu.BaseItem by adding menu-specific activation and click handling.
            </summary>
        </member>
        <member name="T:Ext.Net.MenuItemBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.BaseMenuItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.ActiveClass">
            <summary>
            The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\").
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.CanActivate">
            <summary>
            True if this item can be visually activated (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Handler">
            <summary>
            A function that will handle the click event of this menu item (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Scope">
            <summary>
            The scope (this reference) in which the handler function will be called.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.HideDelay">
            <summary>
            Length of time in milliseconds to wait before hiding after a click (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.BaseMenuItem.Builder`2.ActiveClass(System.String)">
            <summary>
            The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\").
            </summary>
        </member>
        <member name="M:Ext.Net.BaseMenuItem.Builder`2.CanActivate(System.Boolean)">
            <summary>
            True if this item can be visually activated (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.BaseMenuItem.Builder`2.Handler(System.String)">
            <summary>
            A function that will handle the click event of this menu item (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.BaseMenuItem.Builder`2.Scope(System.String)">
            <summary>
            The scope (this reference) in which the handler function will be called.
            </summary>
        </member>
        <member name="M:Ext.Net.BaseMenuItem.Builder`2.HideDelay(System.Int32)">
            <summary>
            Length of time in milliseconds to wait before hiding after a click (defaults to 100).
            </summary>
        </member>
        <member name="M:Ext.Net.BaseMenuItem.Builder`2.HideOnClick(System.Boolean)">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Config.ActiveClass">
            <summary>
            The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\").
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Config.CanActivate">
            <summary>
            True if this item can be visually activated (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Config.Handler">
            <summary>
            A function that will handle the click event of this menu item (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Config.Scope">
            <summary>
            The scope (this reference) in which the handler function will be called.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Config.HideDelay">
            <summary>
            Length of time in milliseconds to wait before hiding after a click (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItem.Config.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.PostBackUrl">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ext.Net.MenuItemBase.Click">
            <summary>
            Fires when the button has been clicked
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.MenuItemBase.OnClientClick" -->
        <member name="P:Ext.Net.MenuItemBase.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when button clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.CanActivate">
            <summary>
            True if this item can be visually activated (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Href">
            <summary>
            The href attribute to use for the underlying anchor link (defaults to '#').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.HrefTarget">
            <summary>
            The target attribute to use for the underlying anchor link (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.IconUrl">
            <summary>
            The path to an icon to display in this item (defaults to Ext.BLANK_IMAGE_URL). If icon is specified iconCls should not be.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.IconCls">
            <summary>
            A CSS class that specifies a background image that will be used as the icon for this item (defaults to ''). If iconCls is specified icon should not be.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.ItemCls">
            <summary>
            The default CSS class to use for menu items (defaults to 'x-menu-item')
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.ShowDelay">
            <summary>
            Length of time in milliseconds to wait before showing this item (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Text">
            <summary>
            The text to display in this item (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Icon">
            <summary>
            The icon to use in the Title bar. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.PostBackUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Net.MenuItemBase.Builder`2.OnClientClick(System.String)" -->
        <member name="M:Ext.Net.MenuItemBase.Builder`2.AutoPostBack(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when button clicked.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.CanActivate(System.Boolean)">
            <summary>
            True if this item can be visually activated (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.Href(System.String)">
            <summary>
            The href attribute to use for the underlying anchor link (defaults to '#').
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.HrefTarget(System.String)">
            <summary>
            The target attribute to use for the underlying anchor link (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.IconUrl(System.String)">
            <summary>
            The path to an icon to display in this item (defaults to Ext.BLANK_IMAGE_URL). If icon is specified iconCls should not be.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.IconCls(System.String)">
            <summary>
            A CSS class that specifies a background image that will be used as the icon for this item (defaults to ''). If iconCls is specified icon should not be.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.ItemCls(System.String)">
            <summary>
            The default CSS class to use for menu items (defaults to 'x-menu-item')
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.ShowDelay(System.Int32)">
            <summary>
            Length of time in milliseconds to wait before showing this item (defaults to 200)
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.Text(System.String)">
            <summary>
            The text to display in this item (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.MenuItemBase.Builder`2.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the Title bar. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.PostBackUrl">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.MenuItemBase.Config.OnClientClick" -->
        <member name="P:Ext.Net.MenuItemBase.Config.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when button clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.CanActivate">
            <summary>
            True if this item can be visually activated (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.Href">
            <summary>
            The href attribute to use for the underlying anchor link (defaults to '#').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.HrefTarget">
            <summary>
            The target attribute to use for the underlying anchor link (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.IconUrl">
            <summary>
            The path to an icon to display in this item (defaults to Ext.BLANK_IMAGE_URL). If icon is specified iconCls should not be.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.IconCls">
            <summary>
            A CSS class that specifies a background image that will be used as the icon for this item (defaults to ''). If iconCls is specified icon should not be.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.ItemCls">
            <summary>
            The default CSS class to use for menu items (defaults to 'x-menu-item')
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.ShowDelay">
            <summary>
            Length of time in milliseconds to wait before showing this item (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.Text">
            <summary>
            The text to display in this item (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.Menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItemBase.Config.Icon">
            <summary>
            The icon to use in the Title bar. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItem.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItem.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItem.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuItem.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.CheckMenuItem">
            <summary>
            Adds a menu item that contains a checkbox by default, but can also be part of a radio group.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.SetChecked(System.Boolean,System.Boolean)">
            <summary>
            Set the checked state of this item.
            </summary>
            <param name="value"></param>
            <param name="suppressEvent"></param>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.SetChecked(System.Boolean)">
            <summary>
            Set the checked state of this item.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Checked">
            <summary>
            True to initialize this checkbox as checked (defaults to false). Note that if this checkbox is part of a radio group (group = true) only the last item in the group that is initialized with checked = true will be rendered as checked.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Group">
            <summary>
            All check items with the same group name will automatically be grouped into a single-select radio button group (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.GroupClass">
            <summary>
            The default CSS class to use for radio group check items (defaults to \"x-menu-group-item\")
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.CheckHandler">
            <summary>
            A function that handles the checkchange event.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Config.Checked">
            <summary>
            True to initialize this checkbox as checked (defaults to false). Note that if this checkbox is part of a radio group (group = true) only the last item in the group that is initialized with checked = true will be rendered as checked.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Config.Group">
            <summary>
            All check items with the same group name will automatically be grouped into a single-select radio button group (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Config.GroupClass">
            <summary>
            The default CSS class to use for radio group check items (defaults to \"x-menu-group-item\")
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Config.CheckHandler">
            <summary>
            A function that handles the checkchange event.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItem.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.Builder.Checked(System.Boolean)">
            <summary>
            True to initialize this checkbox as checked (defaults to false). Note that if this checkbox is part of a radio group (group = true) only the last item in the group that is initialized with checked = true will be rendered as checked.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.Builder.Group(System.String)">
            <summary>
            All check items with the same group name will automatically be grouped into a single-select radio button group (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.Builder.GroupClass(System.String)">
            <summary>
            The default CSS class to use for radio group check items (defaults to \"x-menu-group-item\")
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.Builder.CheckHandler(System.String)">
            <summary>
            A function that handles the checkchange event.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.Builder.SetChecked(System.Boolean,System.Boolean)">
            <summary>
            Set the checked state of this item.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckMenuItem.Builder.SetChecked(System.Boolean)">
            <summary>
            Set the checked state of this item.
            </summary>
        </member>
        <member name="T:Ext.Net.MultiSelectBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Ext.Net.Field">
            <summary>
            Base Class for Form Fields that provides default event handling, sizing, value handling and other functionality.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Clear">
            <summary>
            Clears the Field value.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.ClearInvalid">
            <summary>
            Clear any invalid styles/messages for this field
            </summary>
        </member>
        <member name="M:Ext.Net.Field.MarkInvalid">
            <summary>
            Mark this field as invalid, using msgTarget to determine how to display the error and applying invalidClass to the field's element.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.MarkInvalid(System.String)">
            <summary>
            Mark this field as invalid, using msgTarget to determine how to display the error and applying invalidClass to the field's element.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages
            </summary>
        </member>
        <member name="M:Ext.Net.Field.SetRawValue(System.Object)">
            <summary>
            Sets the underlying DOM field's value directly, bypassing validation. To set the value with validation see setValue.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.SetReadOnly(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.SetNoteCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.SetNote(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.SetNote(System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.ShowNote">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.HideNote">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.RaisePostDataChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Field.RaisePostBackEvent(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Field.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ContainerStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Field.UniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Field.AutoPostBack">
            <summary>
            TextBox_AutoPostBack
            </summary>
        </member>
        <member name="P:Ext.Net.Field.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Name">
            <summary>
            The field's HTML name attribute (defaults to ''). Note: this property must be set if this field is to be automatically included with form submit().
            </summary>
        </member>
        <member name="P:Ext.Net.Field.AutoCreate">
            <summary>
            A DomHelper element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.FieldClass">
            <summary>
            The default CSS class for the field (defaults to 'x-form-field').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.FocusClass">
            <summary>
            The CSS class to use when the field receives focus (defaults to 'x-form-focus').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.HideWithLabel">
            <summary>
            True to hide the label when the field hide
            </summary>
        </member>
        <member name="P:Ext.Net.Field.InvalidClass">
            <summary>
            The CSS class to use when marking a field invalid (defaults to 'x-form-invalid').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.InvalidText">
            <summary>
            The error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.MsgFx">
            <summary>
            EXPERIMENTAL The effect used when displaying a validation message under the field (defaults to 'normal').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.MsgTarget">
            <summary>
            The location where error text should display. (defaults to 'Qtip').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ReadOnly">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.PreventMark">
            <summary>
            True to disable marking the field invalid
            </summary>
        </member>
        <member name="P:Ext.Net.Field.TabIndex">
            NOTE: [2009-11-30] [geoff] Might be a conflict with @TabIndex property and short type. Can not change/override member type. 
            <summary>
            The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ValidateOnBlur">
            <summary>
            Whether the field should validate when it loses focus (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ValidateDelay">
            <summary>
            The length of time in milliseconds after user input begins until validation is initiated (defaults to 250).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ValidationEvent">
            <summary>
            The event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.ValidateOnEvent">
            <summary>
            Set to false to disable automatic validation
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Note">
            <summary>
            The note.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.NoteCls">
            <summary>
            The note css class.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.NoteAlign">
            <summary>
            Note align
            </summary>
        </member>
        <member name="P:Ext.Net.Field.NoteEncode">
            <summary>
            True to encode note text
            </summary>
        </member>
        <member name="P:Ext.Net.Field.SubmitValue">
            <summary>
            False to clear the name attribute on the field so that it is not submitted during a form post. If a hiddenName is specified, setting this to true will cause both the hidden field and the element to be submitted. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Value">
            <summary>
            A value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.IsNull">
            <summary>
            Gets a value indicating whether the Value is equal to NullValue.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.AutoPostBack(System.Boolean)">
            <summary>
            TextBox_AutoPostBack
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.DataIndex(System.String)">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.Name(System.String)">
            <summary>
            The field's HTML name attribute (defaults to ''). Note: this property must be set if this field is to be automatically included with form submit().
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.AutoCreate(System.String)">
            <summary>
            A DomHelper element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}).
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.FieldClass(System.String)">
            <summary>
            The default CSS class for the field (defaults to 'x-form-field').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.FocusClass(System.String)">
            <summary>
            The CSS class to use when the field receives focus (defaults to 'x-form-focus').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.HideWithLabel(System.Boolean)">
            <summary>
            True to hide the label when the field hide
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.InvalidClass(System.String)">
            <summary>
            The CSS class to use when marking a field invalid (defaults to 'x-form-invalid').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.InvalidText(System.String)">
            <summary>
            The error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.MsgFx(System.String)">
            <summary>
            EXPERIMENTAL The effect used when displaying a validation message under the field (defaults to 'normal').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.MsgTarget(Ext.Net.MessageTarget)">
            <summary>
            The location where error text should display. (defaults to 'Qtip').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ReadOnly(System.Boolean)">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.PreventMark(System.Boolean)">
            <summary>
            True to disable marking the field invalid
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.TabIndex(System.Int16)">
            <summary>
            The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ValidateOnBlur(System.Boolean)">
            <summary>
            Whether the field should validate when it loses focus (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ValidateDelay(System.Int32)">
            <summary>
            The length of time in milliseconds after user input begins until validation is initiated (defaults to 250).
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ValidationEvent(System.String)">
            <summary>
            The event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup').
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ValidateOnEvent(System.Boolean)">
            <summary>
            Set to false to disable automatic validation
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.Note(System.String)">
            <summary>
            The note.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.NoteCls(System.String)">
            <summary>
            The note css class.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.NoteAlign(Ext.Net.NoteAlign)">
            <summary>
            Note align
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.NoteEncode(System.Boolean)">
            <summary>
            True to encode note text
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.SubmitValue(System.Boolean)">
            <summary>
            False to clear the name attribute on the field so that it is not submitted during a form post. If a hiddenName is specified, setting this to true will cause both the hidden field and the element to be submitted. Defaults to undefined.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.Value(System.Object)">
            <summary>
            A value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.NullValue(System.Object)">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.Clear">
            <summary>
            Clears the Field value.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.ClearInvalid">
            <summary>
            Clear any invalid styles/messages for this field
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.MarkInvalid">
            <summary>
            Mark this field as invalid, using msgTarget to determine how to display the error and applying invalidClass to the field's element.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.MarkInvalid(System.String)">
            <summary>
            Mark this field as invalid, using msgTarget to determine how to display the error and applying invalidClass to the field's element.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.Reset">
            <summary>
            Resets the current field value to the originally loaded value and clears any validation messages
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.SetRawValue(System.Object)">
            <summary>
            Sets the underlying DOM field's value directly, bypassing validation. To set the value with validation see setValue.
            </summary>
        </member>
        <member name="M:Ext.Net.Field.Builder`2.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.AutoPostBack">
            <summary>
            TextBox_AutoPostBack
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.Name">
            <summary>
            The field's HTML name attribute (defaults to ''). Note: this property must be set if this field is to be automatically included with form submit().
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.AutoCreate">
            <summary>
            A DomHelper element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.FieldClass">
            <summary>
            The default CSS class for the field (defaults to 'x-form-field').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.FocusClass">
            <summary>
            The CSS class to use when the field receives focus (defaults to 'x-form-focus').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.HideWithLabel">
            <summary>
            True to hide the label when the field hide
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.InvalidClass">
            <summary>
            The CSS class to use when marking a field invalid (defaults to 'x-form-invalid').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.InvalidText">
            <summary>
            The error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.MsgFx">
            <summary>
            EXPERIMENTAL The effect used when displaying a validation message under the field (defaults to 'normal').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.MsgTarget">
            <summary>
            The location where error text should display. (defaults to 'Qtip').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.ReadOnly">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.PreventMark">
            <summary>
            True to disable marking the field invalid
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.TabIndex">
            <summary>
            The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.ValidateOnBlur">
            <summary>
            Whether the field should validate when it loses focus (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.ValidateDelay">
            <summary>
            The length of time in milliseconds after user input begins until validation is initiated (defaults to 250).
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.ValidationEvent">
            <summary>
            The event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup').
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.ValidateOnEvent">
            <summary>
            Set to false to disable automatic validation
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.Note">
            <summary>
            The note.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.NoteCls">
            <summary>
            The note css class.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.NoteAlign">
            <summary>
            Note align
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.NoteEncode">
            <summary>
            True to encode note text
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.SubmitValue">
            <summary>
            False to clear the name attribute on the field so that it is not submitted during a form post. If a hiddenName is specified, setting this to true will cause both the hidden field and the element to be submitted. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.Value">
            <summary>
            A value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.Field.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.UpdateSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Store">
            <summary>
             The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.SelectedItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.DisplayField">
            <summary>
            The underlying data field name to bind to this MultiSelect.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.ValueField">
            <summary>
            The underlying data value name to bind to this MultiSelect.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.AllowBlank">
            <summary>
            False to validate that the value length > 0 (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.MaxLength">
            <summary>
            Maximum input field length allowed (defaults to Number.MAX_VALUE).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.MinLength">
            <summary>
            Minimum input field length required (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.MaxLengthText">
            <summary>
            Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.MinLengthText">
            <summary>
            Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.BlankText">
            <summary>
            Error text to display if the allow blank validation fails (defaults to 'This field is required').
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Copy">
            <summary>
            Causes drag operations to copy nodes rather than move (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.AllowDuplicates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.AllowTrash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Legend">
            <summary>
            The title text to display in the panel header (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Delimiter">
            <summary>
            The string used to delimit between items when set or returned as a string of values
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.DragGroup">
            <summary>
            The ddgroup name(s) for the View's DragZone (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.DropGroup">
            <summary>
            The ddgroup name(s) for the View's DropZone (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.AppendOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.SortField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.SubmitText">
            <summary>
            True to submit text of selected items
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.FireSelectOnLoad">
            <summary>
            Set init selecetion without event fires
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.MultiSelect">
            <summary>
            True to allow multi selection (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.KeepSelectionOnClick">
            <summary>
            Selection mode
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.BodyStyle">
            <summary>
            Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.BottomBar">
            <summary>
            The bottom toolbar of the panel.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.TopBar">
            <summary>
            The top toolbar of the panel.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.StoreID(System.String)">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.DisplayField(System.String)">
            <summary>
            The underlying data field name to bind to this MultiSelect.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.ValueField(System.String)">
            <summary>
            The underlying data value name to bind to this MultiSelect.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.AllowBlank(System.Boolean)">
            <summary>
            False to validate that the value length > 0 (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.MaxLength(System.Int32)">
            <summary>
            Maximum input field length allowed (defaults to Number.MAX_VALUE).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.MinLength(System.Int32)">
            <summary>
            Minimum input field length required (defaults to 0).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.MaxLengthText(System.String)">
            <summary>
            Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.MinLengthText(System.String)">
            <summary>
            Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.BlankText(System.String)">
            <summary>
            Error text to display if the allow blank validation fails (defaults to 'This field is required').
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.Copy(System.Boolean)">
            <summary>
            Causes drag operations to copy nodes rather than move (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.AllowDuplicates(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.AllowTrash(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.Legend(System.String)">
            <summary>
            The title text to display in the panel header (defaults to '')
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.Delimiter(System.String)">
            <summary>
            The string used to delimit between items when set or returned as a string of values
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.DragGroup(System.String)">
            <summary>
            The ddgroup name(s) for the View's DragZone (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.DropGroup(System.String)">
            <summary>
            The ddgroup name(s) for the View's DropZone (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.AppendOnly(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.SortField(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.Direction(Ext.Net.SortDirection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.SubmitText(System.Boolean)">
            <summary>
            True to submit text of selected items
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.FireSelectOnLoad(System.Boolean)">
            <summary>
            Set init selecetion without event fires
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.MultiSelect(System.Boolean)">
            <summary>
            True to allow multi selection (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.KeepSelectionOnClick(Ext.Net.KeepSelectionMode)">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.BodyStyle(System.String)">
            <summary>
            Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectBase`1.Builder`2.UpdateSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.Store">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.SelectedItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.DisplayField">
            <summary>
            The underlying data field name to bind to this MultiSelect.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.ValueField">
            <summary>
            The underlying data value name to bind to this MultiSelect.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.AllowBlank">
            <summary>
            False to validate that the value length > 0 (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.MaxLength">
            <summary>
            Maximum input field length allowed (defaults to Number.MAX_VALUE).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.MinLength">
            <summary>
            Minimum input field length required (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.MaxLengthText">
            <summary>
            Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.MinLengthText">
            <summary>
            Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.BlankText">
            <summary>
            Error text to display if the allow blank validation fails (defaults to 'This field is required').
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.Copy">
            <summary>
            Causes drag operations to copy nodes rather than move (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.AllowDuplicates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.AllowTrash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.Legend">
            <summary>
            The title text to display in the panel header (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.Delimiter">
            <summary>
            The string used to delimit between items when set or returned as a string of values
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.DragGroup">
            <summary>
            The ddgroup name(s) for the View's DragZone (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.DropGroup">
            <summary>
            The ddgroup name(s) for the View's DropZone (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.AppendOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.SortField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.SubmitText">
            <summary>
            True to submit text of selected items
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.FireSelectOnLoad">
            <summary>
            Set init selecetion without event fires
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.MultiSelect">
            <summary>
            True to allow multi selection (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.KeepSelectionOnClick">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.BodyStyle">
            <summary>
            Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.BottomBar">
            <summary>
            The bottom toolbar of the panel.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectBase`1.Config.TopBar">
            <summary>
            The top toolbar of the panel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeLoaderBase.UIProviders">
            <summary>
            An object containing properties which specify custom Ext.tree.TreeNodeUI implementations. If the optional uiProvider attribute of a returned child node is a string rather than a reference to a TreeNodeUI implementation, then that string value is used as a property name in the uiProviders object.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Added">
            <summary>
            Fires when a component is added to an Ext.Container
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.AfterRender">
            <summary>
            Fires after the component rendering is finished. The afterrender event is fired after this Component has been rendered, been postprocesed by any afterRender method defined for the Component, and, if stateful, after state has been restored.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.BeforeDestroy">
            <summary>
            Fires before the component is destroyed. Return false to stop the destroy.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.BeforeHide">
            <summary>
            Fires before the component is hidden. Return false to stop the hide.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.BeforeRender">
            <summary>
            Fires before the component is rendered. Return false to stop the render.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.BeforeShow">
            <summary>
            Fires before the component is shown. Return false to stop the show.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.BeforeStateRestore">
            <summary>
            Fires before the state of the component is restored. Return false to stop the restore.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.BeforeStateSave">
            <summary>
            Fires before the state of the component is saved to the configured state provider. Return false to stop the save.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Destroy">
            <summary>
            Fires after the component is destroyed.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Disable">
            <summary>
            Fires after the component is disabled.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Enable">
            <summary>
            Fires after the component is enabled.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Hide">
            <summary>
            Fires after the component is hidden.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Render">
            <summary>
            Fires after the component is rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Removed">
            <summary>
            Fires after the component is rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.Show">
            <summary>
            Fires after the component is shown.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.StateRestore">
            <summary>
            Fires after the state of the component is restored.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseDirectEvents.StateSave">
            <summary>
            Fires after the state of the component is saved to the configured state provider.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentDirectEvents.Move">
            <summary>
            Fires after the component is resized.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentDirectEvents.Resize">
            <summary>
            Fires after the component is resized.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldDirectEvents.Blur">
            <summary>
            Fires when this field loses input focus.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldDirectEvents.Change">
            <summary>
            Fires just before the field blurs if the field value has changed.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldDirectEvents.Focus">
            <summary>
            Fires when this field receives input focus.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldDirectEvents.Invalid">
            <summary>
            Fires after the field has been marked as invalid.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldDirectEvents.SpecialKey">
            <summary>
            Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldDirectEvents.Valid">
            <summary>
            Fires after the field has been validated with no errors.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldDirectEvents.AutoSize">
            <summary>
            Fires when the autosize function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldDirectEvents.KeyDown">
            <summary>
            Keydown input field event. This event only fires if enableKeyEvents is set to true.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldDirectEvents.KeyPress">
            <summary>
            Keypress input field event. This event only fires if enableKeyEvents is set to true.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldDirectEvents.KeyUp">
            <summary>
            Keyup input field event. This event only fires if enableKeyEvents is set to true.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldDirectEvents.IconClick">
            <summary>
            Icon click event
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Added">
            <summary>
            Fires when a component is added to an Ext.Container
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.AfterRender">
            <summary>
            Fires after the component rendering is finished. The afterrender event is fired after this Component has been rendered, been postprocesed by any afterRender method defined for the Component, and, if stateful, after state has been restored.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.BeforeDestroy">
            <summary>
            Fires before the component is destroyed. Return false to stop the destroy.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.BeforeHide">
            <summary>
            Fires before the component is hidden. Return false to stop the hide.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.BeforeRender">
            <summary>
            Fires before the component is rendered. Return false to stop the render.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.BeforeShow">
            <summary>
            Fires before the component is shown. Return false to stop the show.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.BeforeStateRestore">
            <summary>
            Fires before the state of the component is restored. Return false to stop the restore.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.BeforeStateSave">
            <summary>
            Fires before the state of the component is saved to the configured state provider. Return false to stop the save.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Destroy">
            <summary>
            Fires after the component is destroyed.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Disable">
            <summary>
            Fires after the component is disabled.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Enable">
            <summary>
            Fires after the component is enabled.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Hide">
            <summary>
            Fires after the component is hidden.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Render">
            <summary>
            Fires after the component is rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Removed">
            <summary>
            Fires when a component is removed from an Ext.Container
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.Show">
            <summary>
            Fires after the component is shown.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.StateRestore">
            <summary>
            Fires after the state of the component is restored.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentBaseListeners.StateSave">
            <summary>
            Fires after the state of the component is saved to the configured state provider.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentListeners.Move">
            <summary>
            Fires after the component is resized.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponentListeners.Resize">
            <summary>
            Fires after the component is resized.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerListeners.Add">
            <summary>
            Fires after any Component is added or inserted into the content Container.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerListeners.AfterLayout">
            <summary>
            Fires when the components in this content Container are arranged by the associated layout manager.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerListeners.BeforeAdd">
            <summary>
            Fires before any Component is added or inserted into the content Container. A handler can return false to cancel the add.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerListeners.BeforeRemove">
            <summary>
            Fires before any Component is removed from the content Container. A handler can return false to cancel the remove.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerListeners.Remove">
            <summary>
            Fires after any Component is removed from the content Container.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelListeners.BeforeTabChange">
            <summary>
            Fires before the active tab changes. Handlers can return false to cancel the tab change.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelListeners.ContextMenu">
            <summary>
            Fires when the original browser contextmenu event originated from a tab element.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelListeners.TabChange">
            <summary>
            Fires after the active tab has changed.
            </summary>
        </member>
        <member name="T:Ext.Net.TabCloseMenu">
            <summary>
            Very simple plugin for adding a close context menu to tabs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Net.Plugin" -->
        <member name="T:Ext.Net.LazyObservable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseTabText">
            <summary>
            Text to display in ContextMenu for menu option to close current Tab.
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseOtherTabsText">
            <summary>
            Text to display in ContextMenu for menu option to close other Tabs.
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseAllTabsText">
            <summary>
            The text for closing all tabs. Defaults to 'Close All Tabs'.
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.ShowCloseAll">
            <summary>
            Indicates whether to show the 'Close All' option. Defaults to true. 
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseTabIcon">
            <summary>
            The icon to use for the CloseTab menu item. See also, CloseTabIconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseTabIconCls">
            <summary>
            A CSS class that will provide a background image to be used as the icon to use for the CloseTab menu item (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseOtherTabsIcon">
            <summary>
            The icon to use for the CloseOtherTabs menu item. See also, CloseOtherTabsIconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseOtherTabsIconCls">
            <summary>
            A CSS class that will provide a background image to be used as the icon to use for the CloseOtherTabs menu item (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseAllTabsIcon">
            <summary>
            The icon to use for the CloseAllTabs menu item. See also, CloseAllTabsIconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TabCloseMenu.CloseAllTabsIconCls">
            <summary>
            A CSS class that will provide a background image to be used as the icon to use for the CloseAllTabs menu item (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.SliderDirectEvents.BeforeChange">
            <summary>
            Fires before the slider value is changed. By returning false from an event handler, you can cancel the event and prevent the slider from changing.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderDirectEvents.Change">
            <summary>
            Fires when the slider value is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderDirectEvents.ChangeComplete">
            <summary>
            Fires when the slider value is changed by the user and any drag operations have completed.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderDirectEvents.Drag">
            <summary>
            Fires continuously during the drag operation while the mouse is moving.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderDirectEvents.DragEnd">
            <summary>
            Fires after the drag operation has completed.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderDirectEvents.DragStart">
            <summary>
            Fires after a drag operation has started.
            </summary>
        </member>
        <member name="T:Ext.Net.Puff">
            <summary>
            Fades the element out while slowly expanding it in all directions. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. 
            </summary>
        </member>
        <member name="P:Ext.Net.Fx.Options">
            <summary>
            Fx config object
            </summary>
        </member>
        <member name="T:Ext.Net.PagingToolbar">
            <summary>
            A specialized toolbar that is bound to a Ext.data.Store and provides automatic paging controls.
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.SetPageIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.PagingToolbar.SetPageSize(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:Ext.Net.PagingToolbar.PageIndex">
            <summary>
            The index of current page.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.DisplayInfo">
            <summary>
            True to display the displayMsg (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.DisplayMsg">
            <summary>
            The paging status message to display (defaults to 'Displaying {0} - {1} of {2}'). Note that this string is formatted using the braced numbers 0-2 as tokens that are replaced by the values for start, end and total respectively. These tokens should be preserved when overriding this string if showing those values is desired.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.EmptyMsg">
            <summary>
            The message to display when no records are found (defaults to 'No data to display').
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.PageSize">
            <summary>
            The number of records to display per page (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.AfterPageText">
            <summary>
            Customizable piece of the default paging text (defaults to 'of {0}'). Note that this string is formatted using {0} as a token that is replaced by the number of total pages. This token should be preserved when overriding this string if showing the total page count is desired.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.BeforePageText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.FirstText">
            <summary>
            Customizable piece of the default paging text (defaults to 'First Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.LastText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Last Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.NextText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Next Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.PrevText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Previous Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.RefreshText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Refresh')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.HideRefresh">
            <summary>
            Hide refresh button
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.ParamNames">
            <summary>
            Object mapping of parameter names for load calls (defaults to {start: 'start', limit: 'limit'})
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.PageIndex(System.Int32)">
            <summary>
            The index of current page.
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.DisplayInfo(System.Boolean)">
            <summary>
            True to display the displayMsg (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.DisplayMsg(System.String)">
            <summary>
            The paging status message to display (defaults to 'Displaying {0} - {1} of {2}'). Note that this string is formatted using the braced numbers 0-2 as tokens that are replaced by the values for start, end and total respectively. These tokens should be preserved when overriding this string if showing those values is desired.
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.EmptyMsg(System.String)">
            <summary>
            The message to display when no records are found (defaults to 'No data to display').
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.PageSize(System.Int32)">
            <summary>
            The number of records to display per page (defaults to 20).
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.StoreID(System.String)">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.AfterPageText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'of {0}'). Note that this string is formatted using {0} as a token that is replaced by the number of total pages. This token should be preserved when overriding this string if showing the total page count is desired.
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.BeforePageText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'Page')
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.FirstText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'First Page')
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.LastText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'Last Page')
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.NextText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'Next Page')
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.PrevText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'Previous Page')
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.RefreshText(System.String)">
            <summary>
            Customizable piece of the default paging text (defaults to 'Refresh')
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.HideRefresh(System.Boolean)">
            <summary>
            Hide refresh button
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.SetPageIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.PagingToolbar.Builder.SetPageSize(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.PageIndex">
            <summary>
            The index of current page.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.DisplayInfo">
            <summary>
            True to display the displayMsg (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.DisplayMsg">
            <summary>
            The paging status message to display (defaults to 'Displaying {0} - {1} of {2}'). Note that this string is formatted using the braced numbers 0-2 as tokens that are replaced by the values for start, end and total respectively. These tokens should be preserved when overriding this string if showing those values is desired.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.EmptyMsg">
            <summary>
            The message to display when no records are found (defaults to 'No data to display').
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.PageSize">
            <summary>
            The number of records to display per page (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.AfterPageText">
            <summary>
            Customizable piece of the default paging text (defaults to 'of {0}'). Note that this string is formatted using {0} as a token that is replaced by the number of total pages. This token should be preserved when overriding this string if showing the total page count is desired.
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.BeforePageText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.FirstText">
            <summary>
            Customizable piece of the default paging text (defaults to 'First Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.LastText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Last Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.NextText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Next Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.PrevText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Previous Page')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.RefreshText">
            <summary>
            Customizable piece of the default paging text (defaults to 'Refresh')
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.HideRefresh">
            <summary>
            Hide refresh button
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.ParamNames">
            <summary>
            Object mapping of parameter names for load calls (defaults to {start: 'start', limit: 'limit'})
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbar.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.ListViewColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Align">
            <summary>
            Set the CSS text-align property of the column. Defaults to 'left'.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Cls">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each row for this column.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Store's Record definition from which
            to draw the column's value. If not specified, the column's index is used as an index
            into the Record's data Array.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Header">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Sortable">
            <summary>
            Specify true to enable sorting on this column (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Template">
            <summary>
            Specify a string to pass as the configuration string for Ext.XTemplate. By default an Ext.XTemplate will be implicitly created using the dataIndex.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.XTemplate">
            <summary>
            An XTemplate to use to process a Record's data to produce a column's rendered value.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Width">
            <summary>
            Percentage of the container width this column should be allocated. Columns that have no width specified will be allocated with an equal percentage to fill 100% of the container width. To easily take advantage of the full container width, leave the width of at least one column undefined. Note that if you do not want to take up the full width of the container, the width of every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.Align(Ext.Net.TextAlign)">
            <summary>
            Set the CSS text-align property of the column. Defaults to 'left'.
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.Cls(System.String)">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each row for this column.
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.DataIndex(System.String)">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array.
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.Header(System.String)">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.Sortable(System.Boolean)">
            <summary>
            Specify true to enable sorting on this column (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.Template(System.String)">
            <summary>
            Specify a string to pass as the configuration string for Ext.XTemplate. By default an Ext.XTemplate will be implicitly created using the dataIndex.
            </summary>
        </member>
        <member name="M:Ext.Net.ListViewColumn.Builder.Width(System.Double)">
            <summary>
            Percentage of the container width this column should be allocated. Columns that have no width specified will be allocated with an equal percentage to fill 100% of the container width. To easily take advantage of the full container width, leave the width of at least one column undefined. Note that if you do not want to take up the full width of the container, the width of every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.Align">
            <summary>
            Set the CSS text-align property of the column. Defaults to 'left'.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.Cls">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each row for this column.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.Header">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.Sortable">
            <summary>
            Specify true to enable sorting on this column (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.Template">
            <summary>
            Specify a string to pass as the configuration string for Ext.XTemplate. By default an Ext.XTemplate will be implicitly created using the dataIndex.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.XTemplate">
            <summary>
            An XTemplate to use to process a Record's data to produce a column's rendered value.
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewColumn.Config.Width">
            <summary>
            Percentage of the container width this column should be allocated. Columns that have no width specified will be allocated with an equal percentage to fill 100% of the container width. To easily take advantage of the full container width, leave the width of at least one column undefined. Note that if you do not want to take up the full width of the container, the width of every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerDirectEvents.Add">
            <summary>
            Fires after any Component is added or inserted into the content Container.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerDirectEvents.AfterLayout">
            <summary>
            Fires when the components in this content Container are arranged by the associated layout manager.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerDirectEvents.BeforeAdd">
            <summary>
            Fires before any Component is added or inserted into the content Container. A handler can return false to cancel the add.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerDirectEvents.BeforeRemove">
            <summary>
            Fires before any Component is removed from the content Container. A handler can return false to cancel the remove.
            </summary>
        </member>
        <member name="P:Ext.Net.ContainerDirectEvents.Remove">
            <summary>
            Fires after any Component is removed from the content Container.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.Activate">
            <summary>
            Fires after the Panel has been visually activated. Note that Panels do not directly support being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components of a TabPanel fire the activate and deactivate events under the control of the TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.BeforeClose">
            <summary>
            Fires before the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can return false to cancel the close.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.BeforeCollapse">
            <summary>
            Fires before the Panel is collapsed. A handler can return false to cancel the collapse.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.BeforeExpand">
            <summary>
            Fires before the Panel is expanded. A handler can return false to cancel the expand.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.BodyResize">
            <summary>
            Fires after the Panel has been resized.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.Close">
            <summary>
            Fires after the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like Ext.Window).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.Collapse">
            <summary>
            Fires after the Panel has been collapsed.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.Deactivate">
            <summary>
            Fires after the Panel has been visually deactivated. Note that Panels do not directly support being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components of a TabPanel fire the activate and deactivate events under the control of the TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.Expand">
            <summary>
            Fires after the Panel has been expanded.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.TitleChange">
            <summary>
            Fires after the Panel title has been set or changed.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelDirectEvents.IconChange">
            <summary>
            Fires after the Panel icon class has been set or changed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.BodyScroll">
            <summary>
            Fires when the body element is scrolled.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.CellClick">
            <summary>
            Fires when a cell is clicked. The data for the cell is drawn from the Record for this row.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.CellContextMenu">
            <summary>
            Fires when a cell is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.CellDblClick">
            <summary>
            Fires when a cell is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.CellMouseDown">
            <summary>
            Fires before a cell is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.Click">
            <summary>
            The raw click event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.ColumnMove">
            <summary>
            Fires when the user moves a column.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.ColumnResize">
            <summary>
            Fires when the user resizes a column.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.ContainerMouseDown">
            <summary>
            Fires before the container is clicked. The container consists of any part of the grid body that is not covered by a row.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.ContextMenu">
            <summary>
            The raw contextmenu event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.DblClick">
            <summary>
            The raw dblclick event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.HeaderClick">
            <summary>
            Fires when a header is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.HeaderContextMenu">
            <summary>
            Fires when a header is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.HeaderDblClick">
            <summary>
            Fires when a header cell is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.HeaderMouseDown">
            <summary>
            Fires before a header is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.KeyDown">
            <summary>
            The raw keydown event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.KeyPress">
            <summary>
            The raw keypress event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.MouseDown">
            <summary>
            The raw mousedown event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.MouseOut">
            <summary>
            The raw mouseout event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.MouseOver">
            <summary>
            The raw mouseover event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.MouseUp">
            <summary>
            The raw mouseup event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowBodyClick">
            <summary>
            Fires when the row body is clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowBodyContextMenu">
            <summary>
            Fires when the row body is right clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowBodyDblClick">
            <summary>
            Fires when the row body is double clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowBodyMouseDown">
            <summary>
            Fires before the row body is clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowClick">
            <summary>
            Fires when a row is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowContextMenu">
            <summary>
            Fires when a row is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowDblClick">
            <summary>
            Fires when a row is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.RowMouseDown">
            <summary>
            Fires before a row is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.SortChange">
            <summary>
            Fires when the grid's store sort changes.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.AfterEdit">
            <summary>
            Fires after a cell is edited.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.BeforeEdit">
            <summary>
            Fires before cell editing is triggered.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.ValidateEdit">
            <summary>
            Fires after a cell is edited, but before the value is set in the record. Return false to cancel the change.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.Command">
            <summary>
            Fires when the command is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.GroupCommand">
            <summary>
            Fires when the group command is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.GroupMouseDown">
            <summary>
            Fires before a group header is clicked. <b>Only applies for grids with a {@link Ext.grid.GroupingView GroupingView}</b>.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelDirectEvents.FilterUpdate">
            <summary>
            Fires when the grid's filter is updated.
            </summary>
        </member>
        <member name="T:Ext.Net.Ghost">
            <summary>
            Slides the element while fading it out of view. An anchor point can be optionally passed to set the ending point of the effect. 
            </summary>
        </member>
        <member name="P:Ext.Net.Ghost.Anchor">
            <summary>
            One of the valid Fx anchor positions (defaults to AnchorPoint.CenterBottom)
            </summary>
        </member>
        <member name="P:Ext.Net.ElementFxConfig.Callback">
            <summary>
            A function called when the effect is finished. Note that effects are queued internally by the Fx class, so do not need to use the callback parameter to specify another effect -- effects can simply be chained together and called in sequence (e.g., el.slideIn().highlight();). The callback is intended for any additional code that should run once a particular effect has completed. The Element being operated upon is passed as the first parameter.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementFxConfig.Duration">
            <summary>
            The length of time (in seconds) that the effect should last
            </summary>
        </member>
        <member name="P:Ext.Net.ElementFxConfig.Easing">
            <summary>
            A valid Easing value for the effect
            </summary>
        </member>
        <member name="P:Ext.Net.ElementFxConfig.Scope">
            <summary>
            The scope of the effect function
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.AfterCls">
            <summary>
            A css class to apply after the effect
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.AfterStyle">
            <summary>
            A style specification string, e.g. "width:100px", that will be applied to the Element after the effect finishes
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.Block">
            <summary>
            Whether the effect should block other effects from queueing while it runs
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.Concurrent">
            <summary>
            Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.Remove">
            <summary>
            Whether the Element should be removed from the DOM and destroyed after the effect finishes
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.StopFx">
            <summary>
            Whether subsequent effects should be stopped and removed after the current effect finishes
            </summary>
        </member>
        <member name="P:Ext.Net.FxConfig.UseDisplay">
            <summary>
            Whether to use the display CSS property instead of visibility when hiding Elements (only applies to effects that end with the element being visually hidden, ignored otherwise)
            </summary>
        </member>
        <member name="P:Ext.Net.FadeOutConfig.EndOpacity">
            <summary>
            The ending opacity
            </summary>
        </member>
        <member name="P:Ext.Net.DatePickerListeners.Select">
            <summary>
            Fires when a date is selected.
            </summary>
        </member>
        <member name="T:Ext.Net.DateColumn">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Column">
            <summary>
            An individual column's config object defines the header string, the Record field
            the column draws its data from, an optional rendering function to provide customized
            data formatting, and the ability to apply a CSS class to all cells in a column
            through its id config option.
            </summary>
        </member>
        <member name="T:Ext.Net.ColumnBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.ColumnBase.renderer">
             <summary>
             (optional) A function used to generate HTML markup for a cell given the cell's data value.
             If not specified, the default renderer uses the raw data value.
             
             Sets the rendering (formatting) function for a column. 
             See Ext.util.Format for some default formatting functions.
            
             The render function is called with the following parameters:
                 value : Object
                     The data value for the cell.
                 metadata : Object
                     An object in which you may set the following attributes:
                     
                     css : String
                         A CSS class name to add to the cell's TD element.
                     attr : String
                         An HTML attribute definition string to apply to the data container element
                          within the table cell (e.g. 'style="color:red;"').
                 
                 record : Ext.data.record
                     The Ext.data.Record from which the data was extracted.
                 rowIndex : Number
                     Row index
                 colIndex : Number
                     Column index
                 store : Ext.data.Store
                     The Ext.data.Store object from which the Record was extracted.
             Returns:
                 void
             </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Wrap">
            <summary>
            True to wrap cell text (excluding header) if required
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Align">
            <summary>
            optional) Set the CSS text-align property of the column. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Css">
            <summary>
            (optional) Set custom CSS for all table cells in the column (excluding headers). Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Store's Record definition from which
            to draw the column's value. If not specified, the column's index is used as an index
            into the Record's data Array.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Editor">
            <summary>
            (optional) The Field to use when editing values in this column if editing is supported by the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.EditorOptions">
            <summary>
            Editor options
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Fixed">
            <summary>
            (optional) True if the column width cannot be changed. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Header">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Hidden">
            <summary>
            (optional) True to hide the column. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Hideable">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.ColumnID">
             <summary>
             (optional) Defaults to the column's initial ordinal position. A name which identifies
             this column. The id is used to create a CSS class name which is applied to all table
             cells (including headers) in that column. The class name takes the form of
             
             x-grid3-td-id
            
            
             Header cells will also recieve this class name, but will also have the class x-grid3-hd,
             so to target header cells, use CSS selectors such as:
             
             .x-grid3-hd.x-grid3-td-id
             
             The AutoExpandColumn grid config option references the column via this identifier.
             </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.MenuDisabled">
            <summary>
            (optional) True to disable the column menu. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Renderer">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value. If not specified, the default renderer uses the raw data value.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.GroupRenderer">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value."
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Groupable">
            <summary>
            (optional) False to disable grouping by this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Resizable">
            <summary>
            (optional) False to disable column resizing. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Scope">
            <summary>
            The scope (this reference) in which to execute the renderer. Defaults to the Column configuration object.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Sortable">
            <summary>
            (optional) True if sorting is to be allowed on this column. Defaults to the value
            of the defaultSortable property. Whether local/remote sorting is used is 
            specified in Ext.data.Store.remoteSort.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Tooltip">
            <summary>
            (optional) A text string to use as the column header's tooltip. If Quicktips are enabled,
            this value will be used as the text of the quick tip, otherwise it will be set as the
            header's HTML title attribute. Defaults to ''.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Width">
            <summary>
            (optional) The initial width in pixels of the column. Using this instead of Ext.grid.GridPanel.autoSizeColumns is more efficient.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Editable">
            <summary>
            Optional. Defaults to true, enabling the configured editor. Set to false to initially disable editing on this column. 
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.EmptyGroupText">
            <summary>
            Optional. If the grid is being rendered by an Ext.grid.GroupingView, this option may be used to specify the text to display when there is an empty group value. Defaults to the Ext.grid.GroupingView.emptyGroupText.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.GroupName">
            <summary>
            Optional. If the grid is being rendered by an Ext.grid.GroupingView, this option may be used to specify the text with which to prefix the group field value in the group header line. See also groupRenderer and Ext.grid.GroupingView.showGroupName.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Wrap(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Locked(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Align(Ext.Net.Alignment)">
            <summary>
            (optional) Set the CSS text-align property of the column. Defaults to undefined.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Css(System.String)">
            <summary>
            (optional) Set custom CSS for all table cells in the column (excluding headers). Defaults to undefined.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.DataIndex(System.String)">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Fixed(System.Boolean)">
            <summary>
            (optional) True if the column width cannot be changed. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Header(System.String)">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Hidden(System.Boolean)">
            <summary>
            (optional) True to hide the column. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Hideable(System.Boolean)">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.ColumnID(System.String)">
            <summary>
            (optional) Defaults to the column's initial ordinal position. A name which identifies this column. The id is used to create a CSS class name which is applied to all table cells (including headers) in that column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.MenuDisabled(System.Boolean)">
            <summary>
            (optional) True to disable the column menu. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Renderer(Ext.Net.Renderer)">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value. If not specified, the default renderer uses the raw data value.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.GroupRenderer(Ext.Net.Renderer)">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Groupable(System.Boolean)">
            <summary>
            (optional) False to disable grouping by this column. Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Resizable(System.Boolean)">
            <summary>
            (optional) False to disable column resizing. Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Scope(System.String)">
            <summary>
            The scope (this reference) in which to execute the renderer. Defaults to the Column configuration object.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Sortable(System.Boolean)">
            <summary>
            (optional) True if sorting is to be allowed on this column. Defaults to the value of the defaultSortable property. Whether local/remote sorting is used is specified in Ext.data.Store.remoteSort.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Tooltip(System.String)">
            <summary>
            (optional) A text string to use as the column header's tooltip. If Quicktips are enabled, this value will be used as the text of the quick tip, otherwise it will be set as the header's HTML title attribute. Defaults to ''.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            (optional) The initial width in pixels of the column. Using this instead of Ext.grid.Grid.autoSizeColumns is more efficient.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.Editable(System.Boolean)">
            <summary>
            Optional. Defaults to true, enabling the configured editor. Set to false to initially disable editing on this column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.EmptyGroupText(System.String)">
            <summary>
            Optional. If the grid is being rendered by an Ext.grid.GroupingView, this option may be used to specify the text to display when there is an empty group value. Defaults to the Ext.grid.GroupingView.emptyGroupText.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnBase.Builder`2.GroupName(System.String)">
            <summary>
            Optional. If the grid is being rendered by an Ext.grid.GroupingView, this option may be used to specify the text with which to prefix the group field value in the group header line. See also groupRenderer and Ext.grid.GroupingView.showGroupName.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Wrap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Locked">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Align">
            <summary>
            (optional) Set the CSS text-align property of the column. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Css">
            <summary>
            (optional) Set custom CSS for all table cells in the column (excluding headers). Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Editor">
            <summary>
            (optional) The Ext.form.Field to use when editing values in this column if editing is supported by the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.EditorOptions">
            <summary>
            Editor options
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Fixed">
            <summary>
            (optional) True if the column width cannot be changed. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Header">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Hidden">
            <summary>
            (optional) True to hide the column. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Hideable">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.ColumnID">
            <summary>
            (optional) Defaults to the column's initial ordinal position. A name which identifies this column. The id is used to create a CSS class name which is applied to all table cells (including headers) in that column.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.MenuDisabled">
            <summary>
            (optional) True to disable the column menu. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Renderer">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value. If not specified, the default renderer uses the raw data value.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.GroupRenderer">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Groupable">
            <summary>
            (optional) False to disable grouping by this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Resizable">
            <summary>
            (optional) False to disable column resizing. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Scope">
            <summary>
            The scope (this reference) in which to execute the renderer. Defaults to the Column configuration object.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Sortable">
            <summary>
            (optional) True if sorting is to be allowed on this column. Defaults to the value of the defaultSortable property. Whether local/remote sorting is used is specified in Ext.data.Store.remoteSort.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Tooltip">
            <summary>
            (optional) A text string to use as the column header's tooltip. If Quicktips are enabled, this value will be used as the text of the quick tip, otherwise it will be set as the header's HTML title attribute. Defaults to ''.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Width">
            <summary>
            (optional) The initial width in pixels of the column. Using this instead of Ext.grid.Grid.autoSizeColumns is more efficient.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.Editable">
            <summary>
            Optional. Defaults to true, enabling the configured editor. Set to false to initially disable editing on this column.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.EmptyGroupText">
            <summary>
            Optional. If the grid is being rendered by an Ext.grid.GroupingView, this option may be used to specify the text to display when there is an empty group value. Defaults to the Ext.grid.GroupingView.emptyGroupText.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnBase.Config.GroupName">
            <summary>
            Optional. If the grid is being rendered by an Ext.grid.GroupingView, this option may be used to specify the text with which to prefix the group field value in the group header line. See also groupRenderer and Ext.grid.GroupingView.showGroupName.
            </summary>
        </member>
        <member name="P:Ext.Net.Column.RightCommandAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.CustomConfig">
            <summary>
            Collection of custom js config
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Commands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.PrepareCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.PrepareCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Config.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Config.RightCommandAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Config.CustomConfig">
            <summary>
            Collection of custom js config
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Config.Commands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Config.PrepareCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Column.Config.PrepareCommands">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Column.Builder.XType(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Column.Builder.RightCommandAlign(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DateColumn.Format">
            <summary>
            A formatting string as used by Date.format to format a Date for this Column (defaults to 'd').
            </summary>
        </member>
        <member name="P:Ext.Net.DateColumn.Config.Format">
            <summary>
            A formatting string as used by Date.format to format a Date for this Column (defaults to 'd').
            </summary>
        </member>
        <member name="M:Ext.Net.DateColumn.Builder.Format(System.String)">
            <summary>
            A formatting string as used by Date.format to format a Date for this Column (defaults to 'd').
            </summary>
        </member>
        <member name="T:Ext.Net.CheckColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckColumn.Editable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckColumn.SingleSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CheckColumn.Builder.Editable(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CheckColumn.Builder.SingleSelect(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckColumn.Config.Editable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckColumn.Config.SingleSelect">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Editor">
            <summary>
            A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.CancelEdit(System.Boolean)">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. The field value will be reverted to the original starting value.
            </summary>
            <param name="remainVisible">Override the default behavior and keep the editor visible after cancel</param>
        </member>
        <member name="M:Ext.Net.Editor.CancelEdit">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. The field value will be reverted to the original starting value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.CompleteEdit(System.Boolean)">
            <summary>
            Ends the editing process, persists the changed value to the underlying field, and hides the editor.
            </summary>
            <param name="remainVisible">Override the default behavior and keep the editor visible after edit (defaults to false)</param>
        </member>
        <member name="M:Ext.Net.Editor.CompleteEdit">
            <summary>
            Ends the editing process, persists the changed value to the underlying field, and hides the editor.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Realign">
            <summary>
            Realigns the editor to the bound field based on the current alignment config value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the height and width of this editor.
            </summary>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
        </member>
        <member name="M:Ext.Net.Editor.SetValue(System.String)">
            <summary>
            Sets the data value of the editor
            </summary>
            <param name="value">Any valid value supported by the underlying field</param>
        </member>
        <member name="M:Ext.Net.Editor.StartEdit(System.String,System.String)">
            <summary>
            Starts the editing process and shows the editor.
            </summary>
            <param name="el">The element to edit</param>
            <param name="value">A value to initialize the editor with. If a value is not provided, it defaults to the innerHTML of el.</param>
        </member>
        <member name="M:Ext.Net.Editor.StartEdit(System.String)">
            <summary>
            Starts the editing process and shows the editor.
            </summary>
            <param name="el">The element to edit</param>
        </member>
        <member name="P:Ext.Net.Editor.ActivateEvent">
            <summary>
            Event name for activate the editor
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Alignment">
            <summary>
            The position to align to (see Ext.Element.alignTo for more details, defaults to "c-c?").
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.AutoSize">
            <summary>
            Size for the editor to automatically adopt the size of the underlying field, "Width" to adopt the width only, or "Height" to adopt the height only (defaults to Disable)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.ZIndex">
            <summary>
            Editor z-index
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.AllowBlur">
            <summary>
            True to complete edit complete the editing process if in edit mode when the field is blurred. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.CancelOnBlur">
            <summary>
            True to cancel the edit when the blur event is fired (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.CancelOnEsc">
            <summary>
            True to cancel the edit when the escape key is pressed (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.CompleteOnEnter">
            <summary>
            True to complete the edit when the enter key is pressed (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.HideEl">
            <summary>
            False to keep the bound element visible while the editor is displayed (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.IgnoreNoChange">
            <summary>
            True to skip the edit completion process (no save, no events fired) if the user completes an edit and the value has not changed (defaults to false). Applies only to string values - edits for other data types will never be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.RevertInvalid">
            <summary>
            True to automatically revert the field value and cancel the edit when the user completes an edit and the field validation fails (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Shadow">
            <summary>
            "sides" for sides/bottom only, "frame" for 4-way shadow, and "drop" for bottom-right shadow (defaults to "frame")
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.SwallowKeys">
            <summary>
            Handle the keydown/keypress events so they don't propagate (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.UpdateEl">
            <summary>
            Handle the keydown/keypress events so they don't propagate (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Value">
            <summary>
            The data value of the underlying field (defaults to "")
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Field">
            <summary>
            The Field object (or descendant)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Offsets">
            <summary>
            The offsets to use when aligning. Defaults to [0, 0].
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.TargetControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Target">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.ActivateEvent(System.String)">
            <summary>
            Event name for activate the editor
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.AutoSize(Ext.Net.EditorAutoSize)">
            <summary>
            Size for the editor to automatically adopt the size of the underlying field, Width to adopt the width only, or Height to adopt the height only (defaults to Disable)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.ZIndex(System.Int32)">
            <summary>
            Editor z-index
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.AllowBlur(System.Boolean)">
            <summary>
            True to complete edit complete the editing process if in edit mode when the field is blurred. Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CancelOnBlur(System.Boolean)">
            <summary>
            True to cancel the edit when the blur event is fired (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CancelOnEsc(System.Boolean)">
            <summary>
            True to cancel the edit when the escape key is pressed (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CompleteOnEnter(System.Boolean)">
            <summary>
            True to complete the edit when the enter key is pressed (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.HideEl(System.Boolean)">
            <summary>
            False to keep the bound element visible while the editor is displayed (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.IgnoreNoChange(System.Boolean)">
            <summary>
            True to skip the edit completion process (no save, no events fired) if the user completes an edit and the value has not changed (defaults to false). Applies only to string values - edits for other data types will never be ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.RevertInvalid(System.Boolean)">
            <summary>
            True to automatically revert the field value and cancel the edit when the user completes an edit and the field validation fails (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.Shadow(Ext.Net.ShadowMode)">
            <summary>
            \"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"frame\")
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.SwallowKeys(System.Boolean)">
            <summary>
            Handle the keydown/keypress events so they don't propagate (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.UpdateEl(System.Boolean)">
            <summary>
            True to update the innerHTML of the bound element when the update completes (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.Value(System.String)">
            <summary>
            The data value of the underlying field (defaults to \"\")
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.Target(System.String)">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CancelEdit(System.Boolean)">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. The field value will be reverted to the original starting value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CancelEdit">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. The field value will be reverted to the original starting value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CompleteEdit(System.Boolean)">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. The field value will be reverted to the original starting value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.CompleteEdit">
            <summary>
            Cancels the editing process and hides the editor without persisting any changes. The field value will be reverted to the original starting value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.Realign">
            <summary>
            Realigns the editor to the bound field based on the current alignment config value.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the height and width of this editor.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.StartEdit(System.String,System.String)">
            <summary>
            Starts the editing process and shows the editor.
            </summary>
        </member>
        <member name="M:Ext.Net.Editor.Builder.StartEdit(System.String)">
            <summary>
            Starts the editing process and shows the editor.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.ActivateEvent">
            <summary>
            Event name for activate the editor
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.AutoSize">
            <summary>
            Size for the editor to automatically adopt the size of the underlying field, Width to adopt the width only, or Height to adopt the height only (defaults to Disable)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.ZIndex">
            <summary>
            Editor z-index
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.AllowBlur">
            <summary>
            True to complete edit complete the editing process if in edit mode when the field is blurred. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.CancelOnBlur">
            <summary>
            True to cancel the edit when the blur event is fired (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.CancelOnEsc">
            <summary>
            True to cancel the edit when the escape key is pressed (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.CompleteOnEnter">
            <summary>
            True to complete the edit when the enter key is pressed (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.HideEl">
            <summary>
            False to keep the bound element visible while the editor is displayed (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.IgnoreNoChange">
            <summary>
            True to skip the edit completion process (no save, no events fired) if the user completes an edit and the value has not changed (defaults to false). Applies only to string values - edits for other data types will never be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.RevertInvalid">
            <summary>
            True to automatically revert the field value and cancel the edit when the user completes an edit and the field validation fails (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.Shadow">
            <summary>
            \"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"frame\")
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.SwallowKeys">
            <summary>
            Handle the keydown/keypress events so they don't propagate (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.UpdateEl">
            <summary>
            True to update the innerHTML of the bound element when the update completes (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.Value">
            <summary>
            The data value of the underlying field (defaults to \"\")
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.Field">
            <summary>
            The Field object (or descendant)
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.TargetControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.Target">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Editor.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.BoxLayout">
            <summary>
            Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.
            </summary>
        </member>
        <member name="T:Ext.Net.ContainerLayout">
            <summary>
            Every layout is composed of one or more Ext.Container elements internally, and ContainerLayout provides the basic foundation for all other layout classes in Ext. It is a non-visual class that simply provides the base logic required for a Container to function as a layout. 
            </summary>
        </member>
        <member name="T:Ext.Net.Layout">
            <summary>
            Every layout is composed of one or more Ext.Container elements internally, and Layout provides the basic foundation for all other layout classes in Ext. It is a non-visual class that simply provides the base logic required for a Container to function as a layout.
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.LayoutType">
            <summary>
            The layout type to be used in this Body Container. If not specified, a default is Container. Specific config values for the chosen layout type can be specified using layoutConfig.
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.ExtraCls">
            <summary>
            An optional extra CSS class that will be added to the content Container (defaults to ''). This can be useful for adding customized styles to the content Container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.RenderHidden">
            <summary>
            True to hide each contained items on render (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="M:Ext.Net.Layout.Builder`2.ExtraCls(System.String)">
            <summary>
            An optional extra CSS class that will be added to the content Container (defaults to ''). This can be useful for adding customized styles to the content Container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="M:Ext.Net.Layout.Builder`2.RenderHidden(System.Boolean)">
            <summary>
            True to hide each contained items on render (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.Config.ExtraCls">
            <summary>
            An optional extra CSS class that will be added to the content Container (defaults to ''). This can be useful for adding customized styles to the content Container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.Config.RenderHidden">
            <summary>
            True to hide each contained items on render (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Layout.Config.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.DefaultMargins">
            <summary>
            The default margins from this property will be applied to each item.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.Padding">
            <summary>
            Defaults to '0'. Sets the padding to be applied to all child items managed by this container's layout.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.Pack">
            <summary>
            Controls how the child items of the container are packed together. 
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.BoxItems">
            <summary>
            Box items collection
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.Config.DefaultMargins">
            <summary>
            The default margins from this property will be applied to each item.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.Config.Padding">
            <summary>
            Defaults to '0'. Sets the padding to be applied to all child items managed by this container's layout.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.Config.Pack">
            <summary>
            Controls how the child items of the container are packed together.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayout.Config.BoxItems">
            <summary>
            Box items collection
            </summary>
        </member>
        <member name="M:Ext.Net.BoxLayout.Builder`2.DefaultMargins(System.String)">
            <summary>
            The default margins from this property will be applied to each item.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxLayout.Builder`2.Padding(System.String)">
            <summary>
            Defaults to '0'. Sets the padding to be applied to all child items managed by this container's layout.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxLayout.Builder`2.Pack(Ext.Net.BoxPack)">
            <summary>
            Controls how the child items of the container are packed together.
            </summary>
        </member>
        <member name="T:Ext.Net.DisplayField">
            <summary>
            A display-only text field which is not validated and not submitted.
            </summary>
        </member>
        <member name="M:Ext.Net.DisplayField.SetHtmlEncode(System.Boolean)">
            <summary>
            false to skip HTML-encoding the text when rendering it (defaults to false). This might be useful if you want to include tags in the field's innerHTML rather than rendering them as string literals per the default logic.
            </summary>
            <seealso cref="P:Ext.Net.DisplayField.HtmlEncode"/>
        </member>
        <member name="M:Ext.Net.DisplayField.SetText(System.String)">
            <summary>
            Updates the label's innerHTML with the specified string.
            </summary>
            <seealso cref="P:Ext.Net.DisplayField.HtmlEncode"/>
        </member>
        <member name="P:Ext.Net.DisplayField.FieldClass">
            <summary>
            The default CSS class for the field (defaults to "x-form-display-field")
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.HtmlEncode">
            <summary>
            false to skip HTML-encoding the text when rendering it (defaults to false). This might be useful if you want to include tags in the field's innerHTML rather than rendering them as string literals per the default logic.
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Text">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML tags within the label's innerHTML, use the html config instead.
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.DisplayField.Builder.FieldClass(System.String)">
            <summary>
            The default CSS class for the field (defaults to 'x-form-display-field')
            </summary>
        </member>
        <member name="M:Ext.Net.DisplayField.Builder.HtmlEncode(System.Boolean)">
            <summary>
            false to skip HTML-encoding the text when rendering it (defaults to false). This might be useful if you want to include tags in the field's innerHTML rather than rendering them as string literals per the default logic.
            </summary>
        </member>
        <member name="M:Ext.Net.DisplayField.Builder.Text(System.String)">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML tags within the label's innerHTML, use the html config instead.
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Config.FieldClass">
            <summary>
            The default CSS class for the field (defaults to 'x-form-display-field')
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Config.HtmlEncode">
            <summary>
            false to skip HTML-encoding the text when rendering it (defaults to false). This might be useful if you want to include tags in the field's innerHTML rather than rendering them as string literals per the default logic.
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Config.Text">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML tags within the label's innerHTML, use the html config instead.
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DisplayField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSubmitConfig.WithChildren">
            <summary>
            Serialize node with children
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSubmitConfig.DisableAutomaticSubmit">
            <summary>
            Disable automatic submit
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSubmitConfig.Encode">
            <summary>
            True to encode node's text
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSubmitConfig.PathAttribute">
            <summary>
            The attr to use for the path (defaults to the node's id)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSubmitConfig.NodeFilter">
            <summary>
            Node filter functon, return false to exclude the node
            Parameters:
               node - filter node
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSubmitConfig.AttributeFilter">
            <summary>
            Attribute filter functon, return false to exclude the attribute
            Parameters:
               attrName - attribute's name
               attrValue - attribute's value
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarSpacer">
            <summary>
            A simple element that adds extra horizontal space between items in a toolbar.
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarItem.Disable">
            <summary>
            Disable this component.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarItem.Enable">
            <summary>
            Enable this component.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarItem.Builder`2.Disable">
            <summary>
            Disable this component.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarItem.Builder`2.Enable">
            <summary>
            Enable this component.
            </summary>
        </member>
        <member name="T:Ext.Net.ScriptClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.IResourceManager.ResourceManager">
            <summary>
            Get an instance of the ResourceManager
            </summary>
        </member>
        <member name="P:Ext.Net.IResourceManager.Page">
            <summary>
            Get an instance of the Page
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.ToScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.Render">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.Call(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.Call(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.Set(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.AddScript(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.AddScript(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.CallTemplate(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.FormatCall(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.FormatCallTemplate(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptClass.FormatArgs(System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptClass.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptClass.Page">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptClass.ResourceManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.JFunction)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="handler">(optional) The callback function invoked after the message box is closed</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,System.String,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="handler">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.JFunction,System.String,System.Boolean,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
            <param name="multiline">(optional) True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox (defaults to false / single-line)</param>
            <param name="value">(optional) Default value of the text input element (defaults to '')</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.JFunction,System.String,System.Web.UI.WebControls.Unit,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
            <param name="multiline">(optional) True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox (defaults to false / single-line)</param>
            <param name="value">(optional) Default value of the text input element (defaults to '')</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.MessageBoxButtonsConfig)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.MessageBoxButtonsConfig,System.String,System.Boolean,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
            <param name="scope">(optional) The scope of the callback function</param>
            <param name="multiline">(optional) True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox (defaults to false / single-line)</param>
            <param name="value">(optional) Default value of the text input element (defaults to '')</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Prompt(System.String,System.String,Ext.Net.MessageBoxButtonsConfig,System.String,System.Web.UI.WebControls.Unit,System.String)">
            <summary>
            Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked (could also be the top-right close button) and the text that was entered will be passed as the two parameters to the callback.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
            <param name="scope">(optional) The scope of the callback function</param>
            <param name="multiline">(optional) True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox (defaults to false / single-line)</param>
            <param name="value">(optional) Default value of the text input element (defaults to '')</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Hide">
            <summary>
            Hides the message box if it is displayed
            </summary>
        </member>
        <member name="M:Ext.Net.MessageBox.SetIcon(System.String)">
            <summary>
            Adds the specified icon to the dialog. By default, the class 'ext-mb-icon' is applied for default styling, and the class passed in is expected to supply the background image url. Pass in empty string ('') to clear any existing icon.
            </summary>
            <param name="icon">A CSS classname specifying the icon's background image url, or empty string to clear the icon</param>
        </member>
        <member name="M:Ext.Net.MessageBox.SetIcon(Ext.Net.MessageBox.Icon)">
            <summary>
            Adds the specified icon to the dialog. By default, the class 'ext-mb-icon' is applied for default styling, and the class passed in is expected to supply the background image url. Pass in empty string ('') to clear any existing icon.
            </summary>
            <param name="icon">A CSS classname specifying the icon's background image url, or empty string to clear the icon</param>
        </member>
        <member name="M:Ext.Net.MessageBox.UpdateProgress(System.Single,System.String,System.String)">
            <summary>
            Updates a progress-style message box's text and progress bar. Only relevant on message boxes initiated via Ext.MessageBox.progress or Ext.MessageBox.wait, or by calling Ext.MessageBox.show with progress: true.
            </summary>
            <param name="value">Any number between 0 and 1 (e.g., .5, defaults to 0)</param>
            <param name="progressText">The progress text to display inside the progress bar (defaults to '')</param>
            <param name="msg">The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in)</param>
        </member>
        <member name="M:Ext.Net.MessageBox.UpdateProgress(System.Single,System.String)">
            <summary>
            Updates a progress-style message box's text and progress bar. Only relevant on message boxes initiated via Ext.MessageBox.progress or Ext.MessageBox.wait, or by calling Ext.MessageBox.show with progress: true.
            </summary>
            <param name="value">Any number between 0 and 1 (e.g., .5, defaults to 0)</param>
            <param name="progressText">The progress text to display inside the progress bar (defaults to '')</param>
        </member>
        <member name="M:Ext.Net.MessageBox.UpdateText">
            <summary>
            Updates the message box body text
            </summary>
        </member>
        <member name="M:Ext.Net.MessageBox.UpdateText(System.String)">
            <summary>
            Updates the message box body text
            </summary>
            <param name="text">(optional) Replaces the message box element's innerHTML with the specified string (defaults to the XHTML-compliant non-breaking space character '&#160;')</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String,Ext.Net.JFunction)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String,System.String)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="handler">(optional) The callback function invoked after the message box is closed</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String,System.String,System.String)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="handler">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String,Ext.Net.MessageBoxButtonsConfig)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Alert(System.String,System.String,Ext.Net.MessageBoxButtonsConfig,System.String)">
            <summary>
            Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If a callback function is passed it will be called after the user clicks the button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String,Ext.Net.JFunction)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String,System.String)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="handler">(optional) The callback function invoked after the message box is closed</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String,System.String,System.String)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="handler">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="fn">(optional) The callback function invoked after the message box is closed</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String,Ext.Net.MessageBoxButtonsConfig)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Confirm(System.String,System.String,Ext.Net.MessageBoxButtonsConfig,System.String)">
            <summary>
            Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback function is passed it will be called after the user clicks either button, and the id of the button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="buttonsConfig">A MessageBoxButtonsConfig object for configuring the Text value and JavaScript Handler for each MessageBox Button.</param>
            <param name="scope">(optional) The scope of the callback function</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Wait(System.String)">
            <summary>
            Displays a message box with an infinitely auto-updating progress bar. This can be used to block user interaction while waiting for a long-running process to complete that does not have defined intervals. You are responsible for closing the message box when the process is complete.
            </summary>
            <param name="msg">The message box body text</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Wait(System.String,System.String)">
            <summary>
            Displays a message box with an infinitely auto-updating progress bar. This can be used to block user interaction while waiting for a long-running process to complete that does not have defined intervals. You are responsible for closing the message box when the process is complete.
            </summary>
            <param name="msg">The message box body text</param>
            <param name="title">(optional) The title bar text</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Wait(System.String,System.String,Ext.Net.WaitConfig)">
            <summary>
            Displays a message box with an infinitely auto-updating progress bar. This can be used to block user interaction while waiting for a long-running process to complete that does not have defined intervals. You are responsible for closing the message box when the process is complete.
            </summary>
            <param name="msg">The message box body text</param>
            <param name="title">(optional) The title bar text</param>
            <param name="config">(optional) A Ext.ProgressBar.waitConfig object</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Progress(System.String,System.String)">
            <summary>
            Displays a message box with a progress bar. This message box has no buttons and is not closeable by the user. You are responsible for updating the progress bar as needed via Ext.MessageBox.updateProgress and closing the message box when the process is complete.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
        </member>
        <member name="M:Ext.Net.MessageBox.Progress(System.String,System.String,System.String)">
            <summary>
            Displays a message box with a progress bar. This message box has no buttons and is not closeable by the user. You are responsible for updating the progress bar as needed via Ext.MessageBox.updateProgress and closing the message box when the process is complete.
            </summary>
            <param name="title">The title bar text</param>
            <param name="msg">The message box body text</param>
            <param name="progressText">(optional) The text to display inside the progress bar (defaults to '')</param>
        </member>
        <member name="T:Ext.Net.GridViewTemplates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewTemplates.Header">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewTemplates.Config.Header">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.Click">
            <summary>
            Fires when this button is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.MenuHide">
            <summary>
            If this button has a menu, this event fires when it is hidden.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.MenuShow">
            <summary>
            If this button has a menu, this event fires when it is shown.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.MenuTriggerOut">
            <summary>
            If this button has a menu, this event fires when the mouse leaves the menu triggering element.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.MenuTriggerOver">
            <summary>
            If this button has a menu, this event fires when the mouse enters the menu triggering element.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.MouseOut">
            <summary>
            Fires when the mouse exits the button.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.MouseOver">
            <summary>
            Fires when the mouse hovers over the button.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonListeners.Toggle">
            <summary>
            Fires when the 'pressed' state of this button changes (only if enableToggle = true).
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButtonListeners.ArrowClick">
            <summary>
            Fires when this button's arrow is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButtonListeners.Change">
            <summary>
            Fires after the button's active menu items has changed. Note that if a changeHandler function is set on this CycleButton, it will be called instead on active items change and this change event will not be fired.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItemListeners.Activate">
            <summary>
            Fires when this item is activated
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItemListeners.Click">
            <summary>
            Fires when this item is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItemListeners.Deactivate">
            <summary>
            Fires when this item is deactivated
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItemListeners.BeforeCheckChange">
            <summary>
            Fires before the checked value is set, providing an opportunity to cancel if needed
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItemListeners.CheckChange">
            <summary>
            Fires after the checked value has been set
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Add">
            <summary>
            Fires when Records have been added to the Store
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.BeforeLoad">
            <summary>
            Fires before a request is made for a new data object. If the beforeload handler returns false the load action will be canceled
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Clear">
            <summary>
            Fires when the data cache has been cleared.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.DataChanged">
            <summary>
            Fires when the data cache has changed, and a widget which is using this Store as a Record cache should refresh its view.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Load">
            <summary>
            Fires after a new set of Records has been loaded.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.LoadException">
            <summary>
            Fires if an exception occurs in the Proxy during loading. Called with the signature of the Proxy's \"loadexception\" event.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.MetaChange">
            <summary>
            Fires when this store's reader provides new metadata (fields). This is currently only supported for JsonReaders.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Remove">
            <summary>
            Fires when a Record has been removed from the Store
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Update">
            <summary>
            Fires when a Record has been updated
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.BeforeSave">
            <summary>
            Fires before a network request is made to save a data object. If the beforesave handler returns false the save action will be canceled
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Save">
            <summary>
            Fires before the save method's callback is called.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.SaveException">
            <summary>
            Fires if an exception occurs in the Proxy during writing.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDirectEvents.Exception">
            <summary>
            Fires if an exception occurs during request
            </summary>
        </member>
        <member name="P:Ext.Net.HistoryDirectEvents.Change">
            <summary>
            Handle this change event in order to restore the UI to the appropriate history state
            </summary>
        </member>
        <member name="T:Ext.Net.InsertPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.InsertPosition.BeforeBegin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.InsertPosition.AfterBegin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.InsertPosition.BeforeEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.InsertPosition.AfterEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.InsertPosition.Before">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.InsertPosition.After">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.TopLeft">
            <summary>
            The top left corner
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.Top">
            <summary>
            The center of the top edge
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.TopRight">
            <summary>
            The top right corner
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.Left">
            <summary>
            The center of the left edge
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.Center">
            <summary>
            In the center of the element
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.Right">
            <summary>
            The center of the right edge
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.BottomLeft">
            <summary>
            The bottom left corner
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.Bottom">
            <summary>
            The center of the bottom edge
            </summary>
        </member>
        <member name="F:Ext.Net.AnchorPoint.BottomRight">
            <summary>
            The bottom right corner
            </summary>
        </member>
        <member name="T:Ext.Net.BaseFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Task">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Task.TaskID">
            <summary>
            (optional) The TaskID.
            </summary>
        </member>
        <member name="P:Ext.Net.Task.AutoRun">
            <summary>
            True to auto run task (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Interval">
            <summary>
            The frequency in milliseconds with which the task should be executed (defaults to 1000)
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Args">
            <summary>
            (optional) An array of arguments to be passed to the function specified by run
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Scope">
            <summary>
            (optional) The scope in which to execute the run function.
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Duration">
            <summary>
            (optional) The length of time in milliseconds to execute the task before stopping automatically (defaults to indefinite).
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Repeat">
            <summary>
            (optional) The number of times to execute the task before stopping automatically (defaults to indefinite).
            </summary>
        </member>
        <member name="P:Ext.Net.Task.DirectEventProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Task.OnStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Task.OnStop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Task.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.TaskID">
            <summary>
            (optional) The TaskID.
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.AutoRun">
            <summary>
            True to auto run task (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.Interval">
            <summary>
            The frequency in milliseconds with which the task should be executed (defaults to 1000)
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.Args">
            <summary>
            (optional) An array of arguments to be passed to the function specified by run
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.Scope">
            <summary>
            (optional) The scope in which to execute the run function.
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.Duration">
            <summary>
            (optional) The length of time in milliseconds to execute the task before stopping automatically (defaults to indefinite).
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.Repeat">
            <summary>
            (optional) The number of times to execute the task before stopping automatically (defaults to indefinite).
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.OnStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.OnStop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Task.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.TaskID(System.String)">
            <summary>
            (optional) The TaskID.
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.AutoRun(System.Boolean)">
            <summary>
            True to auto run task (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.Interval(System.Int32)">
            <summary>
            The frequency in milliseconds with which the task should be executed (defaults to 1000)
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.Args(System.String[])">
            <summary>
            (optional) An array of arguments to be passed to the function specified by run
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.Scope(System.String)">
            <summary>
            (optional) The scope in which to execute the run function.
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.Duration(System.Int32)">
            <summary>
            (optional) The length of time in milliseconds to execute the task before stopping automatically (defaults to indefinite).
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.Repeat(System.Int32)">
            <summary>
            (optional) The number of times to execute the task before stopping automatically (defaults to indefinite).
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.OnStart(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Task.Builder.OnStop(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.HBoxLayout">
            <summary>
            A layout that arranges items horizontally
            </summary>
        </member>
        <member name="P:Ext.Net.HBoxLayout.Align">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="P:Ext.Net.HBoxLayout.Config.Align">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="M:Ext.Net.HBoxLayout.Builder.Align(Ext.Net.HBoxAlign)">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="T:Ext.Net.GridView">
             <summary>
             This class encapsulates the user interface of an Ext.grid.GridPanel. Methods of this 
             class may be used to access user interface elements to enable special display effects. 
             Do not change the DOM structure of the user interface.
            
             This class does not provide ways to manipulate the underlying data. The data model of a 
             Grid is held in an Ext.data.Store.
             </summary>
        </member>
        <member name="M:Ext.Net.GridView.FocusCell(System.Int32,System.Int32)">
            <summary>
            Focuses the specified cell.
            </summary>
            <param name="row">The row index</param>
            <param name="col">The column index</param>
        </member>
        <member name="M:Ext.Net.GridView.FocusRow(System.Int32)">
            <summary>
            Focuses the specified row.
            </summary>
            <param name="row">The row index</param>
        </member>
        <member name="M:Ext.Net.GridView.Refresh(System.Boolean)">
            <summary>
            Refreshs the grid UI
            </summary>
            <param name="headersToo">True to also refresh the headers</param>
        </member>
        <member name="M:Ext.Net.GridView.Refresh">
            <summary>
            Refreshs the grid UI
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.ScrollToTop">
            <summary>
            Scrolls the grid to the top
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.AutoFill">
            <summary>
            True to auto expand the columns to fit the grid when the grid is created.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.ColumnsText">
            <summary>
            The text displayed in the \"Columns\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.CellSelector">
            <summary>
            The selector used to find cells internally
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.CellSelectorDepth">
            <summary>
            The number of levels to search for cells in event delegation (defaults to 4)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.DeferEmptyText">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.EmptyText">
            <summary>
            Default text to display in the grid body when no rows are available (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.EnableRowBody">
            <summary>
            True to add a second TR element per row that can be used to provide a row body that spans 
            beneath the data row. Use the getRowClass method's rowParams config to customize the row body.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.ForceFit">
            <summary>
            True to auto expand/contract the size of the columns to fit the grid width and prevent 
            horizontal scrolling.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.HeadersDisabled">
            <summary>
            True to disable the grid column headers (defaults to false). Use the ColumnModel menuDisabled config to disable the menu for individual columns. While this config is true the following will be disabled:
             - clicking on header to sort
             - the trigger to reveal the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.RowSelector">
            <summary>
            The selector used to find rows internally
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.RowSelectorDepth">
            <summary>
            The number of levels to search for rows in event delegation (defaults to 10)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.RowBodySelector">
            <summary>
            The selector used to find row bodies internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.RowBodySelectorDepth">
            <summary>
            The number of levels to search for row bodies in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to 19 pixels)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.SortAscText">
            <summary>
            The text displayed in the \"Sort Ascending\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.SortDescText">
            <summary>
            The text displayed in the \"Sort Descending\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.SelectedRowClass">
            <summary>
            The CSS class applied to a selected row (defaults to "x-grid3-row-selected").
            An example overriding the default styling:
            .x-grid3-row-selected {background-color: yellow;}
            Note that this only controls the row, and will not do anything for the text inside it. To style inner facets (like text) use something like:
            .x-grid3-row-selected .x-grid3-cell-inner {
               color: #FFCC00;
            }
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.SortAscClass">
            <summary>
            The CSS class applied to a header when it is asc sorted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.SortDescClass">
            <summary>
            The CSS class applied to a header when it is desc sorted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.MarkDirty">
            <summary>
            True to add red triangle for modified cells
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.GetRowClass">
            <summary>
            Override this function to apply custom CSS classes to rows during rendering.
            You can also supply custom parameters to the row template for the current row 
            to customize how it is rendered using the rowParams parameter. This function 
            should return the CSS class name (or empty string '' for none) that will be 
            added to the row's wrapping div. To apply multiple class names, simply return 
            them space-delimited within the string (e.g., 'my-class another-class').
            
            Parameters:
                record : Record
                    The Ext.data.Record corresponding to the current row
                index : Number
                    The row index
                rowParams : Object
                    A config object that is passed to the row template during rendering 
                    that allows customization of various aspects of a body row, if applicable. 
                    Note that this object will only be applied if enableRowBody = true, 
                    otherwise it will be ignored. The object may contain any of these properties:
                store : Store
                    The Ext.data.Store this grid is bound to
            Returns:
                String
                a CSS class name to add to the row.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.StandardHeaderRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.SplitHandleWidth">
            <summary>
            The width of the column header splitter target area.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.HeaderGroupRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.HeaderRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Templates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.AutoFill">
            <summary>
            True to auto expand the columns to fit the grid when the grid is created.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.ColumnsText">
            <summary>
            The text displayed in the \"Columns\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.CellSelector">
            <summary>
            The selector used to find cells internally
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.CellSelectorDepth">
            <summary>
            The number of levels to search for cells in event delegation (defaults to 4)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.DeferEmptyText">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.EmptyText">
            <summary>
            Default text to display in the grid body when no rows are available (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.EnableRowBody">
            <summary>
            True to add a second TR element per row that can be used to provide a row body that spans beneath the data row. Use the getRowClass method's rowParams config to customize the row body.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.ForceFit">
            <summary>
            True to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.HeadersDisabled">
            <summary>
            True to disable the grid column headers (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.RowSelector">
            <summary>
            The selector used to find rows internally
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.RowSelectorDepth">
            <summary>
            The number of levels to search for rows in event delegation (defaults to 10)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.RowBodySelector">
            <summary>
            The selector used to find row bodies internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.RowBodySelectorDepth">
            <summary>
            The number of levels to search for row bodies in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to 19 pixels)
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.SortAscText">
            <summary>
            The text displayed in the \"Sort Ascending\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.SortDescText">
            <summary>
            The text displayed in the \"Sort Descending\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.SelectedRowClass">
            <summary>
            The CSS class applied to a selected row (defaults to \"x-grid3-row-selected\").
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.SortAscClass">
            <summary>
            The CSS class applied to a header when it is asc sorted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.SortDescClass">
            <summary>
            The CSS class applied to a header when it is desc sorted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.MarkDirty">
            <summary>
            True to add red triangle for modified cells
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.GetRowClass">
            <summary>
            Override this function to apply custom CSS classes to rows during rendering.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.StandardHeaderRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.SplitHandleWidth">
            <summary>
            The width of the column header splitter target area.
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.HeaderGroupRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.HeaderRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridView.Config.Templates">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.AutoFill(System.Boolean)">
            <summary>
            True to auto expand the columns to fit the grid when the grid is created.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.ColumnsText(System.String)">
            <summary>
            The text displayed in the \"Columns\" menu item
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.CellSelector(System.String)">
            <summary>
            The selector used to find cells internally
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.CellSelectorDepth(System.Int32)">
            <summary>
            The number of levels to search for cells in event delegation (defaults to 4)
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.DeferEmptyText(System.Boolean)">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.EmptyText(System.String)">
            <summary>
            Default text to display in the grid body when no rows are available (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.EnableRowBody(System.Boolean)">
            <summary>
            True to add a second TR element per row that can be used to provide a row body that spans beneath the data row. Use the getRowClass method's rowParams config to customize the row body.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.ForceFit(System.Boolean)">
            <summary>
            True to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.HeadersDisabled(System.Boolean)">
            <summary>
            True to disable the grid column headers (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.RowSelector(System.String)">
            <summary>
            The selector used to find rows internally
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.RowSelectorDepth(System.Int32)">
            <summary>
            The number of levels to search for rows in event delegation (defaults to 10)
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.RowBodySelector(System.String)">
            <summary>
            The selector used to find row bodies internally (defaults to <tt>'div.x-grid3-row'</tt>)
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.RowBodySelectorDepth(System.Int32)">
            <summary>
            The number of levels to search for row bodies in event delegation (defaults to <tt>10</tt>)
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.ScrollOffset(System.Int32)">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to 19 pixels)
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.SortAscText(System.String)">
            <summary>
            The text displayed in the \"Sort Ascending\" menu item
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.SortDescText(System.String)">
            <summary>
            The text displayed in the \"Sort Descending\" menu item
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.SelectedRowClass(System.String)">
            <summary>
            The CSS class applied to a selected row (defaults to \"x-grid3-row-selected\").
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.SortAscClass(System.String)">
            <summary>
            The CSS class applied to a header when it is asc sorted.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.SortDescClass(System.String)">
            <summary>
            The CSS class applied to a header when it is desc sorted.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.MarkDirty(System.Boolean)">
            <summary>
            True to add red triangle for modified cells
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.StandardHeaderRow(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.SplitHandleWidth(System.Int32)">
            <summary>
            The width of the column header splitter target area.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.FocusCell(System.Int32,System.Int32)">
            <summary>
            Focuses the specified cell.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.FocusRow(System.Int32)">
            <summary>
            Focuses the specified row.
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.Refresh(System.Boolean)">
            <summary>
            Refreshs the grid UI
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.Refresh">
            <summary>
            Refreshs the grid UI
            </summary>
        </member>
        <member name="M:Ext.Net.GridView.Builder.ScrollToTop">
            <summary>
            Scrolls the grid to the top
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Tag">
            <summary>
            A trigger tag
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.HideTrigger">
            <summary>
            True to hide the trigger element and display only the base text field (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.TriggerCls">
            <summary>
            A CSS class to apply to the trigger.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Config.Tag">
            <summary>
            A trigger tag
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Config.HideTrigger">
            <summary>
            True to hide the trigger element and display only the base text field (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Config.TriggerCls">
            <summary>
            A CSS class to apply to the trigger.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Config.Icon">
            <summary>
            The icon to use in the trigger. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Config.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldTrigger.Config.Qtip">
            <summary>
            Quick tip.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldTrigger.Builder.Tag(System.String)">
            <summary>
            A trigger tag
            </summary>
        </member>
        <member name="M:Ext.Net.FieldTrigger.Builder.HideTrigger(System.Boolean)">
            <summary>
            True to hide the trigger element and display only the base text field (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.FieldTrigger.Builder.TriggerCls(System.String)">
            <summary>
            A CSS class to apply to the trigger.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldTrigger.Builder.Icon(Ext.Net.TriggerIcon)">
            <summary>
            The icon to use in the trigger. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldTrigger.Builder.IconCls(System.String)">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldTrigger.Builder.Qtip(System.String)">
            <summary>
            Quick tip.
            </summary>
        </member>
        <member name="T:Ext.Net.ColumnTreeColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTreeColumn.Renderer">
            <summary>
            (optional) A function used to generate HTML markup for a node
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTreeColumn.Config.DataIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTreeColumn.Config.Header">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTreeColumn.Config.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTreeColumn.Config.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTreeColumn.Config.Renderer">
            <summary>
            (optional) A function used to generate HTML markup for a node.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnTreeColumn.Builder.DataIndex(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnTreeColumn.Builder.Header(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnTreeColumn.Builder.Cls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnTreeColumn.Builder.Width(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnTreeColumn.Builder.Renderer(Ext.Net.Renderer)">
            <summary>
            (optional) A function used to generate HTML markup for a node.
            </summary>
        </member>
        <member name="T:Ext.Net.ColorMenu">
            <summary>
            A menu containing a Ext.menu.ColorItem component (which provides a basic color picker).
            </summary>
        </member>
        <member name="T:Ext.Net.MenuBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Hide(System.Boolean)">
            <summary>
            Hides this menu and optionally all parent menus
            </summary>
            <param name="deep">True to hide all parent menus recursively, if any</param>
        </member>
        <member name="M:Ext.Net.MenuBase.Show(System.String,System.String)">
            <summary>
            Displays this menu relative to another element
            </summary>
            <param name="element">The element to align to</param>
            <param name="position">The Ext.Element.alignTo anchor position to use in aligning to the element</param>
        </member>
        <member name="M:Ext.Net.MenuBase.Show(System.String)">
            <summary>
            Displays this menu relative to another element
            </summary>
            <param name="element">The element to align to</param>
        </member>
        <member name="M:Ext.Net.MenuBase.ShowAt(System.Int32,System.Int32)">
            <summary>
            Displays this menu at a specific xy position
            </summary>
            <param name="x">Contains [x] value for the position at which to show the menu (coordinates are page-based)</param>
            <param name="y">Contains [y] value for the position at which to show the menu (coordinates are page-based)</param>
        </member>
        <member name="P:Ext.Net.MenuBase.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.EnableScrolling">
            <summary>
            Whenever a menu gets so long that the items won't fit the viewable area, it provides the user with an easy UI to scroll the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Floating">
            <summary>
            By default, a Menu configured as floating:true will be rendered as an Ext.Layer (an absolutely positioned, floating Component with zindex=15000). If configured as floating:false, the Menu may be used as child item of another Container instead of a free-floating Layer.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.AllowOtherMenus">
            <summary>
            True to allow multiple menus to be displayed at the same time (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.DefaultAlign">
            <summary>
            The default Ext.Element.alignTo anchor position value for this menu relative to its element of origin (defaults to \"tl-bl?\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.OffsetX">
            <summary>
            X offset in pixels by which to change the default Menu popup position after aligning according to the defaultAlign configuration. 
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.OffsetY">
            <summary>
            Y offset in pixels by which to change the default Menu popup position after aligning according to the defaultAlign configuration. 
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.IgnoreParentClicks">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.MinWidth">
            <summary>
            The minimum width of the menu in pixels (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.MaxHeight">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.ScrollIncrement">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.ShowSeparator">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Shadow">
            <summary>
            True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"sides\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.SubMenuAlign">
            <summary>
            The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to \"tl-tr?\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.DisableMenuNavigation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.EnableScrolling">
            <summary>
            Whenever a menu gets so long that the items won't fit the viewable area, it provides the user with an easy UI to scroll the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.Floating">
            <summary>
            By default, a Menu configured as floating:true will be rendered as an Ext.Layer (an absolutely positioned, floating Component with zindex=15000). If configured as floating:false, the Menu may be used as child item of another Container instead of a free-floating Layer.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.AllowOtherMenus">
            <summary>
            True to allow multiple menus to be displayed at the same time (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.DefaultAlign">
            <summary>
            The default Ext.Element.alignTo anchor position value for this menu relative to its element of origin (defaults to \"tl-bl?\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.OffsetX">
            <summary>
            X offset in pixels by which to change the default Menu popup position after aligning according to the defaultAlign configuration.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.OffsetY">
            <summary>
            Y offset in pixels by which to change the default Menu popup position after aligning according to the defaultAlign configuration.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.IgnoreParentClicks">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.MinWidth">
            <summary>
            The minimum width of the menu in pixels (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.MaxHeight">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.ScrollIncrement">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.ShowSeparator">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.Shadow">
            <summary>
            True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"sides\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.SubMenuAlign">
            <summary>
            The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to \"tl-tr?\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuBase.Config.DisableMenuNavigation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.DefaultType(System.String)">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel').
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.EnableScrolling(System.Boolean)">
            <summary>
            Whenever a menu gets so long that the items won't fit the viewable area, it provides the user with an easy UI to scroll the menu.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.Floating(System.Boolean)">
            <summary>
            By default, a Menu configured as floating:true will be rendered as an Ext.Layer (an absolutely positioned, floating Component with zindex=15000). If configured as floating:false, the Menu may be used as child item of another Container instead of a free-floating Layer.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.AllowOtherMenus(System.Boolean)">
            <summary>
            True to allow multiple menus to be displayed at the same time (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.DefaultAlign(System.String)">
            <summary>
            The default Ext.Element.alignTo anchor position value for this menu relative to its element of origin (defaults to \"tl-bl?\")
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.OffsetX(System.Int32)">
            <summary>
            X offset in pixels by which to change the default Menu popup position after aligning according to the defaultAlign configuration.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.OffsetY(System.Int32)">
            <summary>
            Y offset in pixels by which to change the default Menu popup position after aligning according to the defaultAlign configuration.
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.IgnoreParentClicks(System.Boolean)">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.MinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width of the menu in pixels (defaults to 120).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.MaxHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.ScrollIncrement(System.Int32)">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.ShowSeparator(System.Boolean)">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.Shadow(Ext.Net.ShadowMode)">
            <summary>
            True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"sides\")
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.SubMenuAlign(System.String)">
            <summary>
            The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to \"tl-tr?\")
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.DisableMenuNavigation(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.Hide(System.Boolean)">
            <summary>
            Hides this menu and optionally all parent menus
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.Show(System.String,System.String)">
            <summary>
            Displays this menu relative to another element
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.Show(System.String)">
            <summary>
            Displays this menu relative to another element
            </summary>
        </member>
        <member name="M:Ext.Net.MenuBase.Builder`2.ShowAt(System.Int32,System.Int32)">
            <summary>
            Displays this menu at a specific xy position
            </summary>
        </member>
        <member name="P:Ext.Net.ColorMenu.Palette">
            <summary>
            The ColorPalette object
            </summary>
        </member>
        <member name="P:Ext.Net.ColorMenu.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorMenu.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorMenu.Config.Palette">
            <summary>
            The ColorPalette object
            </summary>
        </member>
        <member name="P:Ext.Net.ColorMenu.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorMenu.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.SetValue(System.String,System.Boolean)">
            <summary>
            Set the value(s) of an item or items in the group. 
            </summary>
            <param name="id">name</param>
            <param name="value">value</param>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.SetValue(System.Boolean[])">
            <summary>
            Set the value(s) of an item or items in the group. 
            </summary>
            <param name="values">array of boolean values</param>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.SetValue(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Set the value(s) of an item or items in the group. 
            </summary>
            <param name="values">bject literal specifying item:value pairs</param>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.SetValue(System.String)">
            <summary>
            Set the value(s) of an item or items in the group. 
            </summary>
            <param name="values">comma separated string to set items with name to true (checked)</param>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.AllowBlank">
            <summary>
            False to validate that at least one item in the group is checked (defaults to true). If no items are selected at validation time, BlankText will be used as the error text.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.BlankText">
            <summary>
            Error text to display if the AllowBlank validation fails (defaults to 'You must select at least one item in this group')
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.ColumnsNumber">
            <summary>
            Specifies the number of columns to use when displaying grouped checkbox/radio controls using automatic layout.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.ColumnsWidths">
            <summary>
            You can also specify an array of column widths, mixing integer (fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will be rendered first, then any float values will be calculated as a percentage of the remaining space. Float values do not have to add up to 1 (100%) although if you want the controls to take up the entire field container you should do so.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.FireChangeOnLoad">
            <summary>
            Fire change event after rendering
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Vertical">
            <summary>
            True to distribute contained controls across columns, completely filling each column top to bottom before starting on the next column. The number of controls in each column will be automatically calculated to keep columns as even as possible. The default value is false, so that controls will be added to columns one at a time, completely filling each row left to right before starting on the next row.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Config.AllowBlank">
            <summary>
            False to validate that at least one item in the group is checked (defaults to true). If no items are selected at validation time, BlankText will be used as the error text.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Config.BlankText">
            <summary>
            Error text to display if the AllowBlank validation fails (defaults to 'You must select at least one item in this group')
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Config.ColumnsNumber">
            <summary>
            Specifies the number of columns to use when displaying grouped checkbox/radio controls using automatic layout.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Config.ColumnsWidths">
            <summary>
            You can also specify an array of column widths, mixing integer (fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will be rendered first, then any float values will be calculated as a percentage of the remaining space. Float values do not have to add up to 1 (100%) although if you want the controls to take up the entire field container you should do so.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Config.FireChangeOnLoad">
            <summary>
            Fire change event after rendering
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupBase.Config.Vertical">
            <summary>
            True to distribute contained controls across columns, completely filling each column top to bottom before starting on the next column. The number of controls in each column will be automatically calculated to keep columns as even as possible. The default value is false, so that controls will be added to columns one at a time, completely filling each row left to right before starting on the next row.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.Builder`2.AllowBlank(System.Boolean)">
            <summary>
            False to validate that at least one item in the group is checked (defaults to true). If no items are selected at validation time, BlankText will be used as the error text.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.Builder`2.BlankText(System.String)">
            <summary>
            Error text to display if the AllowBlank validation fails (defaults to 'You must select at least one item in this group')
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.Builder`2.ColumnsNumber(System.Int32)">
            <summary>
            Specifies the number of columns to use when displaying grouped checkbox/radio controls using automatic layout.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.Builder`2.ColumnsWidths(System.String[])">
            <summary>
            You can also specify an array of column widths, mixing integer (fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will be rendered first, then any float values will be calculated as a percentage of the remaining space. Float values do not have to add up to 1 (100%) although if you want the controls to take up the entire field container you should do so.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.Builder`2.FireChangeOnLoad(System.Boolean)">
            <summary>
            Fire change event after rendering
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroupBase.Builder`2.Vertical(System.Boolean)">
            <summary>
            True to distribute contained controls across columns, completely filling each column top to bottom before starting on the next column. The number of controls in each column will be automatically calculated to keep columns as even as possible. The default value is false, so that controls will be added to columns one at a time, completely filling each row left to right before starting on the next row.
            </summary>
        </member>
        <member name="T:Ext.Net.Cell">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.LayoutItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutItem.Items">
            <summary>
            Gets the Items Collection
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutItem.Config.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Ext.Net.Cell.RowSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Cell.ColSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Cell.CellCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Cell.Config.RowSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Cell.Config.ColSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Cell.Config.CellCls">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Cell.Builder.RowSpan(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Cell.Builder.ColSpan(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Cell.Builder.CellCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Anchor">
            <summary>
            Tells the layout how an item should be anchored to the container. items added to an AnchorLayout accept an anchoring-specific config property of anchor which is a string containing two values: the horizontal anchor value and the vertical anchor value (for example, '100% 50%').
            </summary>
        </member>
        <member name="P:Ext.Net.Anchor.IsFormField">
            <summary>
            True if component should be rendered as a Form Field with a Field Label and Label separator (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Anchor.Horizontal">
            <summary>
            Horizontal Anchor value. Can be a Percentage (1-100%), an Offset (Any positive or negative integer value), a Sides value (Valid values are 'right' (or 'r') and 'bottom' (or 'b').).
            </summary>
        </member>
        <member name="P:Ext.Net.Anchor.Vertical">
            <summary>
            Vertical Anchor value. Can be a Percentage (1-100%), an Offset (Any positive or negative integer value), a Sides value (Valid values are 'right' (or 'r') and 'bottom' (or 'b').).
            </summary>
        </member>
        <member name="P:Ext.Net.Anchor.Config.IsFormField">
            <summary>
            True if component should be rendered as a Form Field with a Field Label and Label separator (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Anchor.Config.Horizontal">
            <summary>
            Horizontal Anchor value. Can be a Percentage (1-100%), an Offset (Any positive or negative integer value), a Sides value (Valid values are 'right' (or 'r') and 'bottom' (or 'b').).
            </summary>
        </member>
        <member name="P:Ext.Net.Anchor.Config.Vertical">
            <summary>
            Vertical Anchor value. Can be a Percentage (1-100%), an Offset (Any positive or negative integer value), a Sides value (Valid values are 'right' (or 'r') and 'bottom' (or 'b').).
            </summary>
        </member>
        <member name="M:Ext.Net.Anchor.Builder.IsFormField(System.Boolean)">
            <summary>
            True if component should be rendered as a Form Field with a Field Label and Label separator (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Anchor.Builder.Horizontal(System.String)">
            <summary>
            Horizontal Anchor value. Can be a Percentage (1-100%), an Offset (Any positive or negative integer value), a Sides value (Valid values are 'right' (or 'r') and 'bottom' (or 'b').).
            </summary>
        </member>
        <member name="M:Ext.Net.Anchor.Builder.Vertical(System.String)">
            <summary>
            Vertical Anchor value. Can be a Percentage (1-100%), an Offset (Any positive or negative integer value), a Sides value (Valid values are 'right' (or 'r') and 'bottom' (or 'b').).
            </summary>
        </member>
        <member name="T:Ext.Net.RowNumbererColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowNumbererColumn.Width">
            <summary>
            (optional) The initial width in pixels of the column. Using this instead of Ext.grid.GridPanel.autoSizeColumns is more efficient.
            </summary>
        </member>
        <member name="P:Ext.Net.RowNumbererColumn.RowSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowNumbererColumn.Config.Width">
            <summary>
            (optional) The initial width in pixels of the column. Using this instead of Ext.grid.Grid.autoSizeColumns is more efficient.
            </summary>
        </member>
        <member name="P:Ext.Net.RowNumbererColumn.Config.RowSpan">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowNumbererColumn.Builder.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            (optional) The initial width in pixels of the column. Using this instead of Ext.grid.Grid.autoSizeColumns is more efficient.
            </summary>
        </member>
        <member name="M:Ext.Net.RowNumbererColumn.Builder.RowSpan(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FieldListeners.Blur">
            <summary>
            Fires when this field loses input focus.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldListeners.Change">
            <summary>
            Fires just before the field blurs if the field value has changed.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldListeners.Focus">
            <summary>
            Fires when this field receives input focus.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldListeners.Invalid">
            <summary>
            Fires after the field has been marked as invalid.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldListeners.SpecialKey">
            <summary>
            Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldListeners.Valid">
            <summary>
            Fires after the field has been validated with no errors.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupListeners.Change">
            <summary>
            Fires when the state of a child checkbox changes.
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroupListeners.Change">
            <summary>
            Fires when the state of a child radio changes.
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.ZIndex">
            <summary>
            Editor z-index
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.Alignment">
            <summary>
            The position to align to (see Ext.Element.alignTo for more details, defaults to "c-c?").
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.AutoSize">
            <summary>
            Size for the editor to automatically adopt the size of the underlying field, "Width" to adopt the width only, or "Height" to adopt the height only (defaults to Width)
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.AllowBlur">
            <summary>
            True to complete edit complete the editing process if in edit mode when the field is blurred. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.CancelOnBlur">
            <summary>
            True to cancel the edit when the blur event is fired (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.IgnoreNoChange">
            <summary>
            True to skip the edit completion process (no save, no events fired) if the user completes an edit and the value has not changed (defaults to false). Applies only to string values - edits for other data types will never be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.GridEditorOptions.Offsets">
            <summary>
            The offsets to use when aligning. Defaults to [0, 0].
            </summary>
        </member>
        <member name="T:Ext.Net.TriggerFieldBase">
            <summary>
            Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default). The trigger has no default action, so you must assign a function to implement the trigger click handler by overriding onTriggerClick. You can create a TriggerField directly, as it renders exactly like a combobox for which you can provide a custom implementation.
            </summary>
        </member>
        <member name="T:Ext.Net.TextFieldBase">
            <summary>
            Base Class for all Text Field Web Controls.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Reset">
            <summary>
            Resets the current field value to the originally-loaded value and clears any validation messages. Also adds emptyText and emptyClass if the original value was blank.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.AutoSize">
            <summary>
            Automatically grows the field to accomodate the width of the text up to the maximum field width allowed. This only takes effect if grow = true, and fires the autosize event.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.SelectText">
            <summary>
            Selects text in this field
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.SelectText(System.Int32)">
            <summary>
            Selects text in this field
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.SelectText(System.Int32,System.Int32)">
            <summary>
            Selects text in this field
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.SetIconClass(System.String)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.SetMaskRe(System.String)">
            <summary>
            Sets an input mask regular expression that will be used to filter keystrokes that don't match (defaults to null).
            </summary>
            <param name="maskRe"></param>
        </member>
        <member name="M:Ext.Net.TextFieldBase.SetIconClass(Ext.Net.Icon)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.AutoCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.AllowBlank">
            <summary>
            False to validate that the value length > 0 (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.BlankText">
            <summary>
            Error text to display if the allow blank validation fails (defaults to 'This field is required').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.DisableKeyFilter">
            <summary>
            True to disable input keystroke filtering (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.EmptyClass">
            <summary>
            The CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.EmptyText">
            <summary>
            The default text to display in an empty field (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.EnableKeyEvents">
            <summary>
            True to enable the proxying of key events for the HTML input field (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Grow">
            <summary>
            True if this field should automatically grow and shrink to its content (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.GrowMax">
            <summary>
            The maximum width to allow when grow = true (defaults to 800).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.GrowMin">
            <summary>
            The minimum width to allow when grow = true (defaults to 30).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.InputType">
            <summary>
            The type attribute for input fields.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.MaskRe">
            <summary>
            An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.MaxLength">
            <summary>
            Maximum input field length allowed (defaults to Number.MAX_VALUE).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.MaxLengthText">
            <summary>
            Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.MinLength">
            <summary>
            Minimum input field length required (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.MinLengthText">
            <summary>
            Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Regex">
            <summary>
            A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using RegexText.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.RegexText">
            <summary>
            The error text to display if regex is used and the test fails during validation (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.SelectOnFocus">
            <summary>
            True to automatically select any existing field text when the field receives input focus (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Truncate">
            <summary>
            If MaxLength property has been set, more characters than the MaxLength can be entered if Truncate='false'. If 'false', then a validation error is rendered if more characters entered (or pasted) than the MaxLength property. Default value is 'true'.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Validator">
            <summary>
            A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Vtype">
            <summary>
            A validation type name as defined in Ext.form.VTypes (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.VtypeText">
            <summary>
            A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored.
            </summary>
        </member>
        <member name="E:Ext.Net.TextFieldBase.TextChanged">
            <summary>
            Fires when the Text property has been changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Icon">
            <summary>
            The icon to use in the input field. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this field.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.AutoCreate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.AllowBlank">
            <summary>
            False to validate that the value length > 0 (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.BlankText">
            <summary>
            Error text to display if the allow blank validation fails (defaults to 'This field is required').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.DisableKeyFilter">
            <summary>
            True to disable input keystroke filtering (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.EmptyClass">
            <summary>
            The CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.EmptyText">
            <summary>
            The default text to display in an empty field (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.EnableKeyEvents">
            <summary>
            True to enable the proxying of key events for the HTML input field (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Grow">
            <summary>
            True if this field should automatically grow and shrink to its content (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.GrowMax">
            <summary>
            The maximum width to allow when grow = true (defaults to 800).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.GrowMin">
            <summary>
            The minimum width to allow when grow = true (defaults to 30).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.InputType">
            <summary>
            The type attribute for input fields.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.MaskRe">
            <summary>
            An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.MaxLength">
            <summary>
            Maximum input field length allowed (defaults to Number.MAX_VALUE).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.MaxLengthText">
            <summary>
            Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.MinLength">
            <summary>
            Minimum input field length required (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.MinLengthText">
            <summary>
            Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Regex">
            <summary>
            A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using RegexText.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.RegexText">
            <summary>
            The error text to display if regex is used and the test fails during validation (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.SelectOnFocus">
            <summary>
            True to automatically select any existing field text when the field receives input focus (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Truncate">
            <summary>
            If MaxLength property has been set, more characters than the MaxLength can be entered if Truncate='false'. If 'false', then a validation error is rendered if more characters entered (or pasted) than the MaxLength property. Default value is 'true'.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Validator">
            <summary>
            A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Vtype">
            <summary>
            A validation type name as defined in Ext.form.VTypes (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.VtypeText">
            <summary>
            A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.Icon">
            <summary>
            The icon to use in the input field. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldBase.Config.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this field.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Text(System.String)">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.NullValue(System.Object)">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.AutoCreate(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.AllowBlank(System.Boolean)">
            <summary>
            False to validate that the value length > 0 (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.BlankText(System.String)">
            <summary>
            Error text to display if the allow blank validation fails (defaults to 'This field is required').
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.DisableKeyFilter(System.Boolean)">
            <summary>
            True to disable input keystroke filtering (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.EmptyClass(System.String)">
            <summary>
            The CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.EmptyText(System.String)">
            <summary>
            The default text to display in an empty field (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.EnableKeyEvents(System.Boolean)">
            <summary>
            True to enable the proxying of key events for the HTML input field (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Grow(System.Boolean)">
            <summary>
            True if this field should automatically grow and shrink to its content (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.GrowMax(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum width to allow when grow = true (defaults to 800).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.GrowMin(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width to allow when grow = true (defaults to 30).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.InputType(Ext.Net.InputType)">
            <summary>
            The type attribute for input fields.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.MaskRe(System.String)">
            <summary>
            An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.MaxLength(System.Int32)">
            <summary>
            Maximum input field length allowed (defaults to Number.MAX_VALUE).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.MaxLengthText(System.String)">
            <summary>
            Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.MinLength(System.Int32)">
            <summary>
            Minimum input field length required (defaults to 0).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.MinLengthText(System.String)">
            <summary>
            Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Regex(System.String)">
            <summary>
            A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using RegexText.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.RegexText(System.String)">
            <summary>
            The error text to display if regex is used and the test fails during validation (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.SelectOnFocus(System.Boolean)">
            <summary>
            True to automatically select any existing field text when the field receives input focus (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Truncate(System.Boolean)">
            <summary>
            If MaxLength property has been set, more characters than the MaxLength can be entered if Truncate='false'. If 'false', then a validation error is rendered if more characters entered (or pasted) than the MaxLength property. Default value is 'true'.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Validator(System.String)">
            <summary>
            A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Vtype(System.String)">
            <summary>
            A validation type name as defined in Ext.form.VTypes (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.VtypeText(System.String)">
            <summary>
            A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the input field. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.IconCls(System.String)">
            <summary>
            A css class which sets a background image to be used as the icon for this field.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.Reset">
            <summary>
            Resets the current field value to the originally-loaded value and clears any validation messages. Also adds emptyText and emptyClass if the original value was blank.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.AutoSize">
            <summary>
            Automatically grows the field to accomodate the width of the text up to the maximum field width allowed. This only takes effect if grow = true, and fires the autosize event.
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.SelectText">
            <summary>
            Selects text in this field
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.SelectText(System.Int32)">
            <summary>
            Selects text in this field
            </summary>
        </member>
        <member name="M:Ext.Net.TextFieldBase.Builder`2.SelectText(System.Int32,System.Int32)">
            <summary>
            Selects text in this field
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.ShowTrigger(System.Int32)">
            <summary>
            Show a trigger
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.ConcealTrigger(System.Int32)">
            <summary>
            Hide a trigger
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.HideTrigger">
            <summary>
            True to hide the trigger element and display only the base text field (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Editable">
            <summary>
            False to prevent the user from typing text directly into the field, the field will only respond to a click on the trigger to set the value. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.FirstBaseTrigger">
            <summary>
            True to show base trigger first
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.TriggerClass">
            <summary>
            A CSS class to apply to the trigger.
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.HideTrigger(System.Boolean)">
            <summary>
            True to hide the trigger element and display only the base text field (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.Editable(System.Boolean)">
            <summary>
            False to prevent the user from typing text directly into the field, the field will only respond to a click on the trigger to set the value. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.FirstBaseTrigger(System.Boolean)">
            <summary>
            True to show base trigger first
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.TriggerClass(System.String)">
            <summary>
            A CSS class to apply to the trigger.
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.TriggerIcon(Ext.Net.TriggerIcon)">
            <summary>
            The icon to use in the trigger.
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.ShowTrigger(System.Int32)">
            <summary>
            Show a trigger
            </summary>
        </member>
        <member name="M:Ext.Net.TriggerFieldBase.Builder`2.ConcealTrigger(System.Int32)">
            <summary>
            Hide a trigger
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Config.Triggers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Config.HideTrigger">
            <summary>
            True to hide the trigger element and display only the base text field (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Config.Editable">
            <summary>
            False to prevent the user from typing text directly into the field, the field will only respond to a click on the trigger to set the value. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Config.FirstBaseTrigger">
            <summary>
            True to show base trigger first
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Config.TriggerClass">
            <summary>
            A CSS class to apply to the trigger.
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerFieldBase.Config.TriggerIcon">
            <summary>
            The icon to use in the trigger.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseTriggerField.Config.TriggerClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseTriggerField.Builder`2.TriggerClass(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Viewport">
            <summary>
            A specialized content Container representing the viewable application area (the browser viewport).
            </summary>
        </member>
        <member name="T:Ext.Net.ViewportBase">
            <summary>
            A specialized container representing the viewable application area (the browser viewport).
            </summary>
        </member>
        <member name="P:Ext.Net.ViewportBase.ContentEl">
            <summary>
            The id of an existing HTML node to use as the panel's body content (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Viewport.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Viewport.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Viewport.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Viewport.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.BuilderFactory.ToString">
            PLACEHOLDER: Implemented as partial in each TBuilder.
        </member>
        <member name="T:Ext.Net.ProgressBar">
            <summary>
            An updateable progress bar component. The progress bar supports two different modes: manual and automatic.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Reset">
            <summary>
            Resets the progress bar value to 0 and text to empty string. If hide = true, the progress bar will also be hidden (using the hideMode property internally).
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Reset(System.Boolean)">
            <summary>
            Resets the progress bar value to 0 and text to empty string. If hide = true, the progress bar will also be hidden (using the hideMode property internally).
            </summary>
            <param name="hide">True to hide the progress bar</param>
        </member>
        <member name="M:Ext.Net.ProgressBar.SyncProgressBar">
            <summary>
            Synchronizes the inner bar width to the proper proportion of the total componet width based on the current progress value. This will be called automatically when the ProgressBar is resized by a layout, but if it is rendered auto width, this method can be called from another resize handler to sync the ProgressBar if necessary.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.UpdateProgress(System.Single)">
            <summary>
            Updates the progress bar value, and optionally its text. If the text argument is not specified, any existing text value will be unchanged. To blank out existing text, pass ''. Note that even if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for determining when the progress is complete and calling reset to clear and/or hide the control.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.UpdateProgress(System.Single,System.String)">
            <summary>
            Updates the progress bar value, and optionally its text. If the text argument is not specified, any existing text value will be unchanged. To blank out existing text, pass ''. Note that even if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for determining when the progress is complete and calling reset to clear and/or hide the control.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.UpdateText">
            <summary>
            Updates the progress bar text. If specified, textEl will be updated, otherwise the progress bar itself will display the updated text.
            </summary>
            <param name="text">The string to display in the progress text element</param>
        </member>
        <member name="M:Ext.Net.ProgressBar.UpdateText(System.String)">
            <summary>
            Updates the progress bar text. If specified, textEl will be updated, otherwise the progress bar itself will display the updated text.
            </summary>
            <param name="text">The string to display in the progress text element</param>
        </member>
        <member name="M:Ext.Net.ProgressBar.Wait">
            <summary>
            Initiates an auto-updating progress bar. A duration can be specified, in which case the progress bar will automatically reset after a fixed amount of time and optionally call a callback function if specified. If no duration is passed in, then the progress bar will run indefinitely and must be manually cleared by calling reset.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Wait(Ext.Net.WaitConfig)">
            <summary>
            Initiates an auto-updating progress bar. A duration can be specified, in which case the progress bar will automatically reset after a fixed amount of time and optionally call a callback function if specified. If no duration is passed in, then the progress bar will run indefinitely and must be manually cleared by calling reset.
            </summary>
            <param name="config">Configuration options</param>
        </member>
        <member name="P:Ext.Net.ProgressBar.BaseCls">
            <summary>
            The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Text">
            <summary>
            The progress bar text (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.TextEl">
            <summary>
            The element to render the progress text to (defaults to the progress bar's internal text element)
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Value">
            <summary>
            A floating point value between 0 and 1 (e.g., .5, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.BaseCls(System.String)">
            <summary>
            The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.Text(System.String)">
            <summary>
            The progress bar text (defaults to '')
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.TextEl(System.String)">
            <summary>
            The element to render the progress text to (defaults to the progress bar's internal text element)
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.Value(System.Single)">
            <summary>
            A floating point value between 0 and 1 (e.g., .5, defaults to 0)
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.Reset">
            <summary>
            Resets the progress bar value to 0 and text to empty string. If hide = true, the progress bar will also be hidden (using the hideMode property internally).
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.Reset(System.Boolean)">
            <summary>
            Resets the progress bar value to 0 and text to empty string. If hide = true, the progress bar will also be hidden (using the hideMode property internally).
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.SyncProgressBar">
            <summary>
            Synchronizes the inner bar width to the proper proportion of the total componet width based on the current progress value. This will be called automatically when the ProgressBar is resized by a layout, but if it is rendered auto width, this method can be called from another resize handler to sync the ProgressBar if necessary.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.UpdateProgress(System.Single,System.String)">
            <summary>
            Updates the progress bar value, and optionally its text. If the text argument is not specified, any existing text value will be unchanged. To blank out existing text, pass ''. Note that even if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for determining when the progress is complete and calling reset to clear and/or hide the control.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.UpdateText">
            <summary>
            Updates the progress bar text. If specified, textEl will be updated, otherwise the progress bar itself will display the updated text.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.UpdateText(System.String)">
            <summary>
            Updates the progress bar text. If specified, textEl will be updated, otherwise the progress bar itself will display the updated text.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.Wait">
            <summary>
            Initiates an auto-updating progress bar. A duration can be specified, in which case the progress bar will automatically reset after a fixed amount of time and optionally call a callback function if specified. If no duration is passed in, then the progress bar will run indefinitely and must be manually cleared by calling reset.
            </summary>
        </member>
        <member name="M:Ext.Net.ProgressBar.Builder.Wait(Ext.Net.WaitConfig)">
            <summary>
            Updates the progress bar text. If specified, textEl will be updated, otherwise the progress bar itself will display the updated text.
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Config.BaseCls">
            <summary>
            The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Config.Text">
            <summary>
            The progress bar text (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Config.TextEl">
            <summary>
            The element to render the progress text to (defaults to the progress bar's internal text element)
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Config.Value">
            <summary>
            A floating point value between 0 and 1 (e.g., .5, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBar.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.ObjectHolder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ObjectHolder.UpdateData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ObjectHolder.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ObjectHolder.Builder.UpdateData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ObjectHolder.Config.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.MultiCombo">
            <summary>
            ComboBox with multi item selection.
            </summary>
        </member>
        <member name="T:Ext.Net.ComboBoxBase`1">
            <summary>
            A combobox control with support for autocomplete, remote-loading, paging and many other features.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.ClearValue">
            <summary>
            Clears any text/value currently set in the field
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Collapse">
            <summary>
            Hides the dropdown list if it is currently expanded. Fires the collapse event on completion.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.DoQuery(System.String,System.Boolean)">
            <summary>
            Execute a query to filter the dropdown list. Fires the beforequery event prior to performing the query allowing the query action to be canceled if needed.
            </summary>
            <param name="query">The SQL query to execute</param>
            <param name="forceAll">true to force the query to execute even if there are currently fewer characters in the field than the minimum specified by the minChars config option. It also clears any filter previously saved in the current store </param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.DoQuery(System.String)">
            <summary>
            Execute a query to filter the dropdown list. Fires the beforequery event prior to performing the query allowing the query action to be canceled if needed.
            </summary>
            <param name="query">The SQL query to execute</param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Expand">
            <summary>
            Expands the dropdown list if it is currently hidden. Fires the expand event on completion.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Select(System.Int32,System.Boolean)">
            <summary>
            Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
            <param name="index">The zero-based index of the list item to select</param>
            <param name="scrollIntoView">False to prevent the dropdown list from autoscrolling to display the selected item if it is not currently in view</param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Select(System.Int32)">
            <summary>
            Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
            <param name="index">The zero-based index of the list item to select</param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.SelectByValue(System.String,System.Boolean)">
            <summary>
            Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
            <param name="value">The data value of the item to select</param>
            <param name="scrollIntoView">False to prevent the dropdown list from autoscrolling to display the selected item if it is not currently in view</param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.SelectByValue(System.String)">
            <summary>
            Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
            <param name="value">The data value of the item to select</param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.InsertRecord(System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Insert record
            </summary>
            <param name="index"></param>
            <param name="values"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.AddRecord(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add record
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.InsertItem(System.Int32,System.String,System.Object)">
            <summary>
            Insert item
            </summary>
            <param name="index"></param>
            <param name="text"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.AddItem(System.String,System.Object)">
            <summary>
            Add item
            </summary>
            <param name="text"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.RemoveByField(System.String,System.Object)">
            <summary>
            Remove by field
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.RemoveByIndex(System.Int32)">
            <summary>
            Remove by index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.RemoveByValue(System.String)">
            <summary>
            Remove by value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.RemoveByText(System.String)">
            <summary>
            Remove by text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.SetValueAndFireSelect(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.SetInitValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.AllQuery">
            <summary>
            The text query to send to the server to return all records for the list with no filtering (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ClearFilterOnReset">
            <summary>
            true to clear any filters on the store (when in local mode) when reset is called (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.DisplayField">
            <summary>
            The underlying data field name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'text' if transforming a select).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ForceSelection">
            <summary>
            True to restrict the selected value to one of the values in the list, false to allow the user to set arbitrary text into the field (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.HandleHeight">
            <summary>
            The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.HiddenId">
            <summary>
            If hiddenName is specified, hiddenId can also be provided to give the hidden field a unique id (defaults to the hiddenName). The hiddenId and combo id should be different, since no two DOM nodes should share the same id.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.HiddenValue">
            <summary>
            Sets the initial value of the hidden field if hiddenName is specified to contain the selected valueField, from the Store. Defaults to the configured value.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.HiddenName">
            <summary>
            If specified, a hidden form field with this name is dynamically generated to store the field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically post during a form submission.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ItemSelector">
            <summary>
            This setting is required if a custom XTemplate has been specified in tpl which assigns a class other than 'x-combo-list-item' to dropdown list items. A simple CSS selector (e.g. div.some-class or span:first-child) that will be used to determine what nodes the DataView which handles the dropdown display will be working with.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.LazyInit">
            <summary>
            True to not initialize the list for this combo until the field is focused. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.LazyRender">
            <summary>
            True to prevent the ComboBox from rendering until requested (should always be used when rendering into an Ext.Editor, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.FireSelectOnLoad">
            <summary>
            True to fire select event after setValue on page load
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ListAlign">
            <summary>
            A valid anchor position value. See Ext.Element.alignTo for details on supported anchor positions (defaults to 'tl-bl').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ListClass">
            <summary>
            CSS class to apply to the dropdown list element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ListWidth">
            <summary>
            The width in pixels of the dropdown list (defaults to the width of the ComboBox field).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.LoadingText">
            <summary>
            The text to display in the dropdown list while data is loading. Only applies when mode = 'remote' (defaults to 'Loading...').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.MaxHeight">
            <summary>
            The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.MinHeight">
            <summary>
            The minimum height in pixels of the dropdown list when the list is constrained by its distance to the viewport edges (defaults to 90).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.MinChars">
            <summary>
            The minimum number of characters the user must type before autocomplete and typeahead activate (defaults to 4 if remote or 0 if local, does not apply if editable = false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.MinListWidth">
            <summary>
            The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if listWidth has a higher value).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Mode">
            <summary>
            Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.PageSize">
            <summary>
            If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the filter queries will execute with page addToStart and limit parameters. Only applies when mode = 'remote' (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.QueryDelay">
            <summary>
            The length of time in milliseconds to delay between the addToStart of typing and sending the query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.QueryParam">
            <summary>
            Name of the query as it will be passed on the querystring (defaults to 'query').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Resizable">
            <summary>
            True to add a resize handle to the bottom of the dropdown list (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.SelectedClass">
            <summary>
            CSS class to apply to the selected items in the dropdown list (defaults to 'x-combo-selected').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Shadow">
            <summary>
            'Sides' for the default effect, 'Frame' for 4-way shadow, and 'Drop' for bottom-right.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.EnableShadow">
            <summary>
            true for the default effect
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.SelectOnFocus">
            <summary>
            True to automatically select any existing field text when the field receives input focus (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Template">
            <summary>
            The template string to use to display each item in the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Transform">
            <summary>
            The ID of an existing select to convert to a ComboBox.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Title">
            <summary>
            If supplied, a header element is created containing this text and added into the top of the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.TriggerAction">
            <summary>
            The action to execute when the trigger field is activated. Use 'All' to run the query specified by the allQuery config option (defaults to 'Query').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.TypeAhead">
            <summary>
            True to populate and autoselect the remainder of the text being typed after a configurable delay (typeAheadDelay) if it matches a known value (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.TypeAheadDelay">
            <summary>
            The length of time in milliseconds to wait until the typeahead text is displayed if TypeAhead = true (defaults to 250).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ValueField">
            <summary>
            The underlying data value name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'value' if transforming a select) Note: use of a valueField requires the user to make a selection in order for a value to be mapped.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.ValueNotFoundText">
            <summary>
            When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Store">
            <summary>
             The data store to use.
            </summary>
        </member>
        <member name="E:Ext.Net.ComboBoxBase`1.ValueChanged">
            <summary>
            Fires when the Item property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.GetListParent">
            <summary>
            Returns the element used to house this ComboBox's pop-up list. Defaults to the document body.
            A custom implementation may be provided as a configuration option if the floating list needs to be rendered to a different Element. 
            An example might be rendering the list inside a Menu so that clicking the list does not hide the Menu:
            
            <GetListParent Handler="return this.el.up('.x-menu');" />
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.AllQuery(System.String)">
            <summary>
            The text query to send to the server to return all records for the list with no filtering (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ClearFilterOnReset(System.Boolean)">
            <summary>
            true to clear any filters on the store (when in local mode) when reset is called (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.DisplayField(System.String)">
            <summary>
            The underlying data field name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'text' if transforming a select).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ForceSelection(System.Boolean)">
            <summary>
            True to restrict the selected value to one of the values in the list, false to allow the user to set arbitrary text into the field (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.HandleHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.HiddenId(System.String)">
            <summary>
            If hiddenName is specified, hiddenId can also be provided to give the hidden field a unique id (defaults to the hiddenName). The hiddenId and combo id should be different, since no two DOM nodes should share the same id.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.HiddenValue(System.String)">
            <summary>
            Sets the initial value of the hidden field if hiddenName is specified to contain the selected valueField, from the Store. Defaults to the configured value.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.HiddenName(System.String)">
            <summary>
            If specified, a hidden form field with this name is dynamically generated to store the field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically post during a form submission.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ItemSelector(System.String)">
            <summary>
            This setting is required if a custom XTemplate has been specified in tpl which assigns a class other than 'x-combo-list-item' to dropdown list items. A simple CSS selector (e.g. div.some-class or span:first-child) that will be used to determine what nodes the DataView which handles the dropdown display will be working with.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.LazyInit(System.Boolean)">
            <summary>
            True to not initialize the list for this combo until the field is focused. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.LazyRender(System.Boolean)">
            <summary>
            True to prevent the ComboBox from rendering until requested (should always be used when rendering into an Ext.Editor, defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.FireSelectOnLoad(System.Boolean)">
            <summary>
            True to fire select event after setValue on page load
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ListAlign(System.String)">
            <summary>
            A valid anchor position value. See Ext.Element.alignTo for details on supported anchor positions (defaults to 'tl-bl').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ListClass(System.String)">
            <summary>
            CSS class to apply to the dropdown list element (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ListWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The width in pixels of the dropdown list (defaults to the width of the ComboBox field).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.LoadingText(System.String)">
            <summary>
            The text to display in the dropdown list while data is loading. Only applies when mode = 'remote' (defaults to 'Loading...').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.MaxHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.MinHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum height in pixels of the dropdown list when the list is constrained by its distance to the viewport edges (defaults to 90).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.MinChars(System.Int32)">
            <summary>
            The minimum number of characters the user must type before autocomplete and typeahead activate (defaults to 4 if remote or 0 if local, does not apply if editable = false).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.MinListWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if listWidth has a higher value).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Mode(Ext.Net.DataLoadMode)">
            <summary>
            Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.PageSize(System.Int32)">
            <summary>
            If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the filter queries will execute with page addToStart and limit parameters. Only applies when mode = 'remote' (defaults to 0).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.QueryDelay(System.Int32)">
            <summary>
            The length of time in milliseconds to delay between the addToStart of typing and sending the query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.QueryParam(System.String)">
            <summary>
            Name of the query as it will be passed on the querystring (defaults to 'query').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Resizable(System.Boolean)">
            <summary>
            True to add a resize handle to the bottom of the dropdown list (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SelectedClass(System.String)">
            <summary>
            CSS class to apply to the selected items in the dropdown list (defaults to 'x-combo-selected').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Shadow(Ext.Net.ShadowMode)">
            <summary>
            'Sides' for the default effect, 'Frame' for 4-way shadow, and 'Drop' for bottom-right.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.EnableShadow(System.Boolean)">
            <summary>
            true for the default effect
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SelectOnFocus(System.Boolean)">
            <summary>
            True to automatically select any existing field text when the field receives input focus (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Transform(System.String)">
            <summary>
            The ID of an existing select to convert to a ComboBox.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Title(System.String)">
            <summary>
            If supplied, a header element is created containing this text and added into the top of the dropdown list.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.TriggerAction(Ext.Net.TriggerAction)">
            <summary>
            The action to execute when the trigger field is activated. Use 'All' to run the query specified by the allQuery config option (defaults to 'Query').
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.TypeAhead(System.Boolean)">
            <summary>
            True to populate and autoselect the remainder of the text being typed after a configurable delay (typeAheadDelay) if it matches a known value (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.TypeAheadDelay(System.Int32)">
            <summary>
            The length of time in milliseconds to wait until the typeahead text is displayed if TypeAhead = true (defaults to 250).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ValueField(System.String)">
            <summary>
            The underlying data value name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'value' if transforming a select) Note: use of a valueField requires the user to make a selection in order for a value to be mapped.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ValueNotFoundText(System.String)">
            <summary>
            When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.StoreID(System.String)">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.AlwaysMergeItems(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.TriggerAutoPostBack(System.Boolean)">
            <summary>
            Trigger AutoPostBack
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.AutoPostBackEvent(Ext.Net.ComboAutoPostBackEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.ClearValue">
            <summary>
            Clears any text/value currently set in the field
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Collapse">
            <summary>
            Hides the dropdown list if it is currently expanded. Fires the collapse event on completion.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.DoQuery(System.String,System.Boolean)">
            <summary>
            Execute a query to filter the dropdown list. Fires the beforequery event prior to performing the query allowing the query action to be canceled if needed.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.DoQuery(System.String)">
            <summary>
            Execute a query to filter the dropdown list. Fires the beforequery event prior to performing the query allowing the query action to be canceled if needed.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Expand">
            <summary>
            Expands the dropdown list if it is currently hidden. Fires the expand event on completion.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Select(System.Int32,System.Boolean)">
            <summary>
            Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.Select(System.Int32)">
            <summary>
            Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SelectByValue(System.String,System.Boolean)">
            <summary>
            Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SelectByValue(System.String)">
            <summary>
            Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire. The store must be loaded and the list expanded for this function to work, otherwise use setValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.InsertRecord(System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Insert record
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.AddRecord(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add record
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.InsertItem(System.Int32,System.String,System.Object)">
            <summary>
            Insert item
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.AddItem(System.String,System.Object)">
            <summary>
            Add item
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.RemoveByField(System.String,System.Object)">
            <summary>
            Remove by field
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.RemoveByIndex(System.Int32)">
            <summary>
            Remove by index
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.RemoveByValue(System.String)">
            <summary>
            Remove by value
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.RemoveByText(System.String)">
            <summary>
            Remove by text
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SetValueAndFireSelect(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.ComboBoxBase`1.Builder`2.SetInitValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.AllQuery">
            <summary>
            The text query to send to the server to return all records for the list with no filtering (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ClearFilterOnReset">
            <summary>
            true to clear any filters on the store (when in local mode) when reset is called (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.DisplayField">
            <summary>
            The underlying data field name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'text' if transforming a select).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ForceSelection">
            <summary>
            True to restrict the selected value to one of the values in the list, false to allow the user to set arbitrary text into the field (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.HandleHeight">
            <summary>
            The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.HiddenId">
            <summary>
            If hiddenName is specified, hiddenId can also be provided to give the hidden field a unique id (defaults to the hiddenName). The hiddenId and combo id should be different, since no two DOM nodes should share the same id.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.HiddenValue">
            <summary>
            Sets the initial value of the hidden field if hiddenName is specified to contain the selected valueField, from the Store. Defaults to the configured value.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.HiddenName">
            <summary>
            If specified, a hidden form field with this name is dynamically generated to store the field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically post during a form submission.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ItemSelector">
            <summary>
            This setting is required if a custom XTemplate has been specified in tpl which assigns a class other than 'x-combo-list-item' to dropdown list items. A simple CSS selector (e.g. div.some-class or span:first-child) that will be used to determine what nodes the DataView which handles the dropdown display will be working with.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.LazyInit">
            <summary>
            True to not initialize the list for this combo until the field is focused. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.LazyRender">
            <summary>
            True to prevent the ComboBox from rendering until requested (should always be used when rendering into an Ext.Editor, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.FireSelectOnLoad">
            <summary>
            True to fire select event after setValue on page load
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ListAlign">
            <summary>
            A valid anchor position value. See Ext.Element.alignTo for details on supported anchor positions (defaults to 'tl-bl').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ListClass">
            <summary>
            CSS class to apply to the dropdown list element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ListWidth">
            <summary>
            The width in pixels of the dropdown list (defaults to the width of the ComboBox field).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.LoadingText">
            <summary>
            The text to display in the dropdown list while data is loading. Only applies when mode = 'remote' (defaults to 'Loading...').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.MaxHeight">
            <summary>
            The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.MinHeight">
            <summary>
            The minimum height in pixels of the dropdown list when the list is constrained by its distance to the viewport edges (defaults to 90).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.MinChars">
            <summary>
            The minimum number of characters the user must type before autocomplete and typeahead activate (defaults to 4 if remote or 0 if local, does not apply if editable = false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.MinListWidth">
            <summary>
            The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if listWidth has a higher value).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Mode">
            <summary>
            Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.PageSize">
            <summary>
            If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the filter queries will execute with page addToStart and limit parameters. Only applies when mode = 'remote' (defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.QueryDelay">
            <summary>
            The length of time in milliseconds to delay between the addToStart of typing and sending the query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.QueryParam">
            <summary>
            Name of the query as it will be passed on the querystring (defaults to 'query').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Resizable">
            <summary>
            True to add a resize handle to the bottom of the dropdown list (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.SelectedClass">
            <summary>
            CSS class to apply to the selected items in the dropdown list (defaults to 'x-combo-selected').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Shadow">
            <summary>
            'Sides' for the default effect, 'Frame' for 4-way shadow, and 'Drop' for bottom-right.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.EnableShadow">
            <summary>
            true for the default effect
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.SelectOnFocus">
            <summary>
            True to automatically select any existing field text when the field receives input focus (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Template">
            <summary>
            The template string to use to display each item in the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Transform">
            <summary>
            The ID of an existing select to convert to a ComboBox.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Title">
            <summary>
            If supplied, a header element is created containing this text and added into the top of the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.TriggerAction">
            <summary>
            The action to execute when the trigger field is activated. Use 'All' to run the query specified by the allQuery config option (defaults to 'Query').
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.TypeAhead">
            <summary>
            True to populate and autoselect the remainder of the text being typed after a configurable delay (typeAheadDelay) if it matches a known value (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.TypeAheadDelay">
            <summary>
            The length of time in milliseconds to wait until the typeahead text is displayed if TypeAhead = true (defaults to 250).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ValueField">
            <summary>
            The underlying data value name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'value' if transforming a select) Note: use of a valueField requires the user to make a selection in order for a value to be mapped.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.ValueNotFoundText">
            <summary>
            When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.Store">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.AlwaysMergeItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.TriggerAutoPostBack">
            <summary>
            Trigger AutoPostBack
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBase`1.Config.AutoPostBackEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBaseMulti`1.Delimiter">
            <summary>
            The delimiter of selected items
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBaseMulti`1.WrapBySquareBrackets">
            <summary>
            True to wrap by square brackets.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxBaseMulti`1.SelectionMode">
            <summary>
            Selection UI mode
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.SelectAll">
            <summary>
            Select all items
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.ClearSelection">
            <summary>
            Clear selection
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.DeselectItem(System.Int32)">
            <summary>
            Deselect item by index
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.DeselectItem(System.String)">
            <summary>
            Deselect item by value
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.SelectItem(System.Int32)">
            <summary>
            Select item by index
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.SelectItem(System.String)">
            <summary>
            Select item by value
            </summary>
        </member>
        <member name="P:Ext.Net.MultiCombo.Editable">
            <summary>
            False to prevent the user from typing text directly into the field, just like a traditional select (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiCombo.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MultiCombo.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.Editable(System.Boolean)">
            <summary>
            False to prevent the user from typing text directly into the field, just like a traditional select (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.SelectAll">
            <summary>
            Select all items
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.ClearSelection">
            <summary>
            Clear selection
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.DeselectItem(System.Int32)">
            <summary>
            Deselect item by index
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.DeselectItem(System.String)">
            <summary>
            Deselect item by value
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.SelectItem(System.Int32)">
            <summary>
            Select item by index
            </summary>
        </member>
        <member name="M:Ext.Net.MultiCombo.Builder.SelectItem(System.String)">
            <summary>
            Select item by value
            </summary>
        </member>
        <member name="P:Ext.Net.MultiCombo.Config.Editable">
            <summary>
            False to prevent the user from typing text directly into the field, just like a traditional select (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiCombo.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MultiCombo.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.MenuTextItem">
            <summary>
            Adds a static text string to a menu, usually used as either a heading or group separator.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.ItemCls">
            <summary>
            The default CSS class to use for text items (defaults to \"x-menu-text\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Text">
            <summary>
            The text to display for this item (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.MenuTextItem.Builder.HideOnClick(System.Boolean)">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuTextItem.Builder.ItemCls(System.String)">
            <summary>
            The default CSS class to use for text items (defaults to \"x-menu-text\")
            </summary>
        </member>
        <member name="M:Ext.Net.MenuTextItem.Builder.Text(System.String)">
            <summary>
            The text to display for this item (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Config.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Config.ItemCls">
            <summary>
            The default CSS class to use for text items (defaults to \"x-menu-text\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Config.Text">
            <summary>
            The text to display for this item (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuTextItem.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.HyperLink">
            <summary>
            Basic hyperlink field.
            </summary>
        </member>
        <member name="T:Ext.Net.Label">
            <summary>
            Basic Label field.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.SetHtml(System.String)">
            <summary>
            Updates the label's innerHTML with the specified string.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.SetText(System.String)">
            <summary>
            Updates the label's innerHTML with the specified string.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.SetText(System.String,System.Boolean)">
            <summary>
            Updates the label's innerHTML with the specified string.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.SetIconClass(System.String)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.SetIconClass(Ext.Net.Icon)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Format">
            <summary>
            The format of the string to render using the .Text property. Example 'Hello {0}'.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.EmptyText">
            <summary>
            The default text to display if the Text property is empty (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Label.ForID">
            <summary>
            The id of the input element to which this label will be bound via the standard 'htmlFor' attribute. If not specified, the attribute will not be added to the label.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Html">
            <summary>
            An HTML fragment that will be used as the label's innerHTML (defaults to ''). Note that if text is specified it will take precedence and this value will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Text">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML tags within the label's innerHTML, use the html config instead.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Icon">
            <summary>
            The icon to use in the label. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this label.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.IconAlign">
            <summary>
            (optional) Set the CSS text-align property of the icon. The center is not supported. Defaults left.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Editor">
            <summary>
            Inline editor
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Label.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.Format">
            <summary>
            The format of the string to render using the .Text property. Example 'Hello {0}'.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.EmptyText">
            <summary>
            The default text to display if the Text property is empty (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.ForID">
            <summary>
            The id of the input element to which this label will be bound via the standard 'htmlFor' attribute. If not specified, the attribute will not be added to the label.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.Html">
            <summary>
            An HTML fragment that will be used as the label's innerHTML (defaults to ''). Note that if text is specified it will take precedence and this value will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.Text">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML tags within the label's innerHTML, use the html config instead.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.Icon">
            <summary>
            The icon to use in the label. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this label.
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.IconAlign">
            <summary>
            (optional) Set the CSS text-align property of the icon. The center is not supported. Defaults to \"Left\"
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.Editor">
            <summary>
            Inline editor
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Label.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.Format(System.String)">
            <summary>
            The format of the string to render using the .Text property. Example 'Hello {0}'.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.EmptyText(System.String)">
            <summary>
            The default text to display if the Text property is empty (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.ForID(System.String)">
            <summary>
            The id of the input element to which this label will be bound via the standard 'htmlFor' attribute. If not specified, the attribute will not be added to the label.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.Html(System.String)">
            <summary>
            An HTML fragment that will be used as the label's innerHTML (defaults to ''). Note that if text is specified it will take precedence and this value will be ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.Text(System.String)">
            <summary>
            The plain text to display within the label (defaults to ''). If you need to include HTML tags within the label's innerHTML, use the html config instead.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the label. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.IconCls(System.String)">
            <summary>
            A css class which sets a background image to be used as the icon for this label.
            </summary>
        </member>
        <member name="M:Ext.Net.Label.Builder.IconAlign(Ext.Net.Alignment)">
            <summary>
            (optional) Set the CSS text-align property of the icon. The center is not supported. Defaults to \"Left\"
            </summary>
        </member>
        <member name="M:Ext.Net.HyperLink.Builder.ImageUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HyperLink.Builder.NavigateUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HyperLink.Builder.Target(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HyperLink.Config.ImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HyperLink.Config.NavigateUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HyperLink.Config.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Collapse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Expand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.SetValue(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.SetValue(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.UnderlyingValue">
            <summary>
            The underlying value which mapping on the Text, similar the Value property but can be set declarative
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.AllowBlur">
            <summary>
            False to hide the component when the field is blurred. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.LazyInit">
            <summary>
            True to not initialize the list for this combo until the field is focused. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.ComponentAlign">
            <summary>
            A valid anchor position value. See Ext.Element.alignTo for details on supported anchor positions (defaults to 'tl-bl').
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.ComponentRenderTo">
            <summary>
            The id of the node, a DOM node or an existing Element that will be the content Container to render this component into.
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.SyncValue">
            <summary>
            Function to syncronize value of the field and dropdown control
            Parameters:
               value : value
               text : text
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.Text(System.String)">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.UnderlyingValue(System.String)">
            <summary>
            The underlying value which mapping on the Text, similar the Value property but can be set declarative
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.Mode(Ext.Net.DropDownMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.AllowBlur(System.Boolean)">
            <summary>
            False to hide the component when the field is blurred. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.LazyInit(System.Boolean)">
            <summary>
            True to not initialize the list for this combo until the field is focused. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.ComponentAlign(System.String)">
            <summary>
            A valid anchor position value. See Ext.Element.alignTo for details on supported anchor positions (defaults to 'tl-bl').
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.ComponentRenderTo(System.String)">
            <summary>
            The id of the node, a DOM node or an existing Element that will be the content Container to render this component into.
            </summary>
        </member>
        <member name="M:Ext.Net.DropDownFieldBase.Builder`2.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.UnderlyingValue">
            <summary>
            The underlying value which mapping on the Text, similar the Value property but can be set declarative
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.AllowBlur">
            <summary>
            False to hide the component when the field is blurred. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.LazyInit">
            <summary>
            True to not initialize the list for this combo until the field is focused. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.ComponentAlign">
            <summary>
            A valid anchor position value. See Ext.Element.alignTo for details on supported anchor positions (defaults to 'tl-bl').
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldBase.Config.ComponentRenderTo">
            <summary>
            The id of the node, a DOM node or an existing Element that will be the content Container to render this component into.
            </summary>
        </member>
        <member name="T:Ext.Net.CheckboxSelectionModel">
            <summary>
            A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.
            </summary>
        </member>
        <member name="T:Ext.Net.RowSelectionModel">
            <summary>
            The default SelectionModel used by Ext.grid.GridPanel. It supports multiple
            selections and keyboard selection/navigation. The objects stored as selections
            and returned by getSelected, and getSelections are the Records which provide
            the data for the selected rows.
            </summary>
        </member>
        <member name="T:Ext.Net.AbstractSelectionModel">
            <summary>
            Abstract base class for grid SelectionModels. It provides the interface that should
            be implemented by descendant classes. This class should not be directly instantiated.
            </summary>
        </member>
        <member name="M:Ext.Net.AbstractSelectionModel.UpdateSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.AbstractSelectionModel.CallGrid(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.AbstractSelectionModel.Lock">
            <summary>
            Locks the selections.
            </summary>
        </member>
        <member name="M:Ext.Net.AbstractSelectionModel.Unlock">
            <summary>
            Unlocks the selections.
            </summary>
        </member>
        <member name="M:Ext.Net.AbstractSelectionModel.Builder`2.Lock">
            <summary>
            Locks the selections.
            </summary>
        </member>
        <member name="M:Ext.Net.AbstractSelectionModel.Builder`2.Unlock">
            <summary>
            Unlocks the selections.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.UpdateSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.DeselectRange(System.Int32,System.Int32)">
            <summary>
            Deselects a range of rows. All rows in between startRow and endRow are also deselected.
            </summary>
            <param name="startRow">The index of the first row in the range</param>
            <param name="endRow">The index of the last row in the range</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.DeselectRow(System.Int32)">
            <summary>
            Deselects a row.
            </summary>
            <param name="row">The index of the row to deselect</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectAll">
            <summary>
            Deselects a row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectFirstRow">
            <summary>
            Selects the first row in the grid.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectLastRow">
            <summary>
            Select the last row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectLastRow(System.Boolean)">
            <summary>
            Select the last row.
            </summary>
            <param name="keepExisting">True to keep existing selections</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectNext">
            <summary>
            Selects the row immediately following the last selected row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectNext(System.Boolean)">
            <summary>
            Selects the row immediately following the last selected row.
            </summary>
            <param name="keepExisting">True to keep existing selections</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectPrevious">
            <summary>
            Selects the row that precedes the last selected row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectPrevious(System.Boolean)">
            <summary>
            Selects the row that precedes the last selected row.
            </summary>
            <param name="keepExisting">Selects the row that precedes the last selected row.</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectRange(System.Int32,System.Int32)">
            <summary>
            Selects a range of rows. All rows in between startRow and endRow are also selected.
            </summary>
            <param name="startRow">The index of the first row in the range</param>
            <param name="endRow">The index of the last row in the range</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of rows. All rows in between startRow and endRow are also selected.
            </summary>
            <param name="startRow">The index of the first row in the range</param>
            <param name="endRow">The index of the last row in the range</param>
            <param name="keepExisting">True to retain existing selections</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectById(System.Object,System.Boolean)">
            <summary>
            Select row by id.
            </summary>
            <param name="id">The id of the record to select</param>
            <param name="keepExisting">True to keep existing selections</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectById(System.Object)">
            <summary>
            Select row by id.
            </summary>
            <param name="id">The id of the record to select</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectById(System.Object[],System.Boolean)">
            <summary>
            Select rows by id.
            </summary>
            <param name="ids">The array of ids of record to select</param>
            <param name="keepExisting">True to keep existing selections</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectById(System.Object[])">
            <summary>
            Select rows by id.
            </summary>
            <param name="ids">The array of ids of record to select</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectRow(System.Int32)">
            <summary>
            Selects a row.
            </summary>
            <param name="row">The index of the row to select</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Selects a row.
            </summary>
            <param name="row">The index of the row to select</param>
            <param name="keepExisting">True to keep existing selections</param>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.SelectRows(System.Int32[],System.Boolean)">
            <summary>
            Selects multiple rows.
            </summary>
            <param name="rows">Array of the indexes of the row to select</param>
            <param name="keepExisting">True to keep existing selections (defaults to false)</param>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.SingleSelect">
            <summary>
            True to allow selection of only one row at a time (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.MoveEditorOnEnter">
            <summary>
            False to turn off moving the editor to the next cell when the enter key is pressed
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.SelectedRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.SelectedRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.SelectedIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.SelectedRecordID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.IgnoreTargets">
            <summary>
            The list of selectors of the ignore targets
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SingleSelect(System.Boolean)">
            <summary>
            True to allow selection of only one row at a time (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.MoveEditorOnEnter(System.Boolean)">
            <summary>
            False to turn off moving the editor to the next cell when the enter key is pressed.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectedIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectedRecordID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.UpdateSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.DeselectRange(System.Int32,System.Int32)">
            <summary>
            Deselects a range of rows. All rows in between startRow and endRow are also deselected.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.DeselectRow(System.Int32)">
            <summary>
            Deselects a row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectAll">
            <summary>
            Deselects a row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectFirstRow">
            <summary>
            Selects the first row in the grid.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectLastRow">
            <summary>
            Select the last row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectLastRow(System.Boolean)">
            <summary>
            Select the last row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectNext">
            <summary>
            Selects the row immediately following the last selected row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectNext(System.Boolean)">
            <summary>
            Selects the row immediately following the last selected row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectPrevious">
            <summary>
            Selects the row that precedes the last selected row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectPrevious(System.Boolean)">
            <summary>
            Selects the row immediately following the last selected row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectRange(System.Int32,System.Int32)">
            <summary>
            Selects a range of rows. All rows in between startRow and endRow are also selected.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of rows. All rows in between startRow and endRow are also selected.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectById(System.Object,System.Boolean)">
            <summary>
            Select rows by id.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectById(System.Object)">
            <summary>
            Select rows by id.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectById(System.Object[],System.Boolean)">
            <summary>
            Select rows by id.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectById(System.Object[])">
            <summary>
            Select rows by id.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectRow(System.Int32)">
            <summary>
            Selects a row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Selects a row.
            </summary>
        </member>
        <member name="M:Ext.Net.RowSelectionModel.Builder.SelectRows(System.Int32[],System.Boolean)">
            <summary>
            Selects multiple rows.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.SingleSelect">
            <summary>
            True to allow selection of only one row at a time (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.MoveEditorOnEnter">
            <summary>
            False to turn off moving the editor to the next cell when the enter key is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.SelectedRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.SelectedRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.SelectedIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModel.Config.SelectedRecordID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.CheckOnly">
            <summary>
            true if rows can only be selected by clicking on the checkbox column (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Header">
            <summary>
            Any valid text or HTML fragment to display in the header cell for the checkbox column
            (defaults to '<div class="x-grid3-hd-checker"> </div>'). The default CSS class 
            of 'x-grid3-hd-checker' displays a checkbox in the header and provides support for 
            automatic check all/none behavior on header click. This string can be replaced by any 
            valid HTML fragment, including a simple text string (e.g., 'Select Rows'), but the 
            automatic check all/none behavior will only work if the 'x-grid3-hd-checker' class 
            is supplied.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Sortable">
            <summary>
            True if the checkbox column is sortable (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.HideCheckAll">
            <summary>
            True if need hide the checkbox in the header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.AllowDeselect">
            <summary>
            False if need disable deselection
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Width">
            <summary>
            The default width in pixels of the checkbox column (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.RowSpan">
            <summary>
            RowSpan attribute for the checkbox table cell
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.ColumnPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.KeepSelectionOnClick">
            <summary>
            Selection mode
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.CheckOnly(System.Boolean)">
            <summary>
            true if rows can only be selected by clicking on the checkbox column (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.Header(System.String)">
            <summary>
            Any valid text or HTML fragment to display in the header cell for the checkbox column (defaults to '<div class='x-grid3-hd-checker'> </div>'). The default CSS class of 'x-grid3-hd-checker' displays a checkbox in the header and provides support for automatic check all/none behavior on header click. This string can be replaced by any valid HTML fragment, including a simple text string (e.g., 'Select Rows'), but the automatic check all/none behavior will only work if the 'x-grid3-hd-checker' class is supplied.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.Sortable(System.Boolean)">
            <summary>
            True if the checkbox column is sortable (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.HideCheckAll(System.Boolean)">
            <summary>
            True if need hide the checkbox in the header (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.AllowDeselect(System.Boolean)">
            <summary>
            False if need disable deselection
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.Width(System.Int32)">
            <summary>
            The default width in pixels of the checkbox column (defaults to 20).
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.RowSpan(System.Int32)">
            <summary>
            RowSpan attribute for the checkbox table cell
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.ColumnPosition(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxSelectionModel.Builder.KeepSelectionOnClick(Ext.Net.KeepSelectionMode)">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.CheckOnly">
            <summary>
            true if rows can only be selected by clicking on the checkbox column (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.Header">
            <summary>
            Any valid text or HTML fragment to display in the header cell for the checkbox column (defaults to '<div class='x-grid3-hd-checker'> </div>'). The default CSS class of 'x-grid3-hd-checker' displays a checkbox in the header and provides support for automatic check all/none behavior on header click. This string can be replaced by any valid HTML fragment, including a simple text string (e.g., 'Select Rows'), but the automatic check all/none behavior will only work if the 'x-grid3-hd-checker' class is supplied.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.Sortable">
            <summary>
            True if the checkbox column is sortable (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.HideCheckAll">
            <summary>
            True if need hide the checkbox in the header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.AllowDeselect">
            <summary>
            False if need disable deselection
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.Width">
            <summary>
            The default width in pixels of the checkbox column (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.RowSpan">
            <summary>
            RowSpan attribute for the checkbox table cell
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.ColumnPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxSelectionModel.Config.KeepSelectionOnClick">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="T:Ext.Net.CenterLayout">
            <summary>
            This is a very simple layout style used to center contents within a container.
            </summary>
        </member>
        <member name="P:Ext.Net.DirectMethodAttribute.Timeout">
            <summary>
            The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="T:Ext.Net.TextField">
            <summary>
            Basic text field. Can be used as a direct replacement for traditional text inputs, or as the base class for more sophisticated input controls (like Ext.form.TextArea and Ext.form.ComboBox).
            </summary>
        </member>
        <member name="M:Ext.Net.TextField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TextField.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TextField.OnBeforeClientInit(Ext.Net.Observable)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TextField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TextField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.TextField.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.TextField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TextField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.BoxComponent">
            <summary>
            Base Class for any visual Component that uses a box content Container.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponent.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponent.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponent.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.BoxComponent.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.SplitButtonBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ButtonBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Focus">
            <summary>
            Focus the button
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.HideMenu">
            <summary>
            Hide this button's menu (if it has one)
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.InitComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetHandler(System.String)">
            <summary>
            Assigns this button's click handler
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetHandler(System.String,System.String)">
            <summary>
            Assigns this button's click handler
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetIconClass(System.String)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetIconClass(Ext.Net.Icon)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetText(System.String)">
            <summary>
            Sets this button's text
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetTooltip(System.String)">
            <summary>
            Sets the tooltip for this Button.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.SetTooltip(Ext.Net.QTipCfg)">
            <summary>
            Sets the tooltip for this Button.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.ShowMenu">
            <summary>
            Show this button's menu (if it has one)
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Toggle">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Toggle(System.Boolean)">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.ToggleMenuArrow">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.ToggleMenuArrow(System.Boolean)">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.AutoWidth">
            <summary>
            True to use width:'auto', false to use fixed width (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.StandOut">
            <summary>
            True to enable stand out by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.PostBackUrl">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ext.Net.ButtonBase.Click">
            <summary>
            Fires when the button has been clicked
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.CommandArgument">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.ButtonBase.OnClientClick" -->
        <member name="P:Ext.Net.ButtonBase.AllowDepress">
            <summary>
            False to not allow a pressed Button to be depressed (defaults to true). Only valid when enableToggle is true.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ArrowAlign">
            <summary>
            The side of the Button box to render the arrow if the button has an associated menu. Defaults to 'Right'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ClickEvent">
            <summary>
            The type of event to map to the button's event handler (defaults to 'click').
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.EnableToggle">
            <summary>
            True to enable pressed/not pressed toggling (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Flat">
            <summary>
            True to apply a flat style.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.HandleMouseEvents">
            <summary>
            False to disable visual cues on mouseover, mouseout and mousedown (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Handler">
            <summary>
            A function called when the button is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Icon">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.IconAlign">
            <summary>
            The side of the Button box to render the icon. Defaults to 'Left'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.MenuArrow">
            <summary>
            False to hide the Menu arrow drop down arrow (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.MenuAlign">
            <summary>
            The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.MinWidth">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.OverflowText">
            <summary>
            If used in a Toolbar, the text to be used if this item is shown in the overflow menu.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Pressed">
            <summary>
            True to addToStart pressed (only if enableToggle = true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Repeat">
            <summary>
            True to repeat fire the click event while the mouse is down. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Scope">
            <summary>
            The scope of the handler.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Scale">
            <summary>
            The size of the Button. Defaults to 'Small'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.TabIndex">
            <summary>
            Set a DOM tabIndex for this button (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Text">
            <summary>
            The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ToggleHandler">
            <summary>
            Function called when a Button with enableToggle set to true is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ToggleGroup">
            <summary>
            The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ToolTip">
            <summary>
            The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted). Or, see ToolTip config.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ToolTipType">
            <summary>
            The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Type">
            <summary>
            The tooltip for the button - can be a string or QuickTips config object.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when button clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.AutoWidth(System.Boolean)">
            <summary>
            By default, if a width is not specified the button will attempt to stretch horizontally to fit its content. If the button is being managed by a width sizing layout (hbox, fit, anchor), set this to false to prevent the button from doing this automatic sizing. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.StandOut(System.Boolean)">
            <summary>
            True to enable stand out by default (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.PostBackUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Net.ButtonBase.Builder`2.OnClientClick(System.String)" -->
        <member name="M:Ext.Net.ButtonBase.Builder`2.AllowDepress(System.Boolean)">
            <summary>
            False to not allow a pressed Button to be depressed (defaults to true). Only valid when enableToggle is true.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ArrowAlign(Ext.Net.ArrowAlign)">
            <summary>
            The side of the Button box to render the arrow if the button has an associated menu. Defaults to 'Right'.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ClickEvent(System.String)">
            <summary>
            The type of event to map to the button's event handler (defaults to 'click').
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.EnableToggle(System.Boolean)">
            <summary>
            True to enable pressed/not pressed toggling (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Flat(System.Boolean)">
            <summary>
            True to apply a flat style.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.HandleMouseEvents(System.Boolean)">
            <summary>
            False to disable visual cues on mouseover, mouseout and mousedown (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Handler(System.String)">
            <summary>
            A function called when the button is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.IconAlign(Ext.Net.IconAlign)">
            <summary>
            The side of the Button box to render the icon. Defaults to 'Left'.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.IconCls(System.String)">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.MenuArrow(System.Boolean)">
            <summary>
            False to hide the Menu arrow drop down arrow (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.MenuAlign(System.String)">
            <summary>
            The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.MinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.OverflowText(System.String)">
            <summary>
            If used in a Toolbar, the text to be used if this item is shown in the overflow menu.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Pressed(System.Boolean)">
            <summary>
            True to addToStart pressed (only if enableToggle = true).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Repeat(System.Boolean)">
            <summary>
            True to repeat fire the click event while the mouse is down. (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Scope(System.Object)">
            <summary>
            The scope of the handler.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Scale(Ext.Net.ButtonScale)">
            <summary>
            The size of the Button. Defaults to 'Small'.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.TabIndex(System.Int16)">
            <summary>
            Set a DOM tabIndex for this button (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Text(System.String)">
            <summary>
            The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ToggleHandler(System.String)">
            <summary>
            Function called when a Button with enableToggle set to true is clicked.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ToggleGroup(System.String)">
            <summary>
            The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ToolTip(System.String)">
            <summary>
            The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted). Or, see ToolTip config.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ToolTipType(Ext.Net.ToolTipType)">
            <summary>
            The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Type(Ext.Net.ButtonType)">
            <summary>
            submit, reset or button - defaults to 'button'.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.AutoPostBack(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when button clicked.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Focus">
            <summary>
            Focus the button
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.HideMenu">
            <summary>
            Hide this button's menu (if it has one)
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.InitComponent">
            <summary>
            initComponent
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ShowMenu">
            <summary>
            Show this button's menu (if it has one)
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Toggle">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.Toggle(System.Boolean)">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ToggleMenuArrow">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonBase.Builder`2.ToggleMenuArrow(System.Boolean)">
            <summary>
            If a state it passed, it becomes the pressed state otherwise the current state is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.AutoWidth">
            <summary>
            By default, if a width is not specified the button will attempt to stretch horizontally to fit its content. If the button is being managed by a width sizing layout (hbox, fit, anchor), set this to false to prevent the button from doing this automatic sizing. Defaults to <tt>undefined</tt>.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.StandOut">
            <summary>
            True to enable stand out by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.PostBackUrl">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.ButtonBase.Config.OnClientClick" -->
        <member name="P:Ext.Net.ButtonBase.Config.AllowDepress">
            <summary>
            False to not allow a pressed Button to be depressed (defaults to true). Only valid when enableToggle is true.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ArrowAlign">
            <summary>
            The side of the Button box to render the arrow if the button has an associated menu. Defaults to 'Right'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ClickEvent">
            <summary>
            The type of event to map to the button's event handler (defaults to 'click').
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.EnableToggle">
            <summary>
            True to enable pressed/not pressed toggling (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Flat">
            <summary>
            True to apply a flat style.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.HandleMouseEvents">
            <summary>
            False to disable visual cues on mouseover, mouseout and mousedown (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Handler">
            <summary>
            A function called when the button is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Icon">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.IconAlign">
            <summary>
            The side of the Button box to render the icon. Defaults to 'Left'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.MenuArrow">
            <summary>
            False to hide the Menu arrow drop down arrow (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.MenuAlign">
            <summary>
            The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.MinWidth">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.OverflowText">
            <summary>
            If used in a Toolbar, the text to be used if this item is shown in the overflow menu.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Pressed">
            <summary>
            True to addToStart pressed (only if enableToggle = true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Repeat">
            <summary>
            True to repeat fire the click event while the mouse is down. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Scope">
            <summary>
            The scope of the handler.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Scale">
            <summary>
            The size of the Button. Defaults to 'Small'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.TabIndex">
            <summary>
            Set a DOM tabIndex for this button (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Text">
            <summary>
            The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ToggleHandler">
            <summary>
            Function called when a Button with enableToggle set to true is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ToggleGroup">
            <summary>
            The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ToolTip">
            <summary>
            The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted). Or, see ToolTip config.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ToolTipType">
            <summary>
            The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.Type">
            <summary>
            submit, reset or button - defaults to 'button'.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when button clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonBase.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButtonBase.ArrowHandler">
            <summary>
            A function called when the arrow button is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButtonBase.ArrowTooltip">
            <summary>
            The title attribute of the arrow.
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButtonBase.Config.ArrowHandler">
            <summary>
            A function called when the arrow button is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButtonBase.Config.ArrowTooltip">
            <summary>
            The title attribute of the arrow.
            </summary>
        </member>
        <member name="M:Ext.Net.SplitButtonBase.Builder`2.ArrowHandler(System.String)">
            <summary>
            A function called when the arrow button is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="M:Ext.Net.SplitButtonBase.Builder`2.ArrowTooltip(System.String)">
            <summary>
            The title attribute of the arrow.
            </summary>
        </member>
        <member name="T:Ext.Net.CardLayout">
            <summary>
            This layout contains multiple panels, each fit to the content Container, where only a single panel can be visible at any given time. This layout style is most commonly used for wizards, tab implementations, etc. This class is intended to be extended or created via the layout:'card' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.
            </summary>
        </member>
        <member name="P:Ext.Net.CardLayout.DeferredRender">
            <summary>
            True to render each contained items at the time it becomes active, false to render all contained items as soon as the layout is rendered (defaults to false). If there is a significant amount of content or a lot of heavy controls being rendered into panels that are not displayed by default, setting this to true might improve performance.
            </summary>
        </member>
        <member name="P:Ext.Net.CardLayout.LayoutOnCardChange">
            <summary>
            True to force a layout of the active item when the active card is changed. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.CardLayout.Builder.DeferredRender(System.Boolean)">
            <summary>
            True to render each contained items at the time it becomes active, false to render all contained items as soon as the layout is rendered (defaults to false). If there is a significant amount of content or a lot of heavy controls being rendered into panels that are not displayed by default, setting this to true might improve performance.
            </summary>
        </member>
        <member name="M:Ext.Net.CardLayout.Builder.LayoutOnCardChange(System.Boolean)">
            <summary>
            True to force a layout of the active item when the active card is changed. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.CardLayout.Config.DeferredRender">
            <summary>
            True to render each contained items at the time it becomes active, false to render all contained items as soon as the layout is rendered (defaults to false). If there is a significant amount of content or a lot of heavy controls being rendered into panels that are not displayed by default, setting this to true might improve performance.
            </summary>
        </member>
        <member name="P:Ext.Net.CardLayout.Config.LayoutOnCardChange">
            <summary>
            True to force a layout of the active item when the active card is changed. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.AsyncTreeNode.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.CycleButton">
            <summary>
            A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements. The button automatically cycles through each menu items on click, raising the button's change event (or calling the button's changeHandler function, if supplied) for the active menu items. Clicking on the arrow section of the button displays the dropdown menu just like a normal SplitButton.
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.ToggleSelected">
            <summary>
            This is normally called internally on button click, but can be called externally to advance the button's active item programmatically to the next one in the menu. If the current item is the last one in the menu the active item will be set to the first item in the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.ChangeHandler">
            <summary>
            A callback function that will be invoked each time the active menu items in the button's menu has changed. If this callback is not supplied, the SplitButton will instead fire the change event on active items change. The changeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem items).
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.ForceIcon">
            <summary>
            A css class which sets an image to be used as the static icon for this button. This icon will always be displayed regardless of which item is selected in the dropdown list. This overrides the default behavior of changing the button's icon to match the selected item's icon on change.
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.PrependText">
            <summary>
            A static string to prepend before the active items's text when displayed as the button's text (only applies when showText = true, defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.ShowText">
            <summary>
            True to display the active items's text as the button text (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.ToggleOnClick">
            <summary>
            False to prevent change active item after button click (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.Builder.ChangeHandler(System.String)">
            <summary>
            A callback function that will be invoked each time the active menu items in the button's menu has changed. If this callback is not supplied, the SplitButton will instead fire the change event on active items change. The changeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem items).
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.Builder.ForceIcon(System.String)">
            <summary>
            A css class which sets an image to be used as the static icon for this button. This icon will always be displayed regardless of which item is selected in the dropdown list. This overrides the default behavior of changing the button's icon to match the selected item's icon on change.
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.Builder.PrependText(System.String)">
            <summary>
            A static string to prepend before the active items's text when displayed as the button's text (only applies when showText = true, defaults to '')
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.Builder.ShowText(System.Boolean)">
            <summary>
            True to display the active items's text as the button text (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.Builder.ToggleOnClick(System.Boolean)">
            <summary>
            False to prevent change active item after button click (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.CycleButton.Builder.ToggleSelected">
            <summary>
            This is normally called internally on button click, but can be called externally to advance the button's active item programmatically to the next one in the menu. If the current item is the last one in the menu the active item will be set to the first item in the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.ChangeHandler">
            <summary>
            A callback function that will be invoked each time the active menu items in the button's menu has changed. If this callback is not supplied, the SplitButton will instead fire the change event on active items change. The changeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem items).
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.ForceIcon">
            <summary>
            A css class which sets an image to be used as the static icon for this button. This icon will always be displayed regardless of which item is selected in the dropdown list. This overrides the default behavior of changing the button's icon to match the selected item's icon on change.
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.PrependText">
            <summary>
            A static string to prepend before the active items's text when displayed as the button's text (only applies when showText = true, defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.ShowText">
            <summary>
            True to display the active items's text as the button text (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.ToggleOnClick">
            <summary>
            False to prevent change active item after button click (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButton.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.ImageCommandColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Hideable">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.RightCommandAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.GroupCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.PrepareGroupCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.PrepareGroupCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.PrepareCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.PrepareCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.Hideable">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.RightCommandAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.GroupCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.PrepareGroupCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.PrepareGroupCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.PrepareCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandColumn.Config.PrepareCommands">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandColumn.Builder.Hideable(System.Boolean)">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandColumn.Builder.RightCommandAlign(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.RecordField">
            <summary>
            The field definition object which specify field names, and optionally,
            data types, and a mapping for an Reader to extract the field's value
            from a data object.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.AllowBlank">
            <summary>
            Used for validating a record, defaults to true. An empty value here will cause Ext.data.Record.isValid to evaluate to false.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Name">
            <summary>
            The name by which the field is referenced within the Record.
            This is referenced by, for example the DataIndex property in
            column definition objects passed to ColumnModel
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Mapping">
            <summary>
            (Optional) A path specification for use by the Reader implementation
            that is creating the Record to access the data value from the data object.
            
            If an JsonReader is being used, then this is a string containing the javascript
            expression to reference the data relative to the Record item's root.
            
            If an XmlReader is being used, this is an Ext.DomQuery path to the data item
            relative to the Record element.
            
            If the mapping expression is the same as the field name, this may be omitted.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.ServerMapping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Type">
            <summary>
            The data type for conversion to displayable value
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.SortType">
            <summary>
            Sort method
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.SortDir">
            <summary>
            (Optional) Initial direction to sort
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.CustomSortType">
            <summary>
            A function which converts a Field's value to a comparable value in order to ensure correct sort ordering.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Convert">
            <summary>
            (Optional) A function which converts the value provided by the Reader
            into an object that will be stored in the Record. 
            
            It is passed the following parameters:
               v : Mixed
                   The data value as read by the Reader.
            
               rec : Mixed
                     The data object containting the row as read by the Reader.
                     Depending on Reader type, this could be an Array, an object,
                     or an XML element.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.DateFormat">
            <summary>
            (Optional) A format String for the Date.parseDate function
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.DefaultValue">
            <summary>
            (Optional) The default value passed to the Reader when the field does not exist in the data object
            
            Please pay attention that if you use string const then need wrap like this
                DefaultValue="'String const'"
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.IsComplex">
            <summary>
            True to render this property as complex object
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.AllowBlank(System.Boolean)">
            <summary>
            Used for validating a record, defaults to true. An empty value here will cause Ext.data.Record.isValid to evaluate to false.
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.Name(System.String)">
            <summary>
            The name by which the field is referenced within the Record. This is referenced by, for example the DataIndex property in column definition objects passed to ColumnModel
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.Mapping(System.String)">
            <summary>
            (Optional) A path specification for use by the Reader implementation that is creating the Record to access the data value from the data object. If an JsonReader is being used, then this is a string containing the javascript expression to reference the data relative to the Record item's root. If an XmlReader is being used, this is an Ext.DomQuery path to the data item relative to the Record element. If the mapping expression is the same as the field name, this may be omitted.
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.ServerMapping(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.Type(Ext.Net.RecordFieldType)">
            <summary>
            The data type for conversion to displayable value
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.SortType(Ext.Net.SortTypeMethod)">
            <summary>
            Sort method
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.SortDir(Ext.Net.SortDirection)">
            <summary>
            (Optional) Initial direction to sort
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.DateFormat(System.String)">
            <summary>
            (Optional) A format String for the Date.parseDate function
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.DefaultValue(System.String)">
            <summary>
            (Optional) The default value passed to the Reader when the field does not exist in the data object
            </summary>
        </member>
        <member name="M:Ext.Net.RecordField.Builder.IsComplex(System.Boolean)">
            <summary>
            True to render this property as complex object
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.AllowBlank">
            <summary>
            Used for validating a record, defaults to true. An empty value here will cause Ext.data.Record.isValid to evaluate to false.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.Name">
            <summary>
            The name by which the field is referenced within the Record. This is referenced by, for example the DataIndex property in column definition objects passed to ColumnModel
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.Mapping">
            <summary>
            (Optional) A path specification for use by the Reader implementation that is creating the Record to access the data value from the data object. If an JsonReader is being used, then this is a string containing the javascript expression to reference the data relative to the Record item's root. If an XmlReader is being used, this is an Ext.DomQuery path to the data item relative to the Record element. If the mapping expression is the same as the field name, this may be omitted.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.ServerMapping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.Type">
            <summary>
            The data type for conversion to displayable value
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.SortType">
            <summary>
            Sort method
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.SortDir">
            <summary>
            (Optional) Initial direction to sort
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.CustomSortType">
            <summary>
            A function which converts a Field's value to a comparable value in order to ensure correct sort ordering.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.Convert">
            <summary>
            (Optional) A function which converts the value provided by the Reader into an object that will be stored in the Record.
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.DateFormat">
            <summary>
            (Optional) A format String for the Date.parseDate function
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.DefaultValue">
            <summary>
            (Optional) The default value passed to the Reader when the field does not exist in the data object
            </summary>
        </member>
        <member name="P:Ext.Net.RecordField.Config.IsComplex">
            <summary>
            True to render this property as complex object
            </summary>
        </member>
        <member name="T:Ext.Net.Portal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Portal.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Portal.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Portal.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Portal.Config.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.Append">
            <summary>
            Fires when a new child node is appended
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.BeforeAppend">
            <summary>
            Fires before a new child is appended, return false to cancel the append
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.BeforeInsert">
            <summary>
            Fires before a new child is inserted, return false to cancel the insert.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.BeforeMove">
            <summary>
            Fires before this node is moved to a new location in the tree. Return false to cancel the move.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.BeforeRemove">
            <summary>
            Fires before a child is removed, return false to cancel the remove.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.Insert">
            <summary>
            Fires when a new child node is inserted.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.Move">
            <summary>
            Fires when this node is moved to a new location in the tree
            </summary>
        </member>
        <member name="P:Ext.Net.NodeListeners.Remove">
            <summary>
            Fires when a child node is removed
            </summary>
        </member>
        <member name="T:Ext.Net.MenuSeparator">
            <summary>
            Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will add one of these by using \" - \" in you call to add() or in your items config rather than creating one directly.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuSeparator.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuSeparator.ItemCls">
            <summary>
            The default CSS class to use for text items (defaults to \"x-menu-text\")
            </summary>
        </member>
        <member name="P:Ext.Net.MenuSeparator.Config.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuSeparator.Config.ItemCls">
            <summary>
            The default CSS class to use for text items (defaults to \"x-menu-text\")
            </summary>
        </member>
        <member name="M:Ext.Net.MenuSeparator.Builder.HideOnClick(System.Boolean)">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuSeparator.Builder.ItemCls(System.String)">
            <summary>
            The default CSS class to use for text items (defaults to \"x-menu-text\")
            </summary>
        </member>
        <member name="T:Ext.Net.KeyNav">
            <summary>
            Provides a convenient wrapper for normalized keyboard navigation. KeyNav allows you to bind navigation keys to function calls that will get called when the keys are pressed, providing an easy way to implement custom navigation schemes for any UI component.
            </summary>
        </member>
        <member name="M:Ext.Net.KeyNav.SetDisabled(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disabled"></param>
        </member>
        <member name="P:Ext.Net.KeyNav.Target">
            <summary>
            The element to bind to
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Up">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Down">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.PageUp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.PageDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Del">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Home">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.End">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Enter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Esc">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Tab">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.DefaultEventAction">
            <summary>
            The method to call on the Ext.EventObject after this KeyNav intercepts a key. Valid values are Ext.EventObject.stopEvent, Ext.EventObject.preventDefault and Ext.EventObject.stopPropagation (defaults to 'stopEvent')
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Disabled">
            <summary>
            True to disable this KeyNav instance (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.ForceKeyDown">
            <summary>
            Handle the keydown event instead of keypress (defaults to false). KeyNav automatically does this for IE since IE does not propagate special keys on keypress, but setting this to true will force other browsers to also handle keydown instead of keypress.
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Scope">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Target">
            <summary>
            The element to bind to
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Up">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Down">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.PageUp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.PageDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Del">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Home">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.End">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Enter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Esc">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Tab">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.DefaultEventAction">
            <summary>
            The method to call on the Ext.EventObject after this KeyNav intercepts a key. Valid values are Ext.EventObject.stopEvent, Ext.EventObject.preventDefault and Ext.EventObject.stopPropagation (defaults to 'stopEvent')
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Disabled">
            <summary>
            True to disable this KeyNav instance (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.ForceKeyDown">
            <summary>
            Handle the keydown event instead of keypress (defaults to false). KeyNav automatically does this for IE since IE does not propagate special keys on keypress, but setting this to true will force other browsers to also handle keydown instead of keypress.
            </summary>
        </member>
        <member name="P:Ext.Net.KeyNav.Config.Scope">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="M:Ext.Net.KeyNav.Builder.Target(System.String)">
            <summary>
            The element to bind to
            </summary>
        </member>
        <member name="M:Ext.Net.KeyNav.Builder.DefaultEventAction(Ext.Net.KeyEventAction)">
            <summary>
            The method to call on the Ext.EventObject after this KeyNav intercepts a key. Valid values are Ext.EventObject.stopEvent, Ext.EventObject.preventDefault and Ext.EventObject.stopPropagation (defaults to 'stopEvent')
            </summary>
        </member>
        <member name="M:Ext.Net.KeyNav.Builder.Disabled(System.Boolean)">
            <summary>
            True to disable this KeyNav instance (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.KeyNav.Builder.ForceKeyDown(System.Boolean)">
            <summary>
            Handle the keydown event instead of keypress (defaults to false). KeyNav automatically does this for IE since IE does not propagate special keys on keypress, but setting this to true will force other browsers to also handle keydown instead of keypress.
            </summary>
        </member>
        <member name="M:Ext.Net.KeyNav.Builder.Scope(System.String)">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="T:Ext.Net.KeyMap">
            <summary>
            Handles mapping keys to actions for an element.
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Enable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Disable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.AddKeyBinding(Ext.Net.KeyBinding)">
            <summary>
            
            </summary>
            <param name="keyBinding"></param>
        </member>
        <member name="P:Ext.Net.KeyMap.Keys">
            <summary>
            A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyMap.Target">
            <summary>
            The element to bind to
            </summary>
        </member>
        <member name="P:Ext.Net.KeyMap.EventName">
            <summary>
            (optional) The event to bind to (defaults to 'keydown')
            </summary>
        </member>
        <member name="P:Ext.Net.KeyMap.Config.Keys">
            <summary>
            A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyMap.Config.Target">
            <summary>
            The element to bind to
            </summary>
        </member>
        <member name="P:Ext.Net.KeyMap.Config.EventName">
            <summary>
            (optional) The event to bind to (defaults to 'keydown')
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Builder.Target(System.String)">
            <summary>
            The element to bind to
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Builder.EventName(System.String)">
            <summary>
            (optional) The event to bind to (defaults to 'keydown')
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Builder.Enable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Builder.Disable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.KeyMap.Builder.AddKeyBinding(Ext.Net.KeyBinding)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.History">
            <summary>
            History management component that allows you to register arbitrary tokens that signify application history state on navigation actions.
            </summary>
        </member>
        <member name="M:Ext.Net.History.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.History.ToScript(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.History.GetCurrent(System.Web.UI.Page)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.History.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.History.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.History.CallHistory(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.History.Add(System.String,System.Boolean)">
            <summary>
            Add a new token to the history stack. This can be any arbitrary value, although it would commonly be the concatenation of a component id and another id marking the specifc history state of that component.
            </summary>
        </member>
        <member name="M:Ext.Net.History.Add(System.String)">
            <summary>
            Add a new token to the history stack. This can be any arbitrary value, although it would commonly be the concatenation of a component id and another id marking the specifc history state of that component.
            </summary>
        </member>
        <member name="M:Ext.Net.History.Back">
            <summary>
            Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).
            </summary>
        </member>
        <member name="M:Ext.Net.History.Forward">
            <summary>
            Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).
            </summary>
        </member>
        <member name="P:Ext.Net.History.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.History.RenderForm">
            <summary>
            False to don't render form tags. By default check ASP.NET form and if it is absent then render form.
            </summary>
        </member>
        <member name="P:Ext.Net.History.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.History.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.History.Config.RenderForm">
            <summary>
            False to don't render form tags. By default check ASP.NET form and if it is absent then render form.
            </summary>
        </member>
        <member name="P:Ext.Net.History.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.History.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.History.Builder.RenderForm(System.Boolean)">
            <summary>
            False to don't render form tags. By default check ASP.NET form and if it is absent then render form.
            </summary>
        </member>
        <member name="M:Ext.Net.History.Builder.CallHistory(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.History.Builder.Add(System.String,System.Boolean)">
            <summary>
            Add a new token to the history stack. This can be any arbitrary value, although it would commonly be the concatenation of a component id and another id marking the specifc history state of that component.
            </summary>
        </member>
        <member name="M:Ext.Net.History.Builder.Add(System.String)">
            <summary>
            Add a new token to the history stack. This can be any arbitrary value, although it would commonly be the concatenation of a component id and another id marking the specifc history state of that component.
            </summary>
        </member>
        <member name="M:Ext.Net.History.Builder.Back">
            <summary>
            Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).
            </summary>
        </member>
        <member name="M:Ext.Net.History.Builder.Forward">
            <summary>
            Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Activate">
            <summary>
            Fires after the Panel has been visually activated. Note that Panels do not directly support being activated, but some Panel subclasses do (like Ext.Window). Panels which are child Components of a TabPanel fire the activate and deactivate events under the control of the TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.BeforeClose">
            <summary>
            Fires before the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like Ext.Window). This event only applies to such subclasses. A handler can return false to cancel the close.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.BeforeCollapse">
            <summary>
            Fires before the Panel is collapsed. A handler can return false to cancel the collapse.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.BeforeExpand">
            <summary>
            Fires before the Panel is expanded. A handler can return false to cancel the expand.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.BodyResize">
            <summary>
            Fires after the Panel has been resized.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Close">
            <summary>
            Fires after the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like Ext.Window).
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Collapse">
            <summary>
            Fires after the Panel has been collapsed.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Deactivate">
            <summary>
            Fires after the Panel has been visually deactivated. Note that Panels do not directly support being deactivated, but some Panel subclasses do (like Ext.Window). Panels which are child Components of a TabPanel fire the activate and deactivate events under the control of the TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Expand">
            <summary>
            Fires after the Panel has been expanded.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.TitleChange">
            <summary>
            Fires after the Panel title has been set or changed.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.BeforeUpdate">
            <summary>
            Fires before iframe loading.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Update">
            <summary>
            Fired after successful update is made.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.Failure">
            <summary>
            Fired on update failure.
            </summary>
        </member>
        <member name="P:Ext.Net.PanelListeners.IconChange">
            <summary>
            Fires after the Panel icon class has been set or changed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.BodyScroll">
            <summary>
            Fires when the body element is scrolled.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.CellClick">
            <summary>
            Fires when a cell is clicked. The data for the cell is drawn from the Record for this row.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.CellContextMenu">
            <summary>
            Fires when a cell is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.CellDblClick">
            <summary>
            Fires when a cell is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.CellMouseDown">
            <summary>
            Fires before a cell is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.Click">
            <summary>
            The raw click event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.ColumnMove">
            <summary>
            Fires when the user moves a column.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.ColumnResize">
            <summary>
            Fires when the user resizes a column.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.ContainerMouseDown">
            <summary>
            Fires before the container is clicked. The container consists of any part of the grid body that is not covered by a row.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.ContextMenu">
            <summary>
            The raw contextmenu event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.DblClick">
            <summary>
            The raw dblclick event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.HeaderClick">
            <summary>
            Fires when a header is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.HeaderContextMenu">
            <summary>
            Fires when a header is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.HeaderDblClick">
            <summary>
            Fires when a header cell is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.HeaderMouseDown">
            <summary>
            Fires before a header is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.KeyDown">
            <summary>
            The raw keydown event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.KeyPress">
            <summary>
            The raw keypress event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.MouseDown">
            <summary>
            The raw mousedown event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.MouseOut">
            <summary>
            The raw mouseout event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.MouseOver">
            <summary>
            The raw mouseover event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.MouseUp">
            <summary>
            The raw mouseup event for the entire grid.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowClick">
            <summary>
            Fires when a row is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowBodyClick">
            <summary>
            Fires when the row body is clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowBodyContextMenu">
            <summary>
            Fires when the row body is right clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowBodyDblClick">
            <summary>
            Fires when the row body is double clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowBodyMouseDown">
            <summary>
            Fires before the row body is clicked. <b>Only applies for grids with {@link Ext.grid.GridView#enableRowBody enableRowBody} configured.</b>
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowContextMenu">
            <summary>
            Fires when a row is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowDblClick">
            <summary>
            Fires when a row is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.RowMouseDown">
            <summary>
            Fires before a row is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.SortChange">
            <summary>
            Fires when the grid's store sort changes.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.AfterEdit">
            <summary>
            Fires after a cell is edited.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.BeforeEdit">
            <summary>
            Fires after a cell is edited.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.ValidateEdit">
            <summary>
            Fires after a cell is edited.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.Command">
            <summary>
            Fires when the command is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.GroupCommand">
            <summary>
            Fires when the group command is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.GroupMouseDown">
            <summary>
            Fires before a group header is clicked. <b>Only applies for grids with a {@link Ext.grid.GroupingView GroupingView}</b>.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelListeners.FilterUpdate">
            <summary>
            Fires when the grid's filter is updated.
            </summary>
        </member>
        <member name="T:Ext.Net.GridPanelBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.AddColumn(Ext.Net.ColumnBase)">
            <summary>
            Add new column to the end.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.InsertColumn(System.Int32,Ext.Net.ColumnBase)">
            <summary>
            Insert new column.
            </summary>
            <param name="index"></param>
            <param name="column"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.RemoveColumn(System.Int32)">
            <summary>
            Remove column.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Reconfigure">
            <summary>
            Reconfigure columns.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Reconfigure(System.String,Ext.Net.ColumnModel)">
            <summary>
            Reconfigures the grid to use a different Store and Column Model and fires the 'reconfigure' event. The View will be bound to the new objects and refreshed.
            Be aware that upon reconfiguring a GridPanel, certain existing settings may become invalidated. For example the configured autoExpandColumn may no longer exist in the new ColumnModel. Also, an existing PagingToolbar will still be bound to the old Store, and will need rebinding. Any plugins might also need reconfiguring with the new data.
            </summary>
            <param name="store">Store ClientID</param>
            <param name="cm">New ColumnModel</param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Reconfigure(System.String)">
            <summary>
            Reconfigures the grid to use a different Store and Column Model and fires the 'reconfigure' event. The View will be bound to the new objects and refreshed.
            Be aware that upon reconfiguring a GridPanel, certain existing settings may become invalidated. For example the configured autoExpandColumn may no longer exist in the new ColumnModel. Also, an existing PagingToolbar will still be bound to the old Store, and will need rebinding. Any plugins might also need reconfiguring with the new data.
            </summary>
            <param name="store">Store ClientID</param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.InsertRecord(System.Int32,System.Object)">
            <summary>
            Insert record
            </summary>
            <param name="index"></param>
            <param name="values"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.InsertRecord(System.Int32,System.Object,System.Boolean)">
            <summary>
            Insert record
            </summary>
            <param name="index"></param>
            <param name="values"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.AddRecord(System.Object)">
            <summary>
            Add record
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.AddRecord(System.Object,System.Boolean)">
            <summary>
            Add record
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.DeleteSelected">
            <summary>
            Delete selected records
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.RefreshView">
            <summary>
            Refresh view
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.SetHideHeaders(System.Boolean)">
            <summary>
            Show/Hide the grid's header.
            </summary>
            <param name="hide"></param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.StartEditing(System.Int32,System.Int32)">
            <summary>
            Starts editing the specified for the specified row/column
            </summary>
            <param name="rowIndex">row index</param>
            <param name="colIndex">column index</param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.StopEditing(System.Boolean)">
            <summary>
            Stops any active editing
            </summary>
            <param name="cancel">True to cancel any changes</param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.StopEditing">
            <summary>
            Stops any active editing
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.UpdateCell(System.Int32,System.String,System.Object)">
            <summary>
            Update cell content
            </summary>
            <param name="rowIndex">row index</param>
            <param name="dataIndex">data index</param>
            <param name="value">value</param>
        </member>
        <member name="M:Ext.Net.GridPanelBase.UpdateCell(System.Object,System.String,System.Object)">
            <summary>
            Update cell content
            </summary>
            <param name="id">id value</param>
            <param name="dataIndex">data index</param>
            <param name="value">value</param>
        </member>
        <member name="P:Ext.Net.GridPanelBase.AutoExpandColumn">
            <summary>
            The id of a column in this grid that should expand to fill unused space. This id can not be 0.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.AutoExpandMax">
            <summary>
            The maximum width the autoExpandColumn can have (if enabled). Defaults to 1000.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.AutoExpandMin">
            <summary>
            The minimum width the autoExpandColumn can have (if enabled). defaults to 50.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.ClearEditorFilter">
            <summary>
            True to clear editor filter before start editing. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.ColumnLines">
            <summary>
            true to add css for column separation lines. Default is false.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.DDGroup">
            <summary>
            The DD group this GridPanel belongs to. Defaults to 'GridDD' if not specified.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.DDText">
            <summary>
            Configures the text in the drag proxy. Defaults to: '{0} selected row{1}' {0} is replaced with the number of selected rows.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.DeferRowRender">
            <summary>
            True to enable deferred row rendering. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.DisableSelection">
            <summary>
            True to disable selections in the grid (defaults to false). - ignored a SelectionModel is specified.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.EnableColumnHide">
            <summary>
            True to enable hiding of columns with the header context menu.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.EnableColumnMove">
            <summary>
            True to enable drag and drop reorder of columns.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.EnableColumnResize">
            <summary>
            False to turn off column resizing for the whole grid (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.EnableDragDrop">
            <summary>
            True to enable drag and drop of rows.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.EnableHdMenu">
            <summary>
            True to enable the drop down button for menu in the headers.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.HideHeaders">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.LoadMask">
            <summary>
            An Ext.LoadMask to mask the grid while loading (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.SaveMask">
            <summary>
            An Ext.SaveMask to mask the grid while saving (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.MaxHeight">
            <summary>
            Sets the maximum height of the grid - ignored if autoHeight is not on.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.MinColumnWidth">
            <summary>
            The minimum width a column can be resized to. Defaults to 25.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.MonitorWindowResize">
            <summary>
            True to autoSize the grid when the window resizes. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.SelectionModel">
            <summary>
            Any subclass of AbstractSelectionModel that will provide the selection model for the grid (defaults to Ext.grid.RowSelectionModel if not specified).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Store">
            <summary>
            The Ext.Net.Store the grid should use as its data source (required).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.PbarID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.StripeRows">
            <summary>
            True to stripe the rows. Default is false.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.TrackMouseOver">
            <summary>
            True to highlight rows when the mouse is over. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.View">
            <summary>
            The Ext.grid.GridView used by the grid. This can be set before a call to render().
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.AutoEncode">
            <summary>
            True to automatically HTML encode and decode values pre and post edit (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.ClicksToEdit">
            <summary>
            The number of clicks on a cell required to display the cell's editor (defaults to 2).
            Available values: 2, 1, 0
            Setting this option to 0 means that mousedown on the selected cell starts editing that cell.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.FireSelectOnLoad">
            <summary>
            Set init selection without event firing
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.ForceValidation">
            <summary>
            True to force validation even if the value is unmodified (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.SelectionSavingBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.SelectionMemory">
            <summary>
            True to enable saving selection during paging. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.MemoryIDField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.GetDragDropText">
            <summary>
            Called to get grid's drag proxy text, by default returns this.ddText.
            Parameters:
               e : The mouse up event
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.ColumnModel">
            <summary>
            The Ext.grid.ColumnModel to use when rendering the grid (required).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.AutoExpandColumn">
            <summary>
            The id of a column in this grid that should expand to fill unused space. This id can not be 0.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.AutoExpandMax">
            <summary>
            The maximum width the autoExpandColumn can have (if enabled). Defaults to 1000.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.AutoExpandMin">
            <summary>
            The minimum width the autoExpandColumn can have (if enabled). defaults to 50.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.ClearEditorFilter">
            <summary>
            True to clear editor filter before start editing. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.ColumnLines">
            <summary>
            true to add css for column separation lines. Default is false.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.DDGroup">
            <summary>
            The DD group this GridPanel belongs to. Defaults to 'GridDD' if not specified.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.DDText">
            <summary>
            Configures the text in the drag proxy. Defaults to: '{0} selected row{1}' {0} is replaced with the number of selected rows.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.DeferRowRender">
            <summary>
            True to enable deferred row rendering. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.DisableSelection">
            <summary>
            True to disable selections in the grid (defaults to false). - ignored a SelectionModel is specified.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.EnableColumnHide">
            <summary>
            True to enable hiding of columns with the header context menu.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.EnableColumnMove">
            <summary>
            True to enable drag and drop reorder of columns.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.EnableColumnResize">
            <summary>
            False to turn off column resizing for the whole grid (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.EnableDragDrop">
            <summary>
            True to enable drag and drop of rows.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.EnableHdMenu">
            <summary>
            True to enable the drop down button for menu in the headers.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.HideHeaders">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.LoadMask">
            <summary>
            An Ext.LoadMask to mask the grid while loading (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.SaveMask">
            <summary>
            An Ext.SaveMask to mask the grid while saving (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.MaxHeight">
            <summary>
            Sets the maximum height of the grid - ignored if autoHeight is not on.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.MinColumnWidth">
            <summary>
            The minimum width a column can be resized to. Defaults to 25.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.MonitorWindowResize">
            <summary>
            True to autoSize the grid when the window resizes. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.SelectionModel">
            <summary>
            Any subclass of AbstractSelectionModel that will provide the selection model for the grid (defaults to Ext.grid.RowSelectionModel if not specified).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.Store">
            <summary>
            The Ext.Net.Store the grid should use as its data source (required).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.StripeRows">
            <summary>
            True to stripe the rows. Default is false.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.TrackMouseOver">
            <summary>
            True to highlight rows when the mouse is over. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.View">
            <summary>
            The Ext.grid.GridView used by the grid. This can be set before a call to render().
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.AutoEncode">
            <summary>
            True to automatically HTML encode and decode values pre and post edit (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.ClicksToEdit">
            <summary>
            The number of clicks on a cell required to display the cell's editor (defaults to 2).
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.FireSelectOnLoad">
            <summary>
            Set init selection without event firing
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.ForceValidation">
            <summary>
            True to force validation even if the value is unmodified (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.SelectionSavingBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.SelectionMemory">
            <summary>
            True to enable saving selection during paging. Default is true.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.MemoryIDField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.GetDragDropText">
            <summary>
            Called to get grid's drag proxy text, by default returns this.ddText.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanelBase.Config.ColumnModel">
            <summary>
            The Ext.grid.ColumnModel to use when rendering the grid (required).
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AutoExpandColumn(System.String)">
            <summary>
            The id of a column in this grid that should expand to fill unused space. This id can not be 0.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AutoExpandMax(System.Int32)">
            <summary>
            The maximum width the autoExpandColumn can have (if enabled). Defaults to 1000.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AutoExpandMin(System.Int32)">
            <summary>
            The minimum width the autoExpandColumn can have (if enabled). defaults to 50.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.ClearEditorFilter(System.Boolean)">
            <summary>
            True to clear editor filter before start editing. Default is true.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.ColumnLines(System.Boolean)">
            <summary>
            true to add css for column separation lines. Default is false.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.DDGroup(System.String)">
            <summary>
            The DD group this GridPanel belongs to. Defaults to 'GridDD' if not specified.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.DDText(System.String)">
            <summary>
            Configures the text in the drag proxy. Defaults to: '{0} selected row{1}' {0} is replaced with the number of selected rows.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.DeferRowRender(System.Boolean)">
            <summary>
            True to enable deferred row rendering. Default is true.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.DisableSelection(System.Boolean)">
            <summary>
            True to disable selections in the grid (defaults to false). - ignored a SelectionModel is specified.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.EnableColumnHide(System.Boolean)">
            <summary>
            True to enable hiding of columns with the header context menu.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.EnableColumnMove(System.Boolean)">
            <summary>
            True to enable drag and drop reorder of columns.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.EnableColumnResize(System.Boolean)">
            <summary>
            False to turn off column resizing for the whole grid (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.EnableDragDrop(System.Boolean)">
            <summary>
            True to enable drag and drop of rows.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.EnableHdMenu(System.Boolean)">
            <summary>
            True to enable the drop down button for menu in the headers.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.HideHeaders(System.Boolean)">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.MaxHeight(System.Int32)">
            <summary>
            Sets the maximum height of the grid - ignored if autoHeight is not on.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.MinColumnWidth(System.Int32)">
            <summary>
            The minimum width a column can be resized to. Defaults to 25.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.MonitorWindowResize(System.Boolean)">
            <summary>
            True to autoSize the grid when the window resizes. Defaults to true.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.StoreID(System.String)">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.StripeRows(System.Boolean)">
            <summary>
            True to stripe the rows. Default is false.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.TrackMouseOver(System.Boolean)">
            <summary>
            True to highlight rows when the mouse is over. Default is true.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AutoEncode(System.Boolean)">
            <summary>
            True to automatically HTML encode and decode values pre and post edit (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.ClicksToEdit(System.Int32)">
            <summary>
            The number of clicks on a cell required to display the cell's editor (defaults to 2).
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.FireSelectOnLoad(System.Boolean)">
            <summary>
            Set init selection without event firing
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.ForceValidation(System.Boolean)">
            <summary>
            True to force validation even if the value is unmodified (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.SelectionSavingBuffer(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.SelectionMemory(Ext.Net.SelectionMemoryMode)">
            <summary>
            True to enable saving selection during paging. Default is true.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.MemoryIDField(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AddColumn(Ext.Net.ColumnBase)">
            <summary>
            Add new column to the end.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.InsertColumn(System.Int32,Ext.Net.ColumnBase)">
            <summary>
            Insert new column.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.RemoveColumn(System.Int32)">
            <summary>
            Remove column.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.Reconfigure">
            <summary>
            Reconfigure columns.
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.InsertRecord(System.Int32,System.Object)">
            <summary>
            Insert record
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.InsertRecord(System.Int32,System.Object,System.Boolean)">
            <summary>
            Insert record
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AddRecord(System.Object)">
            <summary>
            Add record
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.AddRecord(System.Object,System.Boolean)">
            <summary>
            Add record
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.DeleteSelected">
            <summary>
            Delete selected records
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.RefreshView">
            <summary>
            Refresh view
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.StartEditing(System.Int32,System.Int32)">
            <summary>
            Starts editing the specified for the specified row/column
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.StopEditing(System.Boolean)">
            <summary>
            Stops any active editing
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.StopEditing">
            <summary>
            Stops any active editing
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.UpdateCell(System.Int32,System.String,System.Object)">
            <summary>
            Update cell content
            </summary>
        </member>
        <member name="M:Ext.Net.GridPanelBase.Builder`2.UpdateCell(System.Object,System.String,System.Object)">
            <summary>
            Update cell content
            </summary>
        </member>
        <member name="T:Ext.Net.FileUploadField">
            <summary>
            File upload field
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.OnBeforeClientInit(Ext.Net.Observable)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Ext.Net.FileUploadField.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.FileUploadField.CallButton(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.FileUploadField.SetButtonText(System.String)">
            <summary>
            Sets this button's text
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.SetText(System.String)">
            <summary>
            Sets this text
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.SetIconClass(System.String)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.SetIconClass(Ext.Net.Icon)">
            <summary>
            Sets the CSS class that provides a background image to use as the button's icon. This method also changes the value of the iconCls config internally.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.ButtonText">
            <summary>
            The button text to display on the upload button (defaults to 'Browse...'). Note that if you supply a value for ButtonCfg, the ButtonCfg.Text value will be used instead if available.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.ButtonOnly">
            <summary>
            True to display the file upload field as a button with no visible text field (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.ButtonOffset">
            <summary>
            The number of pixels of space reserved between the button and the text field (defaults to 3).  Note that this only applies if ButtonOnly=false.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.ReadOnly">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Icon">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.IconClsProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.FileBytes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.FileContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.HasFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.PostedFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.Text(System.String)">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.ButtonText(System.String)">
            <summary>
            The button text to display on the upload button (defaults to 'Browse...'). Note that if you supply a value for ButtonCfg, the ButtonCfg.Text value will be used instead if available.
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.ButtonOnly(System.Boolean)">
            <summary>
            True to display the file upload field as a button with no visible text field (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.ButtonOffset(System.Int32)">
            <summary>
            The number of pixels of space reserved between the button and the text field (defaults to 3).  Note that this only applies if ButtonOnly=false.
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.ReadOnly(System.Boolean)">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.FileUploadField.Builder.IconCls(System.String)">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.ButtonText">
            <summary>
            The button text to display on the upload button (defaults to 'Browse...'). Note that if you supply a value for ButtonCfg, the ButtonCfg.Text value will be used instead if available.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.ButtonOnly">
            <summary>
            True to display the file upload field as a button with no visible text field (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.ButtonOffset">
            <summary>
            The number of pixels of space reserved between the button and the text field (defaults to 3).  Note that this only applies if ButtonOnly=false.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.ReadOnly">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.Icon">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.DropZone">
            <summary>
            This class provides a container DD instance that allows dropping on multiple child target nodes.
            By default, this class requires that child nodes accepting drop are registered with Ext.dd.Registry. However a simpler way to allow a DropZone to manage any number of target elements is to configure the DropZone with an implementation of getTargetFromEvent which interrogates the passed mouse event to see if it has taken place within an element, or class of elements. This is easily done by using the event's getTarget method to identify a node based on a Ext.DomQuery selector.
            Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over a drop target, that target is passed as the first parameter to onNodeEnter, onNodeOver, onNodeOut, onNodeDrop. You may configure the instance of DropZone with implementations of these methods to provide application-specific behaviour for these events to update both application state, and UI state.
            </summary>
        </member>
        <member name="T:Ext.Net.DropTarget">
            <summary>
            This class provides a container DD instance that allows dragging of multiple child source nodes.
            </summary>
        </member>
        <member name="T:Ext.Net.DDTarget">
            <summary>
            A DragDrop implementation that does not move, but can be a drop target. You would get the same result by simply omitting implementation for the event callbacks, but this way we reduce the processing cost of the event listener and the callbacks.
            </summary>
        </member>
        <member name="T:Ext.Net.DragDrop">
            <summary>
            Defines the interface and base operation of items that that can be dragged or can be drop targets. It was designed to be extended, overriding the event handlers for startDrag, onDrag, onDragOver and onDragOut. Up to three html elements can be associated with a DragDrop instance:
               linked element: the element that is passed into the constructor. This is the element which defines the boundaries for interaction with other DragDrop objects.
               handle element(s): The drag operation only occurs if the element that was clicked matches a handle element. By default this is the linked element, but there are times that you will want only a portion of the linked element to initiate the drag operation, and the setHandleElId() method provides a way to define this.
               drag element: this represents the element that would be moved along with the cursor during a drag operation. By default, this is the linked element itself as in Ext.dd.DD. setDragElId() lets you define a separate element that would be moved, as in Ext.dd.DDProxy.
            </summary>
        </member>
        <member name="M:Ext.Net.DragDrop.AddInvalidHandleClass(System.String)">
            <summary>
            Lets you specify a css class of elements that will not initiate a drag
            </summary>
            <param name="cssClass">the class of the elements you wish to ignore</param>
        </member>
        <member name="M:Ext.Net.DragDrop.AddInvalidHandleId(System.String)">
            <summary>
            Lets you to specify an element id for a child of a drag handle that should not initiate a drag
            </summary>
            <param name="id">the element id of the element you wish to ignore</param>
        </member>
        <member name="M:Ext.Net.DragDrop.AddInvalidHandleType(System.String)">
            <summary>
            Allows you to specify a tag name that should not start a drag operation when clicked. This is designed to facilitate embedding links within a drag handle that do something other than start the drag.
            </summary>
            <param name="tagName">the type of element to exclude</param>
        </member>
        <member name="M:Ext.Net.DragDrop.AddToGroup(System.String)">
            <summary>
            Add this instance to a group of related drag/drop objects. All instances belong to at least one group, and can belong to as many groups as needed.
            </summary>
            <param name="sGroup">the name of the group</param>
        </member>
        <member name="M:Ext.Net.DragDrop.ApplyConfig">
            <summary>
            Applies the configuration parameters that were passed into the constructor. This is supposed to happen at each level through the inheritance chain. So a DDProxy implentation will execute apply config on DDProxy, DD, and DragDrop in order to get all of the parameters that are available in each object.
            </summary>
        </member>
        <member name="M:Ext.Net.DragDrop.ClearConstraints">
            <summary>
            Clears any constraints applied to this instance. Also clears ticks since they can't exist independent of a constraint at this time.
            </summary>
        </member>
        <member name="M:Ext.Net.DragDrop.ClearTicks">
            <summary>
            Clears any tick interval defined for this instance
            </summary>
        </member>
        <member name="M:Ext.Net.DragDrop.ConstrainTo(System.String,Ext.Net.Paddings,System.Boolean)">
            <summary>
            Initializes the drag drop object's constraints to restrict movement to a certain element.
            </summary>
            <param name="constrainTo">The element to constrain to.</param>
            <param name="pad">Pad provides a way to specify "padding" of the constraints</param>
            <param name="inContent">Constrain the draggable in the content box of the element (inside padding and borders)</param>
        </member>
        <member name="M:Ext.Net.DragDrop.ConstrainTo(System.String)">
            <summary>
            Initializes the drag drop object's constraints to restrict movement to a certain element.
            </summary>
            <param name="constrainTo">The element to constrain to.</param>
        </member>
        <member name="M:Ext.Net.DragDrop.Lock">
            <summary>
            Lock this instance
            </summary>
        </member>
        <member name="M:Ext.Net.DragDrop.RemoveFromGroup(System.String)">
            <summary>
            Remove's this instance from the supplied interaction group
            </summary>
            <param name="sGroup">The group to drop</param>
        </member>
        <member name="M:Ext.Net.DragDrop.RemoveInvalidHandleClass(System.String)">
            <summary>
            Unsets an invalid css class
            </summary>
            <param name="cssClass">the class of the element(s) you wish to re-enable</param>
        </member>
        <member name="M:Ext.Net.DragDrop.RemoveInvalidHandleId(System.String)">
            <summary>
            Unsets an invalid handle id
            </summary>
            <param name="id">the id of the element to re-enable</param>
        </member>
        <member name="M:Ext.Net.DragDrop.RemoveInvalidHandleType(System.String)">
            <summary>
            Unsets an excluded tag name set by addInvalidHandleType
            </summary>
            <param name="tagName">the type of element to unexclude</param>
        </member>
        <member name="M:Ext.Net.DragDrop.ResetConstraints(System.Boolean)">
            <summary>
            resetConstraints must be called if you manually reposition a dd element.
            </summary>
            <param name="maintainOffset"></param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetDragElId(System.String)">
            <summary>
            Allows you to specify that an element other than the linked element will be moved with the cursor during a drag
            </summary>
            <param name="id">the id of the element that will be used to initiate the drag</param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetHandleElId(System.String)">
            <summary>
            Allows you to specify a child of the linked element that should be used to initiate the drag operation. An example of this would be if you have a content div with text and links. Clicking anywhere in the content area would normally start the drag operation. Use this method to specify that an element inside of the content div is the element that starts the drag operation.
            </summary>
            <param name="id">the id of the element that will be used to initiate the drag.</param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetInitPosition(System.Int32,System.Int32)">
            <summary>
            Stores the initial placement of the linked element.
            </summary>
            <param name="diffX">the X offset, default 0</param>
            <param name="diffY">the Y offset, default 0</param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetOuterHandleElId(System.String)">
            <summary>
            Allows you to set an element outside of the linked element as a drag handle
            </summary>
            <param name="id">id of the element that will be used to initiate the drag</param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the padding for the target zone in px. Effectively expands (or reduces) the virtual object size for targeting calculations. Supports css-style shorthand; if only one parameter is passed, all sides will have that padding, and if only two are passed, the top and bottom will have the first param, the left and right the second.
            </summary>
            <param name="iTop">Top pad</param>
            <param name="iRight">Right pad</param>
            <param name="iBot">Bot pad</param>
            <param name="iLeft">Left pad</param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetXConstraint(System.Int32,System.Int32,System.Int32)">
            <summary>
            By default, the element can be dragged any place on the screen. Use this method to limit the horizontal travel of the element. Pass in 0,0 for the parameters if you want to lock the drag to the y axis.
            </summary>
            <param name="iLeft">the number of pixels the element can move to the left</param>
            <param name="iRight">the number of pixels the element can move to the right</param>
            <param name="iTickSize">optional parameter for specifying that the element should move iTickSize pixels at a time.</param>
        </member>
        <member name="M:Ext.Net.DragDrop.SetYConstraint(System.Int32,System.Int32,System.Int32)">
            <summary>
            By default, the element can be dragged any place on the screen. Set this to limit the vertical travel of the element. Pass in 0,0 for the parameters if you want to lock the drag to the x axis.
            </summary>
            <param name="iUp">the number of pixels the element can move up</param>
            <param name="iDown">the number of pixels the element can move down</param>
            <param name="iTickSize">optional parameter for specifying that the element should move iTickSize pixels at a time.</param>
        </member>
        <member name="M:Ext.Net.DragDrop.Unlock">
            <summary>
            Unlock this instace
            </summary>
        </member>
        <member name="M:Ext.Net.DragDrop.Unreg">
            <summary>
            Remove all drag and drop hooks for this element
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.DefaultPadding">
            <summary>
            Provides default constraint padding to "constrainTo" elements (defaults to {left: 0, right:0, top:0, bottom:0}).
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.Groups">
            <summary>
            The group defines a logical collection of DragDrop objects that are related. Instances only get events when interacting with other DragDrop object in the same group. This lets us define multiple groups using a single DragDrop subclass if we want.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.HasOuterHandles">
            <summary>
            By default, drags can only be initiated if the mousedown occurs in the region the linked element is. This is done in part to work around a bug in some browsers that mis-report the mousedown if the previous mouseup happened outside of the window. This property is set to true if outer handles are defined.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.Target">
            <summary>
            ID of the element that is linked to this instance
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.Group">
            <summary>
            The group of related DragDrop objects
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.IgnoreSelf">
            <summary>
            Set to false to enable a DragDrop object to fire drag events while dragging over its own Element. Defaults to true - DragDrop objects do not by default fire drag events to themselves.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.InvalidHandleClasses">
            <summary>
            An Array of CSS class names for elements to be considered in valid as drag handles.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.InvalidHandleTypes">
            <summary>
            An array who's items identify HTML tags to be considered invalid as drag handles.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.InvalidHandleIds">
            <summary>
            An array who's items identify the IDs of elements to be considered invalid as drag handles
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.IsTarget">
            <summary>
            By default, all instances can be a drop target. This can be disabled by setting isTarget to false.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.MaintainOffset">
            <summary>
            Maintain offsets when we resetconstraints. Set to true when you want the position of the element relative to its parent to stay the same when the page changes
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.MoveOnly">
            <summary>
            When set to true, other DD objects in cooperating DDGroups do not receive notification events when this DD object is dragged over them. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.Padding">
            <summary>
            An Array of CSS class names for elements to be considered in valid as drag handles.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.PrimaryButtonOnly">
            <summary>
            By default the drag and drop instance will only respond to the primary button click (left button for a right-handed mouse). Set to true to allow drag and drop to start with any mouse click that is propogated by the browser
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.XTicks">
            <summary>
            Array of pixel locations the element will snap to if we specified a horizontal graduation/interval. This array is generated automatically when you define a tick interval.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.YTicks">
            <summary>
            Array of pixel locations the element will snap to if we specified a vertical graduation/interval. This array is generated automatically when you define a tick interval.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.EndDrag">
            <summary>
            Fired when we are done dragging the object
            Parameters:
                e : the mouseup event
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnAvailable">
            <summary>
            Override the onAvailable method to do what is needed after the initial position was determined.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnDrag">
            <summary>
            Abstract method called during the onMouseMove event while dragging an object.
            Parameters:
                e : the mouseup event
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnDragDrop">
            <summary>
            Abstract method called when this item is dropped on another DragDrop obj
            Parameters:
                e  : the mouseup event
                id : In POINT mode, the element id this was dropped on. In INTERSECT mode, an array of dd items this was dropped on.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnDragEnter">
            <summary>
            Abstract method called when this element fist begins hovering over another DragDrop obj
            Parameters:
                e  : the mouseup event
                id : In POINT mode, the element id this is hovering over. In INTERSECT mode, an array of one or more dragdrop items being hovered over.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnDragOut">
            <summary>
            Abstract method called when we are no longer hovering over an element
            Parameters:
                e  : the mouseup event
                id : In POINT mode, the element id this was hovering over. In INTERSECT mode, an array of dd items that the mouse is no longer over.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnDragOver">
            <summary>
            Abstract method called when this element is hovering over another DragDrop obj
            Parameters:
                e  : the mouseup event
                id : In POINT mode, the element id this is hovering over. In INTERSECT mode, an array of dd items being hovered over.
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnInvalidDrop">
            <summary>
            Abstract method called when this item is dropped on an area with no drop target
            Parameters:
                e  : the mouseup event
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnMouseDown">
            <summary>
            Event handler that fires when a drag/drop obj gets a mousedown
            Parameters:
                e  : the mousedown event
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.OnMouseUp">
            <summary>
            Event handler that fires when a drag/drop obj gets a mouseup
            Parameters:
                e  : the mousedown event
            </summary>
        </member>
        <member name="P:Ext.Net.DragDrop.StartDrag">
            <summary>
            Abstract method called after a drag/drop object is clicked and the drag or mousedown time thresholds have beeen met.
            Parameters:
                x  : click location
                y  : click location
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.Group">
            <summary>
            A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.DropAllowed">
            <summary>
            The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.DropNotAllowed">
            <summary>
            The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.OverClass">
            <summary>
            The CSS class applied to the drop target element while the drag source is over it (defaults to "").
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.ContainerScroll">
            <summary>
            True to register this container with the Scrollmanager for auto scrolling during drag operations.
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.NotifyDrop">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop target that the dragged item has been dropped on it. This method has no default implementation and returns false, so you must provide an implementation that does something to process the drop event and returns true so that the drag source's repair action does not run.
            Parameters:
               source : The drag source that was dragged over this drop target
               e : The event
               data : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.NotifyEnter">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop target that the source is now over the target. This default implementation adds the CSS class specified by overClass (if any) to the drop element and returns the dropAllowed config value. This method should be overridden if drop validation is required.
            Parameters:
               source : The drag source that was dragged over this drop target
               e : The event
               data : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.NotifyOut">
            <summary>
            The function a Ext.dd.DragSource calls once to notify this drop target that the source has been dragged out of the target without dropping. This default implementation simply removes the CSS class specified by overClass (if any) from the drop element.
            Parameters:
               source : The drag source that was dragged over this drop target
               e : The event
               data : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropTarget.NotifyOver">
            <summary>
            The function a Ext.dd.DragSource calls continuously while it is being dragged over the target. This method will be called on every mouse movement while the drag source is over the drop target. This default implementation simply returns the dropAllowed config value.
            Parameters:
               source : The drag source that was dragged over this drop target
               e : The event
               data : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.GetTargetFromEvent">
            <summary>
            Returns a custom data object associated with the DOM node that is the target of the event. By default this looks up the event target in the Ext.dd.Registry, although you can override this method to provide your own custom lookup.
            Parameters:
               e : The event
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.OnContainerDrop">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has been dropped on it, but not on any of its registered drop nodes. The default implementation returns false, so it should be overridden to provide the appropriate processing of the drop event if you need the drop zone itself to be able to accept drops. It should return true when valid so that the drag source's repair action does not run.
            Parameters:
              source : The drag source that was dragged over this drop zone 
              e      : The event
              data   : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.OnContainerOver">
            <summary>
            Called while the DropZone determines that a Ext.dd.DragSource is being dragged over it, but not over any of its registered drop nodes. The default implementation returns this.dropNotAllowed, so it should be overridden to provide the proper feedback if necessary.
            Parameters:
              source : The drag source that was dragged over this drop zone 
              e      : The event
              data   : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.OnNodeDrop">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has been dropped onto the drop node. The default implementation returns false, so it should be overridden to provide the appropriate processing of the drop event and return true so that the drag source's repair action does not run.
            Parameters:
              nodeData : The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node)
              source   : The drag source that was dragged over this drop zone 
              e        : The event
              data     : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.OnNodeEnter">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has entered a drop node that has either been registered or detected by a configured implementation of getTargetFromEvent. This method has no default implementation and should be overridden to provide node-specific processing if necessary.
            Parameters:
              nodeData : The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node)
              source   : The drag source that was dragged over this drop zone 
              e        : The event
              data     : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.OnNodeOut">
            <summary>
            Called when the DropZone determines that a Ext.dd.DragSource has been dragged out of the drop node without dropping. This method has no default implementation and should be overridden to provide node-specific processing if necessary.
            Parameters:
              nodeData : The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node)
              source   : The drag source that was dragged over this drop zone 
              e        : The event
              data     : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DropZone.OnNodeOver">
            <summary>
            Called while the DropZone determines that a Ext.dd.DragSource is over a drop node that has either been registered or detected by a configured implementation of getTargetFromEvent. The default implementation returns this.dropNotAllowed, so it should be overridden to provide the proper feedback.
            Parameters:
              nodeData : The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node)
              source   : The drag source that was dragged over this drop zone 
              e        : The event
              data     : An object containing arbitrary data supplied by the drag source
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.BeforeClick">
            <summary>
            Fires before a click is processed. Returns false to cancel the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.BeforeSelect">
            <summary>
            Fires before a selection is made. If any handlers return false, the selection is cancelled.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.Click">
            <summary>
            Fires when a template node is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.ContainerClick">
            <summary>
            Fires when a click occurs and it is not on a template node.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.ContextMenu">
            <summary>
            Fires when a template node is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.DblClick">
            <summary>
            Fires when a template node is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.MouseEnter">
            <summary>
            Fires when the mouse enters a template node. trackOver:true or an overCls must be set to enable this event.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.MouseLeave">
            <summary>
            Fires when the mouse leaves a template node. trackOver:true or an overCls must be set to enable this event.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewDirectEvents.SelectionChange">
            <summary>
            Fires when the selected nodes change.
            </summary>
        </member>
        <member name="T:Ext.Net.ComponentMenuItem">
            <summary>
            A menu item that wraps the choosen component.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.ComponentElement">
            <summary>
            The element of component which will be used during menu item rendering
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Shift">
            <summary>
            If true then element will be shiffted on horizontal, the icon place will be visible
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Target">
            <summary>
            The target element which will be placed to toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Config.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Config.ComponentElement">
            <summary>
            The element of component which will be used during menu item rendering
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Config.Shift">
            <summary>
            If true then element will be shiffted on horizontal, the icon place will be visible
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Config.Target">
            <summary>
            The target element which will be placed to toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentMenuItem.Config.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ComponentMenuItem.Builder.ComponentElement(Ext.Net.TargetElement)">
            <summary>
            The element of component which will be used during menu item rendering
            </summary>
        </member>
        <member name="M:Ext.Net.ComponentMenuItem.Builder.Shift(System.Boolean)">
            <summary>
            If true then element will be shiffted on horizontal, the icon place will be visible
            </summary>
        </member>
        <member name="M:Ext.Net.ComponentMenuItem.Builder.Target(System.String)">
            <summary>
            The target element which will be placed to toolbar.
            </summary>
        </member>
        <member name="M:Ext.Net.ComponentMenuItem.Builder.HideOnClick(System.Boolean)">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to false).
            </summary>
        </member>
        <member name="T:Ext.Net.CommandSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.CommandColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Hideable">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Commands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.GroupCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.PrepareToolbar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.PrepareGroupToolbar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Config.Hideable">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Config.Commands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Config.GroupCommands">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Config.PrepareToolbar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandColumn.Config.PrepareGroupToolbar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CommandColumn.Builder.Hideable(System.Boolean)">
            <summary>
            (optional) Specify as false to prevent the user from hiding this column. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItemDirectEvents.Activate">
            <summary>
            Fires when this item is activated
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItemDirectEvents.Click">
            <summary>
            Fires when this item is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.BaseMenuItemDirectEvents.Deactivate">
            <summary>
            Fires when this item is deactivated
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItemDirectEvents.BeforeCheckChange">
            <summary>
            Fires before the checked value is set, providing an opportunity to cancel if needed
            </summary>
        </member>
        <member name="P:Ext.Net.CheckMenuItemDirectEvents.CheckChange">
            <summary>
            Fires after the checked value has been set
            </summary>
        </member>
        <member name="T:Ext.Net.Button">
            <summary>
            Simple Button class
            </summary>
        </member>
        <member name="M:Ext.Net.Button.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Button.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Ext.Net.Button.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="handler"></param>
        </member>
        <member name="P:Ext.Net.Button.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Button.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Button.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Button.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.Button.DirectClick">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.Button.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Button.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.BorderLayoutRegion">
            <summary>
            This is a region of a BorderLayout that acts as a subcontainer within the layout. Each region has its own layout that is independent of other regions and the containing BorderLayout, and can be any of the valid Ext layout types.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Items">
            <summary>
            Region items
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.AnimFloat">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel that will close again once the user mouses out of that panel (or clicks out if AutoHide = false). Setting animFloat to false will prevent the open and close of these floated panels from being animated (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.AutoHide">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel. If autoHide is true, the panel will automatically hide after the user mouses out of the panel. If autoHide is false, the panel will continue to display until the user clicks outside of the panel (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.CMarginsSummary">
            <summary>
            A string containing margins to apply to the region's collapsed element. Example '5 0 5 0' (addToStart, Right, Bottom, Left)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.CMargins">
            <summary>
            An object containing margins to apply to the region's collapsed element.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.CollapseMode">
            <summary>
            By default, collapsible regions are collapsed by clicking the expand/collapse tool button that renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's split bar will also display a small collapse button in the center of the bar. In 'mini' mode the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, and the only two supported values are undefined and 'mini'. Note that if a collapsible region does not have a title bar, then collapseMode must be set to 'mini' in order for the region to be collapsible by the user as the tool button will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Collapsible">
            <summary>
            True to allow the user to collapse this region (defaults to false). If true, an expand/collapse tool button will automatically be rendered into the title bar of the region, otherwise the button will not be shown. Note that a title bar is required to display the toggle button -- if no region title is specified, the region will only be collapsible if CollapseMode is set to 'Mini'.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Floatable">
            <summary>
            True to allow clicking a collapsed region's bar to display the region's panel floated above the layout, false to force the user to fully expand a collapsed region by clicking the expand button to see it again (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.MarginsSummary">
            <summary>
            An string containing margins to apply to the region. Example '5 0 5 0' (addToStart, Right, Bottom, Left)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Margins">
            <summary>
            An object containing margins to apply to the region.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.MinHeight">
            <summary>
            The minimum allowable height in pixels for this region (defaults to 50)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.MaxHeight">
            <summary>
            The maximum allowable height in pixels for this region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.MaxWidth">
            <summary>
            The maximum allowable width in pixels for this region.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.MinWidth">
            <summary>
            The minimum allowable width in pixels for this region (defaults to 50)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.UseSplitTips">
            <summary>
            True to display a tooltip when the user hovers over a region's split bar (defaults to false). The tooltip text will be the value of either SplitTip or CollapsibleSplitTip as appropriate.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.CollapsibleSplitTip">
            <summary>
            The tooltip to display when the user hovers over a collapsible region's split bar. Only applies if UseSplitTips = true.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Split">
            <summary>
            True to display a SplitBar between this region and its neighbor, allowing the user to resize the regions dynamically (defaults to false). When split = true, it is common to specify a minSize and maxSize for the region.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.SplitTip">
            <summary>
            The tooltip to display when the user hovers over a non-collapsible region's split bar. Only applies if UseSplitTips = true.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.Items">
            <summary>
            Region items
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.AnimFloat">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel that will close again once the user mouses out of that panel (or clicks out if AutoHide = false). Setting animFloat to false will prevent the open and close of these floated panels from being animated (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.AutoHide">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel. If autoHide is true, the panel will automatically hide after the user mouses out of the panel. If autoHide is false, the panel will continue to display until the user clicks outside of the panel (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.CMarginsSummary">
            <summary>
            A string containing margins to apply to the region's collapsed element. Example '5 0 5 0' (addToStart, Right, Bottom, Left)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.CollapseMode">
            <summary>
            By default, collapsible regions are collapsed by clicking the expand/collapse tool button that renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's split bar will also display a small collapse button in the center of the bar. In 'mini' mode the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, and the only two supported values are undefined and 'mini'. Note that if a collapsible region does not have a title bar, then collapseMode must be set to 'mini' in order for the region to be collapsible by the user as the tool button will not be rendered.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.Collapsible">
            <summary>
            True to allow the user to collapse this region (defaults to false). If true, an expand/collapse tool button will automatically be rendered into the title bar of the region, otherwise the button will not be shown. Note that a title bar is required to display the toggle button -- if no region title is specified, the region will only be collapsible if CollapseMode is set to 'Mini'.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.Floatable">
            <summary>
            True to allow clicking a collapsed region's bar to display the region's panel floated above the layout, false to force the user to fully expand a collapsed region by clicking the expand button to see it again (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.MarginsSummary">
            <summary>
            An string containing margins to apply to the region. Example '5 0 5 0' (addToStart, Right, Bottom, Left)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.MinHeight">
            <summary>
            The minimum allowable height in pixels for this region (defaults to 50)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.MaxHeight">
            <summary>
            The maximum allowable height in pixels for this region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.MaxWidth">
            <summary>
            The maximum allowable width in pixels for this region.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.MinWidth">
            <summary>
            The minimum allowable width in pixels for this region (defaults to 50)
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.UseSplitTips">
            <summary>
            True to display a tooltip when the user hovers over a region's split bar (defaults to false). The tooltip text will be the value of either SplitTip or CollapsibleSplitTip as appropriate.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.CollapsibleSplitTip">
            <summary>
            The tooltip to display when the user hovers over a collapsible region's split bar. Only applies if UseSplitTips = true.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.Split">
            <summary>
            True to display a SplitBar between this region and its neighbor, allowing the user to resize the regions dynamically (defaults to false). When split = true, it is common to specify a minSize and maxSize for the region.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayoutRegion.Config.SplitTip">
            <summary>
            The tooltip to display when the user hovers over a non-collapsible region's split bar. Only applies if UseSplitTips = true.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.AnimFloat(System.Boolean)">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel that will close again once the user mouses out of that panel (or clicks out if AutoHide = false). Setting animFloat to false will prevent the open and close of these floated panels from being animated (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.AutoHide(System.Boolean)">
            <summary>
            When a collapsed region's bar is clicked, the region's panel will be displayed as a floated panel. If autoHide is true, the panel will automatically hide after the user mouses out of the panel. If autoHide is false, the panel will continue to display until the user clicks outside of the panel (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.CMarginsSummary(System.String)">
            <summary>
            A string containing margins to apply to the region's collapsed element. Example '5 0 5 0' (addToStart, Right, Bottom, Left)
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.CollapseMode(Ext.Net.CollapseMode)">
            <summary>
            By default, collapsible regions are collapsed by clicking the expand/collapse tool button that renders into the region's title bar. Optionally, when collapseMode is set to 'mini' the region's split bar will also display a small collapse button in the center of the bar. In 'mini' mode the region will collapse to a thinner bar than in normal mode. By default collapseMode is undefined, and the only two supported values are undefined and 'mini'. Note that if a collapsible region does not have a title bar, then collapseMode must be set to 'mini' in order for the region to be collapsible by the user as the tool button will not be rendered.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.Collapsible(System.Boolean)">
            <summary>
            True to allow the user to collapse this region (defaults to false). If true, an expand/collapse tool button will automatically be rendered into the title bar of the region, otherwise the button will not be shown. Note that a title bar is required to display the toggle button -- if no region title is specified, the region will only be collapsible if CollapseMode is set to 'Mini'.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.Floatable(System.Boolean)">
            <summary>
            True to allow clicking a collapsed region's bar to display the region's panel floated above the layout, false to force the user to fully expand a collapsed region by clicking the expand button to see it again (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.MarginsSummary(System.String)">
            <summary>
            An string containing margins to apply to the region. Example '5 0 5 0' (addToStart, Right, Bottom, Left)
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.MinHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum allowable height in pixels for this region (defaults to 50)
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.MaxHeight(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum allowable height in pixels for this region
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.MaxWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum allowable width in pixels for this region.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.MinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum allowable width in pixels for this region (defaults to 50)
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.UseSplitTips(System.Boolean)">
            <summary>
            True to display a tooltip when the user hovers over a region's split bar (defaults to false). The tooltip text will be the value of either SplitTip or CollapsibleSplitTip as appropriate.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.CollapsibleSplitTip(System.String)">
            <summary>
            The tooltip to display when the user hovers over a collapsible region's split bar. Only applies if UseSplitTips = true.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.Split(System.Boolean)">
            <summary>
            True to display a SplitBar between this region and its neighbor, allowing the user to resize the regions dynamically (defaults to false). When split = true, it is common to specify a minSize and maxSize for the region.
            </summary>
        </member>
        <member name="M:Ext.Net.BorderLayoutRegion.Builder.SplitTip(System.String)">
            <summary>
            The tooltip to display when the user hovers over a non-collapsible region's split bar. Only applies if UseSplitTips = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.BeforeChildRenrendered">
            <summary>
            Fires right before the child nodes for this node are rendered
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.BeforeClick">
            <summary>
            Fires before click processing. Return false to cancel the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.BeforeCollapse">
            <summary>
            Fires before this node is collapsed, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.BeforeExpand">
            <summary>
            Fires before this node is collapsed, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.CheckChange">
            <summary>
            Fires when a node with a checkbox's checked property changes.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.Click">
            <summary>
            Fires when this node is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.Collapse">
            <summary>
            Fires when this node is collapsed
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.ContextMenu">
            <summary>
            Fires when this node is right clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.DblClick">
            <summary>
            Fires when this node is double clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.DisabledChange">
            <summary>
            Fires when the disabled status of this node changes
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.Expand">
            <summary>
            Fires when this node is expanded
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeListeners.TextChange">
            <summary>
            Fires when the text for this node is changed
            </summary>
        </member>
        <member name="T:Ext.Net.GridFilters">
            <summary>
            GridFilter is a plugin for grids that allow for a slightly more robust representation of filtering than what is provided by the default store.
            Filtering is adjusted by the user using the grid's column header menu (this menu can be disabled through configuration). Through this menu users can configure, enable, and disable filters for each column.
            </summary>
        </member>
        <member name="T:Ext.Net.TemplateColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TemplateColumn.Template">
            <summary>
            An XTemplate to use to process a Record's data to produce a column's rendered value.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSorter.CaseSensitive">
            <summary>
            True for case-sensitive sort (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSorter.Direction">
            <summary>
            The direction to sort ("asc" or "desc," case-insensitive, defaults to "asc")
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSorter.FolderSort">
            <summary>
            True to sort leaf nodes under non-leaf nodes (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSorter.LeafAttr">
            <summary>
            The attribute used to determine leaf nodes when folderSort = true (defaults to "leaf")
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSorter.Property">
            <summary>
            The named attribute on the node to sort by (defaults to "text"). Note that this property is only used if no sortType function is specified, otherwise it is ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSorter.SortType">
            <summary>
            A custom "casting" function used to convert node values before sorting. The function will be called with a single parameter (the Ext.tree.TreeNode being evaluated) and is expected to return the node's sort value cast to the specific data type required for sorting. This could be used, for example, when a node's text (or other attribute) should be sorted as a date or numeric value. See the class description for example usage. Note that if a sortType is specified, any property config will be ignored.
            Parameters:
                e  : the mousedown event
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarSeparator">
            <summary>
            A simple class that adds a vertical separator bar between toolbar items.
            </summary>
        </member>
        <member name="T:Ext.Net.HeaderRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderRow.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderRow.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderRow.Config.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderRow.Config.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HeaderRow.Builder.Cls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.GroupImageCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ImageCommandBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Hidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Style">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.ToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.HideMode">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.Hidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.Style">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.ToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageCommandBase.Config.HideMode">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'.
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.CommandName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.Cls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.Hidden(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.Icon(Ext.Net.Icon)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.IconCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.Style(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageCommandBase.Builder`2.HideMode(Ext.Net.HideMode)">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupImageCommand.RightAlign">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GroupImageCommand.Builder.RightAlign(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GroupImageCommand.Config.RightAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldListeners.AutoSize">
            <summary>
            Fires when the autosize function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldListeners.KeyDown">
            <summary>
            Keydown input field event. This event only fires if enableKeyEvents is set to true.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldListeners.KeyPress">
            <summary>
            Keypress input field event. This event only fires if enableKeyEvents is set to true.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldListeners.KeyUp">
            <summary>
            Keyup input field event. This event only fires if enableKeyEvents is set to true.
            </summary>
        </member>
        <member name="P:Ext.Net.TextFieldListeners.IconClick">
            <summary>
            Icon click event
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadFieldListeners.FileSelected">
            <summary>
            Fires when the underlying file input field's value has changed from the user selecting a new file from the system file selection dialog.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxListeners.BeforeQuery">
            <summary>
            Fires before all queries are processed. Return false to cancel the query or set the queryEvent's cancel property to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxListeners.BeforeSelect">
            <summary>
            Fires before a list items is selected. Return false to cancel the selection.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxListeners.Collapse">
            <summary>
            Fires when the dropdown list is collapsed.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxListeners.Expand">
            <summary>
            Fires when the dropdown list is expanded.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxListeners.Select">
            <summary>
            Fires when a list items is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.Click">
            <summary>
            Fires when this button is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.MenuHide">
            <summary>
            If this button has a menu, this event fires when it is hidden.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.MenuShow">
            <summary>
            If this button has a menu, this event fires when it is shown.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.MenuTriggerOut">
            <summary>
            If this button has a menu, this event fires when the mouse leaves the menu triggering element.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.MenuTriggerOver">
            <summary>
            If this button has a menu, this event fires when the mouse enters the menu triggering element.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.MouseOut">
            <summary>
            Fires when the mouse exits the button.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.MouseOver">
            <summary>
            Fires when the mouse hovers over the button.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonDirectEvents.Toggle">
            <summary>
            Fires when the 'pressed' state of this button changes (only if enableToggle = true).
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButtonDirectEvents.ArrowClick">
            <summary>
            Fires when this button's arrow is clicked.
            </summary>
        </member>
        <member name="T:Ext.Net.BoxPack">
            <summary>
            Controls how the child items of the container are packed together.
            </summary>
        </member>
        <member name="F:Ext.Net.BoxPack.Start">
            <summary>
            child items are packed together at left side of container
            </summary>
        </member>
        <member name="F:Ext.Net.BoxPack.Center">
            <summary>
            child items are packed together at mid-width of container
            </summary>
        </member>
        <member name="F:Ext.Net.BoxPack.End">
            <summary>
            child items are packed together at right side of container
            </summary>
        </member>
        <member name="T:Ext.Net.XmlReader">
             <summary>
             Data reader class to create an Array of Ext.data.Record objects from an XML document
             based on mappings in a provided Ext.data.Record constructor.
            
             Note that in order for the browser to parse a returned XML document, the Content-Type
             header in the HTTP response must be set to "text/xml".
             </summary>
        </member>
        <member name="T:Ext.Net.DataReader">
            <summary>
            Abstract base class for reading structured data from a data source and
            converting it into an object containing RecordField objects and metadata
            for use by an Store. This class is intended to be extended and should
            not be created directly. For existing implementations, see ArrayReader,
            JsonReader and XmlReader.
            </summary>
        </member>
        <member name="P:Ext.Net.DataReader.Fields">
            <summary>
            An array of field definition objects
            </summary>
        </member>
        <member name="P:Ext.Net.DataReader.Config.Fields">
            <summary>
            Either a Collection of RecordField definition objects
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.IDPath">
            <summary>
            The DomQuery path relative from the record element to the element that contains a record identifier value.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.Record">
            <summary>
            The DomQuery path to the repeated element which contains record information.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.Success">
            <summary>
            The DomQuery path to the success attribute used by forms.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.TotalProperty">
            <summary>
            The DomQuery path from which to retrieve the total number of records in the dataset.
            This is only needed if the whole dataset is not passed in one go, but is being paged
            from the remote server.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.Config.IDPath">
            <summary>
            The DomQuery path relative from the record element to the element that contains a record identifier value.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.Config.Record">
            <summary>
            The DomQuery path to the repeated element which contains record information.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.Config.Success">
            <summary>
            The DomQuery path to the success attribute used by forms.
            </summary>
        </member>
        <member name="P:Ext.Net.XmlReader.Config.TotalProperty">
            <summary>
            The DomQuery path from which to retrieve the total number of records in the dataset. This is only needed if the whole dataset is not passed in one go, but is being paged from the remote server.
            </summary>
        </member>
        <member name="M:Ext.Net.XmlReader.Builder.IDPath(System.String)">
            <summary>
            The DomQuery path relative from the record element to the element that contains a record identifier value.
            </summary>
        </member>
        <member name="M:Ext.Net.XmlReader.Builder.Record(System.String)">
            <summary>
            The DomQuery path to the repeated element which contains record information.
            </summary>
        </member>
        <member name="M:Ext.Net.XmlReader.Builder.Success(System.String)">
            <summary>
            The DomQuery path to the success attribute used by forms.
            </summary>
        </member>
        <member name="M:Ext.Net.XmlReader.Builder.TotalProperty(System.String)">
            <summary>
            The DomQuery path from which to retrieve the total number of records in the dataset. This is only needed if the whole dataset is not passed in one go, but is being paged from the remote server.
            </summary>
        </member>
        <member name="T:Ext.Net.TabPanel">
            <summary>
            A basic tab content Container. Tab panels can be used exactly like a standard Ext.Panel for layout purposes, but also have special support for containing child Panels that get automatically converted into tabs.
            </summary>
        </member>
        <member name="T:Ext.Net.TabPanelBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.TabPanelBase.HasLayout">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.TabPanelBase.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.TabPanelBase.BeforeItemAdd(Ext.Net.Component)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Activate(Ext.Net.BoxComponentBase)">
            <summary>
            Sets the specified Panel as the active Tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Activate(System.String)">
            <summary>
            Sets the specified Panel as the active Panel. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.BeginUpdate">
            <summary>
            Suspends any internal calculations or scrolling while doing a bulk operation. See endUpdate
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.EndUpdate">
            <summary>
            Suspends any internal calculations or scrolling while doing a bulk operation. See endUpdate
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.HideTabStripItem(System.Int32)">
            <summary>
            Hides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.HideTabStripItem(Ext.Net.BoxComponentBase)">
            <summary>
            Hides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.HideTabStripItem(System.String)">
            <summary>
            Hides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.ReadTabs(System.Boolean)">
            <summary>
            True to scan the markup in this tab panel for autoTabs using the autoTabSelector
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.ScrollToTab(Ext.Net.BoxComponentBase,System.Boolean)">
            <summary>
            Scrolls to a particular tab if tab scrolling is enabled
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.SetActiveTab(System.Int32)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.SetActiveTab(Ext.Net.BoxComponentBase)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.SetActiveTab(System.String)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ext.Net.TabPanelBase.UnhideTabStripItem(System.Int32)">
            <summary>
            Unhides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.UnhideTabStripItem(Ext.Net.BoxComponentBase)">
            <summary>
            Unhides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.UnhideTabStripItem(System.String)">
            <summary>
            Unhides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.UseDefaultLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ActiveTab">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ActiveTabIndex">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.VisibleIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.AnimScroll">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.AutoTabSelector">
            <summary>
            The CSS selector used to search for tabs in existing markup when autoTabs = true (defaults to 'div.x-tab'). This can be any valid selector supported by Ext.DomQuery.select. Note that the query will be executed within the scope of this tab panel only (so that multiple tab panels from markup can be supported on a page).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.AutoTabs">
            <summary>
            true to query the DOM for any divs with a class of 'x-tab' to be automatically converted to tabs and added to this panel (defaults to false). Note that the query will be executed within the scope of the container element only (so that multiple tab panels from markup can be supported via this method).
            </summary>
            <remarks>
            This method is only possible when the markup is structured correctly as a container with nested divs containing the class 'x-tab'. To create TabPanels without these limitations, or to pull tab content from other elements on the page, see the example at the top of the class for generating tabs from markup.
            There are a couple of things to note when using this method:
            When using the autoTabs config (as opposed to passing individual tab configs in the TabPanel's items collection), you must use applyTo to correctly use the specified id as the tab container. The autoTabs method replaces existing content with the TabPanel components.
            Make sure that you set deferredRender: false so that the content elements for each tab will be rendered into the TabPanel immediately upon page load, otherwise they will not be transformed until each tab is activated and will be visible outside the TabPanel.
            </remarks>
        </member>
        <member name="P:Ext.Net.TabPanelBase.BaseCls">
            <summary>
            The base CSS class applied to the panel (defaults to 'x-tab-panel').
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.DeferredRender">
            <summary>
            Determining whether or not each tab is rendered only when first accessed (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.EnableTabScroll">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on addToStart. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.LayoutOnTabChange">
            <summary>
            Set to true to do a layout of tab items as tabs are changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.MinTabWidth">
            <summary>
            The minimum width in pixels for each tab when ResizeTabs = true (defaults to 30).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Plain">
            <summary>
            True to render the tab strip without a background content Container image (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ResizeTabs">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although MinTabWidth will always be honored).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ScrollDuration">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when AnimScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ScrollIncrement">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if ResizeTabs = true, the calculated tab width). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ScrollRepeatInterval">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.TabMargin">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2)
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.TabAlign">
            <summary>
            The alignment of the Tabs (defaults to 'Left'). Other option includes 'Right'. Note that tab scrolling is only supported for TabAlign='Left'. Note that when 'Right', the Tabs will be rendered in reverse order.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.TabCls">
            <summary>
            This config option is used on child Components of ths TabPanel. A CSS class name applied to the tab strip item representing the child Component, allowing special styling to be applied.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.TabPosition">
            <summary>
            The position where the tab strip should be rendered (defaults to 'addToStart'). The only other supported value is 'Bottom'. Note that tab scrolling is only supported for position 'addToStart'.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.TabWidth">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.WheelIncrement">
            <summary>
            For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.DefaultTabMenu">
            <summary>
            Default menu for all tabs
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when tab changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ActiveTab(Ext.Net.BoxComponentBase)">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ActiveTabIndex(System.Int32)">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.AnimScroll(System.Boolean)">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.AutoTabSelector(System.String)">
            <summary>
            The CSS selector used to search for tabs in existing markup when autoTabs = true (defaults to 'div.x-tab'). This can be any valid selector supported by Ext.DomQuery.select. Note that the query will be executed within the scope of this tab panel only (so that multiple tab panels from markup can be supported on a page).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.AutoTabs(System.Boolean)">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.BaseCls(System.String)">
            <summary>
            The base CSS class applied to the panel (defaults to 'x-tab-panel').
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.DeferredRender(System.Boolean)">
            <summary>
            Determining whether or not each tab is rendered only when first accessed (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.EnableTabScroll(System.Boolean)">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on addToStart. (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.LayoutOnTabChange(System.Boolean)">
            <summary>
            Set to true to do a layout of tab items as tabs are changed.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.MinTabWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width in pixels for each tab when ResizeTabs = true (defaults to 30).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.Plain(System.Boolean)">
            <summary>
            True to render the tab strip without a background content Container image (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ResizeTabs(System.Boolean)">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although MinTabWidth will always be honored).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ScrollDuration(System.Single)">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when AnimScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ScrollIncrement(System.Int32)">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if ResizeTabs = true, the calculated tab width). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ScrollRepeatInterval(System.Int32)">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.TabMargin(System.Web.UI.WebControls.Unit)">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2)
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.TabAlign(Ext.Net.TabAlign)">
            <summary>
            The alignment of the Tabs (defaults to 'Left'). Other option includes 'Right'. Note that tab scrolling is only supported for TabAlign='Left'. Note that when 'Right', the Tabs will be rendered in reverse order.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.TabCls(System.String)">
            <summary>
            This config option is used on child Components of ths TabPanel. A CSS class name applied to the tab strip item representing the child Component, allowing special styling to be applied.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.TabPosition(Ext.Net.TabPosition)">
            <summary>
            The position where the tab strip should be rendered (defaults to 'addToStart'). The only other supported value is 'Bottom'. Note that tab scrolling is only supported for position 'addToStart'.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.TabWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.WheelIncrement(System.Int32)">
            <summary>
            For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20).
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.AutoPostBack(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when tab changed.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.Activate(Ext.Net.BoxComponentBase)">
            <summary>
            Sets the specified Panel as the active Tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.Activate(System.String)">
            <summary>
            Sets the specified Panel as the active Panel. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.BeginUpdate">
            <summary>
            Suspends any internal calculations or scrolling while doing a bulk operation. See endUpdate
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.EndUpdate">
            <summary>
            Suspends any internal calculations or scrolling while doing a bulk operation. See endUpdate
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.HideTabStripItem(System.Int32)">
            <summary>
            Hides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.HideTabStripItem(Ext.Net.BoxComponentBase)">
            <summary>
            Hides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.HideTabStripItem(System.String)">
            <summary>
            Hides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ReadTabs(System.Boolean)">
            <summary>
            True to scan the markup in this tab panel for autoTabs using the autoTabSelector
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.ScrollToTab(Ext.Net.BoxComponentBase,System.Boolean)">
            <summary>
            Scrolls to a particular tab if tab scrolling is enabled
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.SetActiveTab(System.Int32)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.SetActiveTab(Ext.Net.BoxComponentBase)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.SetActiveTab(System.String)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.UnhideTabStripItem(System.Int32)">
            <summary>
            Unhides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.UnhideTabStripItem(Ext.Net.BoxComponentBase)">
            <summary>
            Unhides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanelBase.Builder`2.UnhideTabStripItem(System.String)">
            <summary>
            Unhides the tab strip item for the passed tab
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ActiveTab">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ActiveTabIndex">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.AnimScroll">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.AutoTabSelector">
            <summary>
            The CSS selector used to search for tabs in existing markup when autoTabs = true (defaults to 'div.x-tab'). This can be any valid selector supported by Ext.DomQuery.select. Note that the query will be executed within the scope of this tab panel only (so that multiple tab panels from markup can be supported on a page).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.AutoTabs">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.BaseCls">
            <summary>
            The base CSS class applied to the panel (defaults to 'x-tab-panel').
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.DeferredRender">
            <summary>
            Determining whether or not each tab is rendered only when first accessed (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.EnableTabScroll">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on addToStart. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.LayoutOnTabChange">
            <summary>
            Set to true to do a layout of tab items as tabs are changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.MinTabWidth">
            <summary>
            The minimum width in pixels for each tab when ResizeTabs = true (defaults to 30).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.Plain">
            <summary>
            True to render the tab strip without a background content Container image (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ResizeTabs">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although MinTabWidth will always be honored).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ScrollDuration">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when AnimScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ScrollIncrement">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if ResizeTabs = true, the calculated tab width). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ScrollRepeatInterval">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.TabMargin">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2)
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.TabAlign">
            <summary>
            The alignment of the Tabs (defaults to 'Left'). Other option includes 'Right'. Note that tab scrolling is only supported for TabAlign='Left'. Note that when 'Right', the Tabs will be rendered in reverse order.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.TabCls">
            <summary>
            This config option is used on child Components of ths TabPanel. A CSS class name applied to the tab strip item representing the child Component, allowing special styling to be applied.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.TabPosition">
            <summary>
            The position where the tab strip should be rendered (defaults to 'addToStart'). The only other supported value is 'Bottom'. Note that tab scrolling is only supported for position 'addToStart'.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.TabWidth">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.WheelIncrement">
            <summary>
            For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.DefaultTabMenu">
            <summary>
            Default menu for all tabs
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when tab changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelBase.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanel.OnBeforeClientInit(Ext.Net.Observable)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Ext.Net.TabPanel.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.TabPanel.OnTabChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.TabPanel.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="postDataKey"></param>
            <param name="postCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.TabPanel.RaisePostDataChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabPanel.TabPanel_TabChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.TabPanel.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Ext.Net.TabPanel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.TabPanel.TabChanged">
            <summary>
            Fires when the SelectedDate property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.PropertyGridParameter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.BaseParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.#ctor(System.String,System.String,Ext.Net.ParameterMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.#ctor(System.String,System.String,Ext.Net.ParameterMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.BaseParameter.ToString(System.Boolean)">
            <summary>
            
            </summary>
            <param name="camelNames"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.BaseParameter.ToStringInnerParams(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.ValueToString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.DefaultMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Mode">
            <summary>
            Wrap in quotes or not
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Encode">
            <summary>
            Encode value. Useful when value is js object
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.CamelName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Params">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Config.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Config.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Config.Mode">
            <summary>
            Wrap in quotes or not
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Config.Encode">
            <summary>
            Encode value, it might be useful when value is js object
            </summary>
        </member>
        <member name="P:Ext.Net.BaseParameter.Config.Params">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.Builder`2.Name(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.Builder`2.Value(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.Builder`2.Mode(Ext.Net.ParameterMode)">
            <summary>
            Wrap in quotes or not
            </summary>
        </member>
        <member name="M:Ext.Net.BaseParameter.Builder`2.Encode(System.Boolean)">
            <summary>
            Encode value, it might be useful when value is js object
            </summary>
        </member>
        <member name="F:Ext.Net.PropertyGridParameter.renderer">
             <summary>
             (optional) A function used to generate HTML markup for a cell given the cell's data value.
             If not specified, the default renderer uses the raw data value.
             
             Sets the rendering (formatting) function for a column. 
             See Ext.util.Format for some default formatting functions.
            
             The render function is called with the following parameters:
                 value : Object
                     The data value for the cell.
                 metadata : Object
                     An object in which you may set the following attributes:
                     
                     css : String
                         A CSS class name to add to the cell's TD element.
                     attr : String
                         An HTML attribute definition string to apply to the data container element
                          within the table cell (e.g. 'style="color:red;"').
                 
                 record : Ext.data.record
                     The Ext.data.Record from which the data was extracted.
             Returns:
                 void
             </summary>
        </member>
        <member name="M:Ext.Net.PropertyGridParameter.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.PropertyGridParameter.Editor">
            <summary>
            (optional) The Ext.form.Field to use when editing values in this column if editing is supported by the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridParameter.Renderer">
            <summary>
            (optional) A function used to generate HTML markup for a cell given the cell's data value. If not specified, the default renderer uses the raw data value.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridParameter.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridParameter.Config.Editor">
            <summary>
            (optional) The Ext.form.Field to use when editing values in this column if editing is supported by the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridParameter.Config.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.PropertyGridParameter.Builder.DisplayName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.CommandSpacer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandSpacer.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandSpacer.Config.Width">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CommandSpacer.Builder.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ColumnLayout">
            <summary>
            This is the layout style of choice for creating structural layouts in a multi-column format where the width of each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. 
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.FitHeight">
            <summary>
            True to fit the column elements height-wise into the Container. Defaults to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Split">
            <summary>
            True to allow resizing of the columns using a SplitBar. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Margin">
            <summary>
            Width of margin between columns in pixels. Overrides any style settings. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Columns">
            <summary>
            Columns collection
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Config.FitHeight">
            <summary>
            True to fit the column elements height-wise into the Container. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Config.Split">
            <summary>
            True to allow resizing of the columns using a SplitBar. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Config.Margin">
            <summary>
            Width of margin between columns in pixels. Overrides any style settings. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Config.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayout.Config.Columns">
            <summary>
            Columns collection
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnLayout.Builder.FitHeight(System.Boolean)">
            <summary>
            True to fit the column elements height-wise into the Container. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnLayout.Builder.Split(System.Boolean)">
            <summary>
            True to allow resizing of the columns using a SplitBar. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnLayout.Builder.Margin(System.Int32)">
            <summary>
            Width of margin between columns in pixels. Overrides any style settings. Defaults to 0.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnLayout.Builder.ScrollOffset(System.Int32)">
            <summary>
            The amount of space to reserve for the scrollbar
            </summary>
        </member>
        <member name="T:Ext.Net.AccordionLayout">
            <summary>
            This is a base class for layouts that contain a single items that automatically expands to fill the layout's content Container. This class is intended to be extended or created via the layout:'fit' Ext.Container.layout config, and should generally not need to be created directly via the new keyword. FitLayout does not have any direct config options (other than inherited ones). To fit a panel to a content Container using FitLayout, simply set layout:'fit' on the content Container and add a single panel to it. If the content Container has multiple panels, only the first one will be displayed.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.ActiveOnTop">
            <summary>
            True to swap the position of each panel as it is expanded so that it becomes the first items in the content Container, false to keep the panels in the rendered order. This is NOT compatible with 'animate:true' (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.OriginalHeader">
            <summary>
            If true then original header UI is used.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Animate">
            <summary>
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and close directly with no animation (defaults to false). Note: to defer to the specific config setting of each contained panel for this property, set this to undefined at the layout level.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.AutoWidth">
            <summary>
            True to set each contained items's width to 'auto', false to use the items's current width (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.CollapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the contained panels' title bars, false to render it last (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Fill">
            <summary>
            True to adjust the active items's height to fill the available space in the content Container, false to use the items's current height, or auto height if not explicitly set (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.HideCollapseTool">
            <summary>
            True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false). When set to true, titleCollapse should be true also.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Sequence">
            <summary>
            Experimental. If animate is set to true, this will result in each animation running in sequence.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.TitleCollapse">
            <summary>
            True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow expand/collapse only when the toggle tool button is clicked (defaults to true). When set to false, hideCollapseTool should be false also.
            </summary>
            <value><c>true</c> if [title collapse]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.ActiveOnTop">
            <summary>
            True to swap the position of each panel as it is expanded so that it becomes the first items in the content Container, false to keep the panels in the rendered order. This is NOT compatible with 'animate:true' (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.OriginalHeader">
            <summary>
            If true then original header UI is used
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.Animate">
            <summary>
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and close directly with no animation (defaults to false). Note: to defer to the specific config setting of each contained panel for this property, set this to undefined at the layout level.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.AutoWidth">
            <summary>
            True to set each contained items's width to 'auto', false to use the items's current width (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.CollapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the contained panels' title bars, false to render it last (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.Fill">
            <summary>
            True to adjust the active items's height to fill the available space in the content Container, false to use the items's current height, or auto height if not explicitly set (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.HideCollapseTool">
            <summary>
            True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false). When set to true, titleCollapse should be true also.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.Sequence">
            <summary>
            Experimental. If animate is set to true, this will result in each animation running in sequence.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayout.Config.TitleCollapse">
            <summary>
            True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow expand/collapse only when the toggle tool button is clicked (defaults to true). When set to false, hideCollapseTool should be false also.
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.ActiveOnTop(System.Boolean)">
            <summary>
            True to swap the position of each panel as it is expanded so that it becomes the first items in the content Container, false to keep the panels in the rendered order. This is NOT compatible with 'animate:true' (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.OriginalHeader(System.Boolean)">
            <summary>
            If true then original header UI is used
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.Animate(System.Boolean)">
            <summary>
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and close directly with no animation (defaults to false). Note: to defer to the specific config setting of each contained panel for this property, set this to undefined at the layout level.
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.AutoWidth(System.Boolean)">
            <summary>
            True to set each contained items's width to 'auto', false to use the items's current width (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.CollapseFirst(System.Boolean)">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the contained panels' title bars, false to render it last (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.Fill(System.Boolean)">
            <summary>
            True to adjust the active items's height to fill the available space in the content Container, false to use the items's current height, or auto height if not explicitly set (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.HideCollapseTool(System.Boolean)">
            <summary>
            True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false). When set to true, titleCollapse should be true also.
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.Sequence(System.Boolean)">
            <summary>
            Experimental. If animate is set to true, this will result in each animation running in sequence.
            </summary>
        </member>
        <member name="M:Ext.Net.AccordionLayout.Builder.TitleCollapse(System.Boolean)">
            <summary>
            True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow expand/collapse only when the toggle tool button is clicked (defaults to true). When set to false, hideCollapseTool should be false also.
            </summary>
        </member>
        <member name="T:Ext.Net.TreeGridColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Align">
            <summary>
            Set the CSS text-align property of the column. Defaults to 'left'.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Cls">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each row for this column.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Store's Record definition from which
            to draw the column's value. If not specified, the column's index is used as an index
            into the Record's data Array.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Header">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Template">
            <summary>
            Specify a string to pass as the configuration string for Ext.XTemplate. By default an Ext.XTemplate will be implicitly created using the dataIndex.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.XTemplate">
            <summary>
            An XTemplate to use to process a Record's data to produce a column's rendered value.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Width">
            <summary>
            Percentage of the container width this column should be allocated. Columns that have no width specified will be allocated with an equal percentage to fill 100% of the container width. To easily take advantage of the full container width, leave the width of at least one column undefined. Note that if you do not want to take up the full width of the container, the width of every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.SortType">
            <summary>
            Sort method
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.Align">
            <summary>
            Set the CSS text-align property of the column. Defaults to 'left'.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.Cls">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each row for this column.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.Header">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.Template">
            <summary>
            Specify a string to pass as the configuration string for Ext.XTemplate. By default an Ext.XTemplate will be implicitly created using the dataIndex.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.XTemplate">
            <summary>
            An XTemplate to use to process a Record's data to produce a column's rendered value.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.Width">
            <summary>
            Percentage of the container width this column should be allocated. Columns that have no width specified will be allocated with an equal percentage to fill 100% of the container width. To easily take advantage of the full container width, leave the width of at least one column undefined. Note that if you do not want to take up the full width of the container, the width of every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridColumn.Config.SortType">
            <summary>
            Sort method
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.Align(Ext.Net.TextAlign)">
            <summary>
            Set the CSS text-align property of the column. Defaults to 'left'.
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.Cls(System.String)">
            <summary>
            Optional. This option can be used to add a CSS class to the cell of each row for this column.
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.DataIndex(System.String)">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array.
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.Header(System.String)">
            <summary>
            The header text to display in the Grid view.
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.Template(System.String)">
            <summary>
            Specify a string to pass as the configuration string for Ext.XTemplate. By default an Ext.XTemplate will be implicitly created using the dataIndex.
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.Width(System.Double)">
            <summary>
            Percentage of the container width this column should be allocated. Columns that have no width specified will be allocated with an equal percentage to fill 100% of the container width. To easily take advantage of the full container width, leave the width of at least one column undefined. Note that if you do not want to take up the full width of the container, the width of every column needs to be explicitly defined.
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGridColumn.Builder.SortType(Ext.Net.SortTypeMethod)">
            <summary>
            Sort method
            </summary>
        </member>
        <member name="T:Ext.Net.DesktopShortcut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.ModuleID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.ShortcutID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopShortcut.Builder.ModuleID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopShortcut.Builder.ShortcutID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopShortcut.Builder.IconCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopShortcut.Builder.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopShortcut.Builder.X(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopShortcut.Builder.Y(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Config.ModuleID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Config.ShortcutID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Config.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Config.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopShortcut.Config.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxColumnItemsBuilder`2.Add(Ext.Net.Component.Builder{`0,`1})">
            TODO: .Add(Control control) // add to .Content() collection
            TODO: .Add(Func)            // add to .Content() collection
        </member>
        <member name="T:Ext.Net.BottomTitle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BottomTitle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BottomTitle.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BottomTitle.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.TreeGridDateColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridDateColumn.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridDateColumn.Format">
            <summary>
            A formatting string as used by Date.format to format a Date for this Column (defaults to 'd').
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridDateColumn.FormatProxy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Debug.Log(System.String)">
            <summary>
            Show message in console
            </summary>
            <param name="text">Log message</param>
        </member>
        <member name="M:Ext.Net.Debug.Show">
            <summary>
            Show the debug console (should be activated before it, using Debug property of ResourceManager or Debug.Activate function)
            </summary>
        </member>
        <member name="M:Ext.Net.Debug.Hide">
            <summary>
            Hide the debug console
            </summary>
        </member>
        <member name="M:Ext.Net.Debug.Activate(Ext.Net.DebugConsole,Ext.Net.JFunction)">
            <summary>
            Add required resources and activate console
            </summary>
            <param name="module">Console type</param>
            <param name="callback">callback which fires after console activating</param>
        </member>
        <member name="M:Ext.Net.Debug.Activate(Ext.Net.DebugConsole)">
            <summary>
            Add required resources and activate console
            </summary>
            <param name="module">Console type</param>
        </member>
        <member name="P:Ext.Net.ListViewBooleanColumn.FalseText">
            <summary>
            The string returned by the renderer when the column value is falsey (but not undefined) (defaults to 'false').
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewBooleanColumn.TrueText">
            <summary>
            The string returned by the renderer when the column value is not falsey (defaults to 'true').
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewBooleanColumn.UndefinedText">
            <summary>
            The string returned by the renderer when the column value is undefined (defaults to ' ').
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanelListeners.BeforeGroupChange">
            <summary>
            Fires before the active group changes. Handlers can return false to cancel the tab change.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanelListeners.GroupChange">
            <summary>
            Fires after the active group has changed.
            </summary>
        </member>
        <member name="T:Ext.Net.DropDownFieldListeners">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldListeners.Collapse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownFieldListeners.Expand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectionModelDirectEvents.SelectionChange">
            <summary>
            Fires when the selected nodes change
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanelDirectEvents.BeforeGroupChange">
            <summary>
            Fires before the active group changes. Handlers can return false to cancel the tab change.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanelDirectEvents.GroupChange">
            <summary>
            Fires after the active group has changed.
            </summary>
        </member>
        <member name="T:Ext.Net.NumberField">
            <summary>
            Numeric text field that provides automatic keystroke filtering and numeric validation.
            </summary>
        </member>
        <member name="T:Ext.Net.NumberFieldBase">
            <summary>
            Base class for Numeric field.
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.SetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.InputType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Number">
            <summary>
            The Number (double) to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.ValueProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="E:Ext.Net.NumberFieldBase.NumberChanged">
            <summary>
            Fires when the Number property has been changed.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.AllowDecimals">
            <summary>
            False to disallow decimal values (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.TrimTrailedZeros">
            <summary>
            False to disallow trim trailed zeros.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.AllowNegative">
            <summary>
            False to prevent entering a negative sign (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.BaseChars">
            <summary>
            The base set of characters to evaluate as valid numbers (defaults to '0123456789').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.DecimalPrecision">
            <summary>
            The maximum precision to display after the decimal separator (defaults to 2).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.DecimalSeparator">
            <summary>
            Character(s) to allow as the decimal separator (defaults to '.').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.MaxText">
            <summary>
            Error text to display if the maximum value validation fails (defaults to 'The maximum value for this field is {maxValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.MaxValue">
            <summary>
            The maximum allowed value (defaults to Double.MaxValue)
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.MinText">
            <summary>
            Error text to display if the minimum value validation fails (defaults to 'The minimum value for this field is {minValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.MinValue">
            <summary>
            The minimum allowed value (defaults to Double.MinValue)
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.NanText">
            <summary>
            Error text to display if the value is not a valid number. For example, this can happen if a valid character like '.' or '-' is left in the field with no number (defaults to '{value} is not a valid number').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.InputType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.Number">
            <summary>
            The Number (double) to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.AllowDecimals">
            <summary>
            False to disallow decimal values (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.TrimTrailedZeros">
            <summary>
            False to disallow trim trailed zeros.
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.AllowNegative">
            <summary>
            False to prevent entering a negative sign (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.BaseChars">
            <summary>
            The base set of characters to evaluate as valid numbers (defaults to '0123456789').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.DecimalPrecision">
            <summary>
            The maximum precision to display after the decimal separator (defaults to 2).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.DecimalSeparator">
            <summary>
            Character(s) to allow as the decimal separator (defaults to '.').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.MaxText">
            <summary>
            Error text to display if the maximum value validation fails (defaults to 'The maximum value for this field is {maxValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.MaxValue">
            <summary>
            The maximum allowed value (defaults to Double.MaxValue)
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.MinText">
            <summary>
            Error text to display if the minimum value validation fails (defaults to 'The minimum value for this field is {minValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.MinValue">
            <summary>
            The minimum allowed value (defaults to Double.MinValue)
            </summary>
        </member>
        <member name="P:Ext.Net.NumberFieldBase.Config.NanText">
            <summary>
            Error text to display if the value is not a valid number. For example, this can happen if a valid character like '.' or '-' is left in the field with no number (defaults to '{value} is not a valid number').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.InputType(Ext.Net.InputType)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.Text(System.String)">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.Number(System.Double)">
            <summary>
            The Number (double) to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.NullValue(System.Object)">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.AllowDecimals(System.Boolean)">
            <summary>
            False to disallow decimal values (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.TrimTrailedZeros(System.Boolean)">
            <summary>
            False to disallow trim trailed zeros.
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.AllowNegative(System.Boolean)">
            <summary>
            False to prevent entering a negative sign (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.BaseChars(System.String)">
            <summary>
            The base set of characters to evaluate as valid numbers (defaults to '0123456789').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.DecimalPrecision(System.Int32)">
            <summary>
            The maximum precision to display after the decimal separator (defaults to 2).
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.DecimalSeparator(System.String)">
            <summary>
            Character(s) to allow as the decimal separator (defaults to '.').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.MaxText(System.String)">
            <summary>
            Error text to display if the maximum value validation fails (defaults to 'The maximum value for this field is {maxValue}').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.MaxValue(System.Double)">
            <summary>
            The maximum allowed value (defaults to Double.MaxValue)
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.MinText(System.String)">
            <summary>
            Error text to display if the minimum value validation fails (defaults to 'The minimum value for this field is {minValue}').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.MinValue(System.Double)">
            <summary>
            The minimum allowed value (defaults to Double.MinValue)
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.NanText(System.String)">
            <summary>
            Error text to display if the value is not a valid number. For example, this can happen if a valid character like '.' or '-' is left in the field with no number (defaults to '{value} is not a valid number').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberFieldBase.Builder`2.SetValue(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.NumberField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.NumberField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.NumberField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.NumberField.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.NumberField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.NumberField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.HttpProxy">
             <summary>
             An implementation of DataProxy that reads a data object from a object configured to reference a certain URL.
             
             Note that this class cannot be used to retrieve data from a domain other
             than the domain from which the running page was served.
            
             For cross-domain access to remote data, use a ScriptTagProxy.
             
             Be aware that to enable the browser to parse an XML document,
             the server must set the Content-Type header in the HTTP response to "text/xml".
             </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.AutoAbort">
            <summary>
            Whether a new request should abort any pending requests. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Headers">
            <summary>
            An object containing request headers which are added to each request made by this object.
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.DisableCaching">
            <summary>
            True to add a unique cache-buster param to GET requests. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Method">
            <summary>
            The default HTTP method to be used for requests.
            (defaults to undefined; if not set but params are present will use "POST," otherwise "GET.")
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Timeout">
            <summary>
            The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Url">
            <summary>
            The default URL to be used for requests to the server.
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Json">
            <summary>
            Send params as JSON object
            </summary>
        </member>
        <member name="M:Ext.Net.HttpProxy.Builder.AutoAbort(System.Boolean)">
            <summary>
            Whether a new request should abort any pending requests. (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.HttpProxy.Builder.DisableCaching(System.Boolean)">
            <summary>
            True to add a unique cache-buster param to GET requests. (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.HttpProxy.Builder.Method(Ext.Net.HttpMethod)">
            <summary>
            The default HTTP method to be used for requests.
            </summary>
        </member>
        <member name="M:Ext.Net.HttpProxy.Builder.Timeout(System.Int32)">
            <summary>
            The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="M:Ext.Net.HttpProxy.Builder.Url(System.String)">
            <summary>
            The default URL to be used for requests to the server.
            </summary>
        </member>
        <member name="M:Ext.Net.HttpProxy.Builder.Json(System.Boolean)">
            <summary>
            Send params as JSON object
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.AutoAbort">
            <summary>
            Whether a new request should abort any pending requests. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.Headers">
            <summary>
            An object containing request headers which are added to each request made by this object.
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.DisableCaching">
            <summary>
            True to add a unique cache-buster param to GET requests. (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.Method">
            <summary>
            The default HTTP method to be used for requests.
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.Timeout">
            <summary>
            The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.Url">
            <summary>
            The default URL to be used for requests to the server.
            </summary>
        </member>
        <member name="P:Ext.Net.HttpProxy.Config.Json">
            <summary>
            Send params as JSON object
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.ClearSelections(System.Boolean)">
            <summary>
            Clears all selections.
            </summary>
            <param name="suppressEvent">True to skip firing of the selectionchange event</param>
        </member>
        <member name="M:Ext.Net.DataViewBase.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Deselect(System.Int32)">
            <summary>
            Deselects a node.
            </summary>
            <param name="index">The index of node to deselect</param>
        </member>
        <member name="M:Ext.Net.DataViewBase.Refresh">
            <summary>
            Refreshes the view by reloading the data from the store and re-rendering the template.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.RefreshNode(System.Int32)">
            <summary>
            Refreshes an individual node's data from the store.
            </summary>
            <param name="index">The item's data index in the store</param>
        </member>
        <member name="M:Ext.Net.DataViewBase.Select(System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Selects a set of nodes.
            </summary>
            <param name="indexes">An array of indexes to select</param>
            <param name="keepExisting">true to keep existing selections</param>
            <param name="suppressEvent">true to skip firing of the selectionchange vent</param>
        </member>
        <member name="M:Ext.Net.DataViewBase.Select(System.Int32[])">
            <summary>
            Selects a set of nodes.
            </summary>
            <param name="indexes">An array of indexes to select</param>
        </member>
        <member name="M:Ext.Net.DataViewBase.SelectRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of nodes. All nodes between start and end are selected.
            </summary>
            <param name="start">The index of the first node in the range</param>
            <param name="end">The index of the last node in the range</param>
            <param name="keepExisting">True to retain existing selections</param>
        </member>
        <member name="M:Ext.Net.DataViewBase.SelectRange(System.Int32,System.Int32)">
            <summary>
            Selects a range of nodes. All nodes between start and end are selected.
            </summary>
            <param name="start">The index of the first node in the range</param>
            <param name="end">The index of the last node in the range</param>
        </member>
        <member name="P:Ext.Net.DataViewBase.DeferEmptyText">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.EmptyText">
            <summary>
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.ItemSelector">
            <summary>
            This is a required setting. A simple CSS selector (e.g. div.some-class or span:first-child) that will be used to determine what nodes this DataView will be working with.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.LoadingText">
            <summary>
            A string to display during data load operations (defaults to undefined). If specified, this text will be displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's contents will continue to display normally until the new data is loaded and the contents are replaced.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.MultiSelect">
            <summary>
            True to allow selection of more than one item at a time, false to allow selection of only a single item at a time or no selection at all, depending on the value of singleSelect (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.OverClass">
            <summary>
            A CSS class to apply to each item in the view on mouseover (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.SelectedClass">
            <summary>
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.SimpleSelect">
            <summary>
            True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl, false to force the user to hold Ctrl or Shift to select more than on item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.SingleSelect">
            <summary>
            True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false). Note that if multiSelect = true, this value will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Store">
            <summary>
             The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Template">
            <summary>
            The template string to use to display each item in the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.TrackOver">
            <summary>
            True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.DeferEmptyText(System.Boolean)">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.EmptyText(System.String)">
            <summary>
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.ItemSelector(System.String)">
            <summary>
            This is a required setting. A simple CSS selector (e.g. div.some-class or span:first-child) that will be used to determine what nodes this DataView will be working with.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.LoadingText(System.String)">
            <summary>
            A string to display during data load operations (defaults to undefined). If specified, this text will be displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's contents will continue to display normally until the new data is loaded and the contents are replaced.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.MultiSelect(System.Boolean)">
            <summary>
            True to allow selection of more than one item at a time, false to allow selection of only a single item at a time or no selection at all, depending on the value of singleSelect (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.OverClass(System.String)">
            <summary>
            A CSS class to apply to each item in the view on mouseover (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.SelectedClass(System.String)">
            <summary>
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.SimpleSelect(System.Boolean)">
            <summary>
            True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl, false to force the user to hold Ctrl or Shift to select more than on item (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.SingleSelect(System.Boolean)">
            <summary>
            True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false). Note that if multiSelect = true, this value will be ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.StoreID(System.String)">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.TrackOver(System.Boolean)">
            <summary>
            True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.PrepareData(Ext.Net.JFunction)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.ClearSelections(System.Boolean)">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.Deselect(System.Int32)">
            <summary>
            Deselects a node.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.Refresh">
            <summary>
            Refreshes the view by reloading the data from the store and re-rendering the template.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.RefreshNode(System.Int32)">
            <summary>
            Refreshes an individual node's data from the store.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.Select(System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Selects a set of nodes.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.Select(System.Int32[])">
            <summary>
            Selects a set of nodes.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.SelectRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of nodes. All nodes between start and end are selected.
            </summary>
        </member>
        <member name="M:Ext.Net.DataViewBase.Builder`2.SelectRange(System.Int32,System.Int32)">
            <summary>
            Selects a range of nodes. All nodes between start and end are selected.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.DeferEmptyText">
            <summary>
            True to defer emptyText being applied until the store's first load
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.EmptyText">
            <summary>
            The text to display in the view when there is no data to display (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.ItemSelector">
            <summary>
            This is a required setting. A simple CSS selector (e.g. div.some-class or span:first-child) that will be used to determine what nodes this DataView will be working with.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.LoadingText">
            <summary>
            A string to display during data load operations (defaults to undefined). If specified, this text will be displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's contents will continue to display normally until the new data is loaded and the contents are replaced.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.MultiSelect">
            <summary>
            True to allow selection of more than one item at a time, false to allow selection of only a single item at a time or no selection at all, depending on the value of singleSelect (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.OverClass">
            <summary>
            A CSS class to apply to each item in the view on mouseover (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.SelectedClass">
            <summary>
            A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.SimpleSelect">
            <summary>
            True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl, false to force the user to hold Ctrl or Shift to select more than on item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.SingleSelect">
            <summary>
            True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false). Note that if multiSelect = true, this value will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.StoreID">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.Store">
            <summary>
            The data store to use.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.Template">
            <summary>
            The template string to use to display each item in the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.TrackOver">
            <summary>
            True to enable mouseenter and mouseleave events
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewBase.Config.PrepareData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Resizable">
            <summary>
            Applies drag handles to an element to make it resizable.
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Element">
            <summary>
            The id or element to resize
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Adjustments">
            <summary>
            The array [width, height] with values to be added to the resize operation's new size (defaults to [0, 0])
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Animate">
            <summary>
            True to animate the resize (not compatible with dynamic sizing, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.DisableTrackOver">
            <summary>
            True to disable mouse tracking. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Draggable">
            <summary>
            Convenience to initialize drag drop (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Duration">
            <summary>
            Animation duration if animate = true (defaults to .35)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Dynamic">
            <summary>
            True to resize the element while dragging instead of using a proxy (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Easing">
            <summary>
            Animation easing if animate = true (defaults to 'easeOutStrong')
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.EnabledResizing">
            <summary>
            False to disable resizing (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Handles">
            <summary>
            String consisting of the resize handles to display (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.HandlesSummary">
            <summary>
             String consisting of the resize handles to display (defaults to undefined). Specify either 'all' or any of 'n s e w ne nw se sw'.
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.HeightIncrement">
            <summary>
            The increment to snap the height resize in pixels (dynamic must be true, defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.MaxHeight">
            <summary>
            The maximum height for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.MaxWidth">
            <summary>
            The maximum width for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.MinHeight">
            <summary>
            The minimum height for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.MinWidth">
            <summary>
            The minimum width for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.MinX">
            <summary>
            The minimum allowed page X for the element (only used for west resizing, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.MinY">
            <summary>
            The minimum allowed page Y for the element (only used for north resizing, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Pinned">
            <summary>
            True to ensure that the resize handles are always visible, false to display them only when the user mouses over the resizable borders. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.PreserveRatio">
            <summary>
            True to preserve the original ratio between height and width during resize (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.ResizeChild">
            <summary>
            id of element to resize
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Transparent">
            <summary>
            True for transparent handles. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.WidthIncrement">
            <summary>
            The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Wrap">
            <summary>
            True to wrap an element with a div if needed (required for textareas and images, defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Element">
            <summary>
            The id or element to resize
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Adjustments">
            <summary>
            The array [width, height] with values to be added to the resize operation's new size (defaults to [0, 0])
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Animate">
            <summary>
            True to animate the resize (not compatible with dynamic sizing, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.DisableTrackOver">
            <summary>
            True to disable mouse tracking. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Draggable">
            <summary>
            Convenience to initialize drag drop (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Duration">
            <summary>
            Animation duration if animate = true (defaults to .35)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Dynamic">
            <summary>
            True to resize the element while dragging instead of using a proxy (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Easing">
            <summary>
            Animation easing if animate = true (defaults to 'easeOutStrong')
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.EnabledResizing">
            <summary>
            False to disable resizing (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Handles">
            <summary>
            String consisting of the resize handles to display (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.HandlesSummary">
            <summary>
            String consisting of the resize handles to display (defaults to undefined). Specify either 'all' or any of 'n s e w ne nw se sw'.
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Width">
            <summary>
            The width of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Height">
            <summary>
            The height of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.HeightIncrement">
            <summary>
            The increment to snap the height resize in pixels (dynamic must be true, defaults to 0).
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.MaxHeight">
            <summary>
            The maximum height for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.MaxWidth">
            <summary>
            The maximum width for the element (defaults to 10000)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.MinHeight">
            <summary>
            The minimum height for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.MinWidth">
            <summary>
            The minimum width for the element (defaults to 5)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.MinX">
            <summary>
            The minimum allowed page X for the element (only used for west resizing, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.MinY">
            <summary>
            The minimum allowed page Y for the element (only used for north resizing, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Pinned">
            <summary>
            True to ensure that the resize handles are always visible, false to display them only when the user mouses over the resizable borders. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.PreserveRatio">
            <summary>
            True to preserve the original ratio between height and width during resize (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.ResizeChild">
            <summary>
            id of element to resize
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Transparent">
            <summary>
            True for transparent handles. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.WidthIncrement">
            <summary>
            The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Wrap">
            <summary>
            True to wrap an element with a div if needed (required for textareas and images, defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Resizable.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Element(System.String)">
            <summary>
            The id or element to resize
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Adjustments(System.Drawing.Size)">
            <summary>
            The array [width, height] with values to be added to the resize operation's new size (defaults to [0, 0])
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Animate(System.Boolean)">
            <summary>
            True to animate the resize (not compatible with dynamic sizing, defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.DisableTrackOver(System.Boolean)">
            <summary>
            True to disable mouse tracking. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Draggable(System.Boolean)">
            <summary>
            Convenience to initialize drag drop (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Duration(System.Double)">
            <summary>
            Animation duration if animate = true (defaults to .35)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Dynamic(System.Boolean)">
            <summary>
            True to resize the element while dragging instead of using a proxy (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Easing(Ext.Net.Easing)">
            <summary>
            Animation easing if animate = true (defaults to 'easeOutStrong')
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.EnabledResizing(System.Boolean)">
            <summary>
            False to disable resizing (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Handles(Ext.Net.ResizeHandle)">
            <summary>
            String consisting of the resize handles to display (defaults to undefined)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.HandlesSummary(System.String)">
            <summary>
            String consisting of the resize handles to display (defaults to undefined). Specify either 'all' or any of 'n s e w ne nw se sw'.
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            The width of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Height(System.Web.UI.WebControls.Unit)">
            <summary>
            The height of the element in pixels (defaults to null)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.HeightIncrement(System.Int32)">
            <summary>
            The increment to snap the height resize in pixels (dynamic must be true, defaults to 0).
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.MaxHeight(System.Int32)">
            <summary>
            The maximum height for the element (defaults to 10000)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.MaxWidth(System.Int32)">
            <summary>
            The maximum width for the element (defaults to 10000)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.MinHeight(System.Int32)">
            <summary>
            The minimum height for the element (defaults to 5)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.MinWidth(System.Int32)">
            <summary>
            The minimum width for the element (defaults to 5)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.MinX(System.Int32)">
            <summary>
            The minimum allowed page X for the element (only used for west resizing, defaults to 0)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.MinY(System.Int32)">
            <summary>
            The minimum allowed page Y for the element (only used for north resizing, defaults to 0)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Pinned(System.Boolean)">
            <summary>
            True to ensure that the resize handles are always visible, false to display them only when the user mouses over the resizable borders. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.PreserveRatio(System.Boolean)">
            <summary>
            True to preserve the original ratio between height and width during resize (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.ResizeChild(System.String)">
            <summary>
            id of element to resize
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Transparent(System.Boolean)">
            <summary>
            True for transparent handles. This is only applied at config time. (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.WidthIncrement(System.Int32)">
            <summary>
            The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)
            </summary>
        </member>
        <member name="M:Ext.Net.Resizable.Builder.Wrap(System.Boolean)">
            <summary>
            True to wrap an element with a div if needed (required for textareas and images, defaults to false)
            </summary>
        </member>
        <member name="T:Ext.Net.ConfigScriptBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.BaseScriptBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.#ctor(Ext.Net.XControl)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.Build(System.Boolean)">
            <summary>
            
            </summary>
            <param name="selfRendering"></param>
            <returns></returns>
        </member>
        <member name="F:Ext.Net.BaseScriptBuilder.script">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.Build">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.RegisterHtml(System.Text.StringBuilder,System.Web.UI.Page)">
            <summary>
            
            </summary>
            <param name="sb"></param>
            <param name="pageHolder"></param>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.RenderControl(System.Web.UI.Control,System.Web.UI.Page)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="pageHolder"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.Combine(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.FindControls(System.Web.UI.Control,System.Boolean,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.BaseScriptBuilder.ExcludeControl(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.BaseScriptBuilder.Control">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseScriptBuilder.ScriptClientInitBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseScriptBuilder.ScriptOnReadyBag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ConfigScriptBuilder.#ctor(Ext.Net.XControl)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Ext.Net.ConfigScriptBuilder.Build">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ConfigScriptBuilder.Build(System.Boolean)">
            <summary>
            
            </summary>
            <param name="selfRendering"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ConfigScriptBuilder.Build(Ext.Net.LazyMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ConfigScriptBuilder.Create(Ext.Net.XControl)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.Append">
            <summary>
            Fires when a new child node is appended to a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeAppend">
            <summary>
            Fires before a new child is appended to a node in this tree, return false to cancel the append.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeChildRenrendered">
            <summary>
            Fires right before the child nodes for a node are rendered
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeClick">
            <summary>
            Fires before click processing on a node. Return false to cancel the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeCollapseNode">
            <summary>
            Fires before a node is collapsed, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeExpandNode">
            <summary>
            Fires before a node is expanded, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeInsert">
            <summary>
            Fires before a new child is inserted in a node in this tree, return false to cancel the insert.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeLoad">
            <summary>
            Fires before a node is loaded, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeMoveNode">
            <summary>
            Fires before a node is moved to a new location in the tree. Return false to cancel the move.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeNodeDrop">
            <summary>
            Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeRemoveNode">
            <summary>
            Fires before a child is removed from a node in this tree, return false to cancel the remove.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.CheckChange">
            <summary>
            Fires when a node with a checkbox's checked property changes
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.Click">
            <summary>
            Fires when a node is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.CollapseNode">
            <summary>
            Fires when a node is collapsed
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.ContextMenu">
            <summary>
            Fires when a node is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.DblClick">
            <summary>
            Fires when a node is double clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.DisabledChange">
            <summary>
            Fires when the disabled status of a node changes
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.DragDrop">
            <summary>
            Fires when a dragged node is dropped on a valid DD target
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.EndDrag">
            <summary>
            Fires when a drag operation is complete
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.ExpandNode">
            <summary>
            Fires when a node is expanded
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.Insert">
            <summary>
            Fires when a new child node is inserted in a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.Load">
            <summary>
            Fires when a node is loaded
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.MoveNode">
            <summary>
            Fires when a node is moved to a new location in the tree
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.NodeDragOver">
            <summary>
            Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.NodeDrop">
            <summary>
            Fires after a DD object is dropped on a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.RemoveNode">
            <summary>
            Fires when a child node is removed from a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.StartDrag">
            <summary>
            Fires when a node starts being dragged
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.TextChange">
            <summary>
            Fires when the text for a node is changed
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.Submit">
            <summary>
            Fires when the submit is success
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.SubmitException">
            <summary>
            Fires when the submit is success
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeRemoteAction">
            <summary>
            Fires before remote action request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.RemoteActionException">
            <summary>
            Fires when an remote action exception occurs
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.RemoteActionRefusal">
            <summary>
            Fires when remote action is finished but contains refusal answer
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.RemoteActionSuccess">
            <summary>
            Fires when remote action successful
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeRemoteMove">
            <summary>
            Fires before remote move request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeRemoteRename">
            <summary>
            Fires before remote rename request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeRemoteRemove">
            <summary>
            Fires before remote remove request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelListeners.BeforeRemoteAppend">
            <summary>
            Fires before remote insert/append request
            </summary>
        </member>
        <member name="T:Ext.Net.StartMenuConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.ToolsWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Shadow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.ToolItems">
            <summary>
            Collection of Tool items
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.ToolsWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.Shadow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.ToolItems">
            <summary>
            Collection of Tool items
            </summary>
        </member>
        <member name="P:Ext.Net.StartMenuConfig.Config.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.Icon(Ext.Net.Icon)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.IconCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.Width(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.ToolsWidth(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.Height(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.Title(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartMenuConfig.Builder.Shadow(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SliderListeners.BeforeChange">
            <summary>
            Fires before the slider value is changed. By returning false from an event handler, you can cancel the event and prevent the slider from changing.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderListeners.Change">
            <summary>
            Fires when the slider value is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderListeners.ChangeComplete">
            <summary>
            Fires when the slider value is changed by the user and any drag operations have completed.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderListeners.Drag">
            <summary>
            Fires continuously during the drag operation while the mouse is moving.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderListeners.DragEnd">
            <summary>
            Fires after the drag operation has completed.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderListeners.DragStart">
            <summary>
            Fires after a drag operation has started.
            </summary>
        </member>
        <member name="T:Ext.Net.RowLayout">
            <summary>
            This is the layout style of choice for creating structural layouts in a multi-row format where the height of each row can be specified as a percentage or fixed height.
            </summary>
        </member>
        <member name="P:Ext.Net.RowLayout.Rows">
            <summary>
            Rows collection
            </summary>
        </member>
        <member name="P:Ext.Net.RowLayout.Split">
            <summary>
            True to allow resizing of the columns using a SplitBar. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.RowLayout.Margin">
            <summary>
            Width of margin between columns in pixels. Overrides any style settings. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.RowLayout.Config.Split">
            <summary>
            True to allow resizing of the columns using a SplitBar. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.RowLayout.Config.Margin">
            <summary>
            Width of margin between columns in pixels. Overrides any style settings. Defaults to 0.
            </summary>
        </member>
        <member name="M:Ext.Net.RowLayout.Builder.Split(System.Boolean)">
            <summary>
            True to allow resizing of the columns using a SplitBar. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.RowLayout.Builder.Margin(System.Int32)">
            <summary>
            Width of margin between columns in pixels. Overrides any style settings. Defaults to 0.
            </summary>
        </member>
        <member name="T:Ext.Net.ListItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ListItem.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ListItem.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ListItem.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ListItem.Config.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ListItem.Builder.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ListItem.Builder.Value(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.LayoutColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutColumn.ColumnWidth">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1.
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutColumn.Config.ColumnWidth">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="M:Ext.Net.LayoutColumn.Builder.ColumnWidth(System.Decimal)">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="T:Ext.Net.Image">
            <summary>
            Basic image field.
            </summary>
        </member>
        <member name="P:Ext.Net.Image.ContainerStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.Image.ImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.ImageUrlProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.AlternateText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Align">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.LazyLoad">
            <summary>
            true to load image after rendering only
            </summary>
        </member>
        <member name="P:Ext.Net.Image.MonitorComplete">
            <summary>
            true to monitor complete state and fire Complete event
            </summary>
        </member>
        <member name="P:Ext.Net.Image.AllowPan">
            <summary>
            true to allow scroll the image by mouse dragging
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Resizable">
            <summary>
            true to allow resize the image
            </summary>
        </member>
        <member name="P:Ext.Net.Image.MonitorPoll">
            <summary>
            The milliseconds to poll complete state, ignored if MonitorComplete is not true (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.Net.Image.XDelta">
            <summary>
            X offset
            </summary>
        </member>
        <member name="P:Ext.Net.Image.YDelta">
            <summary>
            Y offset
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Image.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.Height">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.Width">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.ImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.AlternateText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.Align">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.LazyLoad">
            <summary>
            true to load image after rendering only
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.MonitorComplete">
            <summary>
            true to monitor complete state and fire Complete event
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.AllowPan">
            <summary>
            true to allow scroll the image by mouse dragging
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.Resizable">
            <summary>
            true to allow resize the image
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.MonitorPoll">
            <summary>
            The milliseconds to poll complete state, ignored if MonitorComplete is not true (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.ResizeConfig">
            <summary>
            Resize object config
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.XDelta">
            <summary>
            X offset
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.YDelta">
            <summary>
            Y offset
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Image.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.Height(System.Web.UI.WebControls.Unit)">
            <summary>
            The height of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            The width of this component in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.ImageUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.AlternateText(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.Align(System.Web.UI.WebControls.ImageAlign)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.LazyLoad(System.Boolean)">
            <summary>
            true to load image after rendering only
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.MonitorComplete(System.Boolean)">
            <summary>
            true to monitor complete state and fire Complete event
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.AllowPan(System.Boolean)">
            <summary>
            true to allow scroll the image by mouse dragging
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.Resizable(System.Boolean)">
            <summary>
            true to allow resize the image
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.MonitorPoll(System.Int32)">
            <summary>
            The milliseconds to poll complete state, ignored if MonitorComplete is not true (defaults to 200)
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.XDelta(System.Int32)">
            <summary>
            X offset
            </summary>
        </member>
        <member name="M:Ext.Net.Image.Builder.YDelta(System.Int32)">
            <summary>
            Y offset
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.Activate">
            <summary>
            Fires when the editor is first receives the focus. Any insertion must wait until after this event.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.BeforePush">
            <summary>
            Fires before the iframe editor is updated with content from the textarea. Return false to cancel the push.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.BeforeSync">
            <summary>
            Fires before the textarea is updated with content from the editor iframe. Return false to cancel the sync.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.EditModeChange">
            <summary>
            Fires when the editor switches edit modes.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.Initialize">
            <summary>
            Fires when the editor is fully initialized (including the iframe).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.Push">
            <summary>
            Fires when the iframe editor is updated with content from the textarea.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorListeners.Sync">
            <summary>
            Fires when the textarea is updated with content from the editor iframe.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Net.Hidden" -->
        <member name="P:Ext.Net.Hidden.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.HideInDesign">
            <summary>
            Hide this Control at Design Time.
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.Hidden.ValueChanged">
            <summary>
            Fires when the Text property has been changed
            </summary>
        </member>
        <member name="E:Ext.Net.Hidden.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.Config.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Hidden.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.Hidden.Builder.Text(System.String)">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.Hidden.Builder.NullValue(System.Object)">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="T:Ext.Net.GenericPlugin">
            <summary>
            A generic Plugin.
            </summary>
        </member>
        <member name="P:Ext.Net.GenericPlugin.InstanceName">
            <summary>
            The JavaScript class name. Used to create a 'new' instance of the object.
            </summary>
        </member>
        <member name="P:Ext.Net.GenericPlugin.Path">
            <summary>
            The file path to the required JavaScript file.
            </summary>
        </member>
        <member name="M:Ext.Net.GenericPlugin.Builder.InstanceName(System.String)">
            <summary>
            The JavaScript class name. Used to create a 'new' instance of the object.
            </summary>
        </member>
        <member name="M:Ext.Net.GenericPlugin.Builder.Path(System.String)">
            <summary>
            The file path to the required JavaScript file.
            </summary>
        </member>
        <member name="P:Ext.Net.GenericPlugin.Config.InstanceName">
            <summary>
            The JavaScript class name. Used to create a 'new' instance of the object.
            </summary>
        </member>
        <member name="P:Ext.Net.GenericPlugin.Config.Path">
            <summary>
            The file path to the required JavaScript file.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelDirectEvents.ClientValidation">
            <summary>
            If the monitorValid config option is true, this event fires repetitively to notify of valid state
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelDirectEvents.ActionComplete">
            <summary>
            Fires when an action is completed.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelDirectEvents.ActionFailed">
            <summary>
            Fires when an action fails.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelDirectEvents.BeforeAction">
            <summary>
            Fires before any action is performed. Return false to cancel the action.
            </summary>
        </member>
        <member name="T:Ext.Net.ClickRepeater">
            <summary>
            A wrapper class which can be applied to any element. Fires a "click" event while the mouse is pressed. The interval between firings may be specified in the config but defaults to 20 milliseconds. Optionally, a CSS class may be applied to the element during the time it is pressed.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.SetDisabled(System.Boolean)">
            <summary>
            Convenience function for setting disabled/enabled by boolean.
            </summary>
            <param name="disabled">disabled : Boolean</param>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Disabled">
            <summary>
            Disables the repeater and stops events from firing.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Enable">
            <summary>
            Enables the repeater and allows events to fire.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Accelerate">
            <summary>
            True if autorepeating should start slowly and accelerate. Interval and Delay are ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Delay">
            <summary>
            The initial delay before the repeating event begins firing. Similar to an autorepeat key delay.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Target">
            <summary>
            The element to act as a button.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Interval">
            <summary>
            The interval between firings of the "click" event. Default 20 ms.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.PressClass">
            <summary>
            A CSS class name to be applied to the element while pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.PreventDefault">
            <summary>
            True to prevent the default click event
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.StopDefault">
            <summary>
            True to stop the default click event
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Handler">
            <summary>
            A function called when the target is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.IgnoreLeftButton">
            <summary>
            True to ignore the left button
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.IgnoreRightButton">
            <summary>
            True to ignore the right button
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.IgnoreMiddleButton">
            <summary>
            True to ignore the middle button
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.Accelerate">
            <summary>
            True if autorepeating should start slowly and accelerate. Interval and Delay are ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.Delay">
            <summary>
            The initial delay before the repeating event begins firing. Similar to an autorepeat key delay.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.Target">
            <summary>
            The element to act as a button.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.Interval">
            <summary>
            The interval between firings of the \"click\" event. Default 20 ms.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.PressClass">
            <summary>
            A CSS class name to be applied to the element while pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.PreventDefault">
            <summary>
            True to prevent the default click event.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.StopDefault">
            <summary>
            True to stop the default click event
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.Handler">
            <summary>
            A function called when the traget is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.IgnoreLeftButton">
            <summary>
            True to ignore the left button
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.IgnoreRightButton">
            <summary>
            True to ignore the right button
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.IgnoreMiddleButton">
            <summary>
            True to ignore the middle button
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeater.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.Accelerate(System.Boolean)">
            <summary>
            True if autorepeating should start slowly and accelerate. Interval and Delay are ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.Delay(System.Int32)">
            <summary>
            The initial delay before the repeating event begins firing. Similar to an autorepeat key delay.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.Target(System.String)">
            <summary>
            The element to act as a button.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.Interval(System.Int32)">
            <summary>
            The interval between firings of the \"click\" event. Default 20 ms.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.PressClass(System.String)">
            <summary>
            A CSS class name to be applied to the element while pressed.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.PreventDefault(System.Boolean)">
            <summary>
            True to prevent the default click event.
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.StopDefault(System.Boolean)">
            <summary>
            True to stop the default click event
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.Handler(System.String)">
            <summary>
            A function called when the traget is clicked (can be used instead of click event).
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.IgnoreLeftButton(System.Boolean)">
            <summary>
            True to ignore the left button
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.IgnoreRightButton(System.Boolean)">
            <summary>
            True to ignore the right button
            </summary>
        </member>
        <member name="M:Ext.Net.ClickRepeater.Builder.IgnoreMiddleButton(System.Boolean)">
            <summary>
            True to ignore the middle button
            </summary>
        </member>
        <member name="T:Ext.Net.DesktopModule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopModule.ModuleID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopModule.WindowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopModule.AutoRun">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopModule.Config.ModuleID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopModule.Config.WindowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopModule.Config.AutoRun">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopModule.Builder.ModuleID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopModule.Builder.WindowID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopModule.Builder.AutoRun(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.TabMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorDirectEvents.AfterEdit">
            <summary>
            Fired after a row is edited and passes validation.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorDirectEvents.BeforeEdit">
            <summary>
            Fired before the row editor is activated.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorDirectEvents.ValidateEdit">
            <summary>
            Fired after a row is edited and passes validation.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorDirectEvents.PreEdit">
            <summary>
            Fired for each field's value.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePickerDirectEvents.Select">
            <summary>
            Fires when a date is selected.
            </summary>
        </member>
        <member name="T:Ext.Net.TimeField">
            <summary>
            Provides a time input field with a time dropdown and automatic time validation.
            </summary>
        </member>
        <member name="T:Ext.Net.ComboBox">
            <summary>
            A combobox control with support for autocomplete, remote-loading, paging and many other features.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBox.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBox.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBox.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBox.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.SelectedTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.SelectedValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.AltFormats">
            <summary>
            Multiple date formats separated by \" | \" to try when parsing a user input value and it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Format">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y').
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Increment">
            <summary>
            The number of minutes between each time value in the list (defaults to 15).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.MaxText">
            <summary>
            The error text to display when the time is after maxValue (defaults to 'The time in this field must be equal to or before {0}').
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.MaxTime">
            <summary>
            The maximum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to TimeSpan.MaxValue).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.MinTime">
            <summary>
            The minimum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to TimeSpan.MinValue).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.MinText">
            <summary>
            The error text to display when the date in the cell is before minValue (defaults to 'The time in this field must be equal to or after {0}').
            </summary>
        </member>
        <member name="E:Ext.Net.TimeField.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.SelectedTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.SelectedValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.AltFormats">
            <summary>
            Multiple date formats separated by \" | \" to try when parsing a user input value and it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.Format">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'h:mm tt', e.g., '3:15 PM'). For 24-hour time format try 'H:mm' instead.
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.Increment">
            <summary>
            The number of minutes between each time value in the list (defaults to 15).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.MaxText">
            <summary>
            The error text to display when the time is after maxValue (defaults to 'The time in this field must be equal to or before {0}').
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.MaxTime">
            <summary>
            The maximum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.MinTime">
            <summary>
            The minimum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.TimeField.Config.MinText">
            <summary>
            The error text to display when the date in the cell is before minValue (defaults to 'The time in this field must be equal to or after {0}').
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.NullValue(System.Object)">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.SelectedTime(System.TimeSpan)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.SelectedValue(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.Value(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.AltFormats(System.String)">
            <summary>
            Multiple date formats separated by \" | \" to try when parsing a user input value and it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.Format(System.String)">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'h:mm tt', e.g., '3:15 PM'). For 24-hour time format try 'H:mm' instead.
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.Increment(System.Int32)">
            <summary>
            The number of minutes between each time value in the list (defaults to 15).
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.MaxText(System.String)">
            <summary>
            The error text to display when the time is after maxValue (defaults to 'The time in this field must be equal to or before {0}').
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.MaxTime(System.TimeSpan)">
            <summary>
            The maximum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.MinTime(System.TimeSpan)">
            <summary>
            The minimum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.TimeField.Builder.MinText(System.String)">
            <summary>
            The error text to display when the date in the cell is before minValue (defaults to 'The time in this field must be equal to or after {0}').
            </summary>
        </member>
        <member name="T:Ext.Net.StoreDataBound">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.StoreBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.LoadData(System.Object)">
            <summary>
            Loads data from a passed data block. A Reader which understands the format of the data must have been configured in the constructor.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.LoadData(System.Object,System.Boolean)">
            <summary>
            Loads data from a passed data block. A Reader which understands the format of the data must have been configured in the constructor.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.AddRecord(System.Object)">
            <summary>
            Add Record to the Store and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.AddRecord(System.Object,System.Boolean)">
            <summary>
            Add Record to the Store and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.InsertRecord(System.Int32,System.Object)">
            <summary>
            Inserts Record into the Store at the given index and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.InsertRecord(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts Record into the Store at the given index and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.AddSortedRecord(System.Object)">
            <summary>
            (Local sort only) Inserts the passed Record into the Store at the index where it should go based on the current sort information.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.AddSortedRecord(System.Object,System.Boolean)">
            <summary>
            (Local sort only) Inserts the passed Record into the Store at the index where it should go based on the current sort information.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.ClearFilter">
            <summary>
            Revert to a view of the Record cache with no filtering applied.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.ClearFilter(System.Boolean)">
            <summary>
            Revert to a view of the Record cache with no filtering applied.
            </summary>
            <param name="suppressEvent">If true the filter is cleared silently without notifying listeners</param>
        </member>
        <member name="M:Ext.Net.StoreBase.CommitChanges">
            <summary>
            Commit all Records with outstanding changes. To handle updates for changes, subscribe to the Store's "update" event, and perform updating when the third parameter is Ext.data.Record.COMMIT.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Filter(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Filter the records by a specified property.
            </summary>
            <param name="field">A field on your records</param>
            <param name="value">Either a string that the field should begin with, or a RegExp (should be raw token) to test against the field.</param>
            <param name="anyMatch">True to match any part not just the beginning</param>
            <param name="caseSensitive">True for case sensitive comparison</param>
        </member>
        <member name="M:Ext.Net.StoreBase.FilterBy(Ext.Net.JFunction)">
            <summary>
            Filter by a function. The specified function will be called for each Record in this Store. If the function returns true the Record is included, otherwise it is filtered out.
            </summary>
            <param name="fn">The function to be called. It will be passed the following parameters: record - The record to test for filtering. Access field values using Ext.data.Record.get. id - The ID of the Record passed.</param>
        </member>
        <member name="M:Ext.Net.StoreBase.FilterBy(Ext.Net.JFunction,System.String)">
            <summary>
            Filter by a function. The specified function will be called for each Record in this Store. If the function returns true the Record is included, otherwise it is filtered out.
            </summary>
            <param name="fn">The function to be called. It will be passed the following parameters: record - The record to test for filtering. Access field values using Ext.data.Record.get. id - The ID of the Record passed.</param>
            <param name="scope">The scope of the function (defaults to this)</param>
        </member>
        <member name="M:Ext.Net.StoreBase.RejectChanges">
            <summary>
            Cancel outstanding changes on all changed records.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.RemoveAll">
            <summary>
            Remove all Records from the Store and fires the clear event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.SetDefaultSort(System.String,Ext.Net.SortDirection)">
            <summary>
            Sets the default sort column and order to be used by the next load operation.
            </summary>
            <param name="field">The name of the field to sort by.</param>
            <param name="dir">The sort order, "ASC" or "DESC"</param>
        </member>
        <member name="M:Ext.Net.StoreBase.Sort(System.String,Ext.Net.SortDirection)">
            <summary>
            Sort the Records. If remote sorting is used, the sort is performed on the server, and the cache is reloaded. If local sorting is used, the cache is sorted internally.
            </summary>
            <param name="field">The name of the field to sort by.</param>
            <param name="dir">The sort order, "ASC" or "DESC"</param>
        </member>
        <member name="M:Ext.Net.StoreBase.AddField(Ext.Net.RecordField,System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Ext.Net.StoreBase.AddField(Ext.Net.RecordField,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.StoreBase.RemoveField(Ext.Net.RecordField)">
            <summary>
            
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Ext.Net.StoreBase.RemoveFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.ClearMeta">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.UpdateRecordField(System.Int32,System.String,System.Object)">
            <summary>
            Update record field value
            </summary>
            <param name="rowIndex">row index</param>
            <param name="dataIndex">data index</param>
            <param name="value">value</param>
        </member>
        <member name="M:Ext.Net.StoreBase.UpdateRecordField(System.Object,System.String,System.Object)">
            <summary>
            Update record field value
            </summary>
            <param name="id">id value</param>
            <param name="dataIndex">data index</param>
            <param name="value">value</param>
        </member>
        <member name="M:Ext.Net.StoreBase.RemoveRecord(System.Object)">
            <summary>
            Remove record by id
            </summary>
            <param name="id">id</param>
        </member>
        <member name="M:Ext.Net.StoreBase.RemoveRecord(System.Int32)">
            <summary>
            Remove record by id
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:Ext.Net.StoreBase.ClearGrouping">
            <summary>
            Clears any existing grouping and refreshes the data using the default sort.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.GroupBy(System.String,System.Boolean)">
            <summary>
            Groups the data by the specified field.
            </summary>
            <param name="field">The field name by which to sort the store's data</param>
            <param name="forceRegroup">True to force the group to be refreshed even if the field passed in is the same as the current grouping field, false to skip grouping on the same field</param>
        </member>
        <member name="M:Ext.Net.StoreBase.GroupBy(System.String)">
            <summary>
            Groups the data by the specified field.
            </summary>
            <param name="field">The field name by which to sort the store's data</param>
        </member>
        <member name="M:Ext.Net.StoreBase.ApplyGrouping(System.Boolean)">
            <summary>
            Apply grouping
            </summary>
            <param name="alwaysFireChange">fire datachanged event</param>
        </member>
        <member name="M:Ext.Net.StoreBase.ApplySort">
            <summary>
            Apply sort
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.AutoDestroy">
            <summary>
             true to destroy the store when the component the store is bound to is destroyed (defaults to false). Note: this should be set to true when using stores that are bound to only 1 component.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.AutoLoad">
            <summary>
            If passed, this store's load method is automatically called after creation with the autoLoad object.
            </summary>
            <value><c>true</c> if [auto load]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ext.Net.StoreBase.Restful">
            <summary>
            Defaults to false. Set to true to have the Store and the set Proxy operate in a RESTful manner.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.SaveAllFields">
            <summary>
            Save ALL fields of a modified record -- not just those that changed. 
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.AutoSave">
            <summary>
            Defaults to true causing the store to automatically save records to the server when a record is modified (ie: becomes 'dirty'). Specify false to manually call save to send all modifiedRecords to the server.
            </summary>
            <value><c>true</c> if [auto load]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ext.Net.StoreBase.AutoDecode">
            <summary>
            If true then submitted data will be decoded
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.BaseParams">
            <summary>
            An object containing properties which are to be sent as parameters on any HTTP request.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.AutoLoadParams">
            <summary>
            An object containing properties which are to be sent as parameters on auto load HTTP request.")]
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.WriteBaseParams">
            <summary>
            An object containing properties which are to be sent as parameters on any HTTP request.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Proxy">
            <summary>
            The Proxy object which provides access to a data object.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.UpdateProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Reader">
            <summary>
            The DataReader object which processes the data object and returns an Array of Ext.data.Record objects which are cached keyed by their id property.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.PruneModifiedRecords">
            <summary>
            True to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.RemoteSort">
            <summary>
            True if sorting is to be handled by requesting the Proxy to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false). If remote sorting is specified, then clicking on a column header causes the current page to be requested from the server with the addition of the following two parameters: sort: String - The name (as specified in the Record's Field definition) of the field to sort on. dir : String - The direction of the sort, 'ASC' or 'DESC' (case-sensitive).
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.RemotePaging">
            <summary>
            True to perform remote paging
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.SortInfo">
            <summary>
            An object which determines the Store sorting information.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.WarningOnDirty">
            <summary>
            If true show a warning before load/reload if store has dirty data
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.DirtyWarningTitle">
            <summary>
            The title of window showing before load if the dirty data exists
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.DirtyWarningText">
            <summary>
            The text of window showing before load if the dirty data exists
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.RefreshAfterSaving">
            <summary>
            The refresh mode
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.GroupField">
            <summary>
            The field name by which to sort the store's data (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.GroupOnSort">
            <summary>
            True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the existing sort info (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.RemoteGroup">
            <summary>
            True if the grouping should apply on the server side, false if it is local only (defaults to false). If the grouping is local, it can be applied immediately to the data. If it is remote, then it will simply act as a helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.IgnoreExtraFields">
            <summary>
            If true then only properties included to reader will be converted to json
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.ShowWarningOnFailure">
            <summary>
            Show warning if request fail.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.SkipIdForNewRecords">
            <summary>
            Skip Id field from save data for new records.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.AutoDestroy">
            <summary>
            true to destroy the store when the component the store is bound to is destroyed (defaults to false). Note: this should be set to true when using stores that are bound to only 1 component.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.AutoLoad">
            <summary>
            If passed, this store's load method is automatically called after creation with the autoLoad object.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.Restful">
            <summary>
            Defaults to false. Set to true to have the Store and the set Proxy operate in a RESTful manner.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.SaveAllFields">
            <summary>
            Save ALL fields of a modified record -- not just those that changed.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.AutoSave">
            <summary>
            Defaults to true causing the store to automatically save records to the server when a record is modified (ie: becomes 'dirty'). Specify false to manually call save to send all modifiedRecords to the server.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.AutoDecode">
            <summary>
            If true then submitted data will be decoded
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.BaseParams">
            <summary>
            An object containing properties which are to be sent as parameters on any HTTP request.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.AutoLoadParams">
            <summary>
            An object containing properties which are to be sent as parameters on auto load HTTP request.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.WriteBaseParams">
            <summary>
            An object containing properties which are to be sent as parameters on any HTTP request.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.Proxy">
            <summary>
            The Proxy object which provides access to a data object.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.UpdateProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.Reader">
            <summary>
            The DataReader object which processes the data object and returns an Array of Ext.data.Record objects which are cached keyed by their id property.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.PruneModifiedRecords">
            <summary>
            True to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.RemoteSort">
            <summary>
            True if sorting is to be handled by requesting the Proxy to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false). If remote sorting is specified, then clicking on a column header causes the current page to be requested from the server with the addition of the following two parameters: sort: String - The name (as specified in the Record's Field definition) of the field to sort on. dir : String - The direction of the sort, 'ASC' or 'DESC' (case-sensitive).
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.RemotePaging">
            <summary>
            True to perform remote paging.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.SortInfo">
            <summary>
            An object which determines the Store sorting information.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.WarningOnDirty">
            <summary>
            If true show a warning before load/reload if store has dirty data
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.DirtyWarningTitle">
            <summary>
            The title of window showing before load if the dirty data exists
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.DirtyWarningText">
            <summary>
            The text of window showing before load if the dirty data exists
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.RefreshAfterSaving">
            <summary>
            The refresh mode
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.GroupField">
            <summary>
            The field name by which to sort the store's data (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.GroupOnSort">
            <summary>
            True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the existing sort info (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.RemoteGroup">
            <summary>
            True if the grouping should apply on the server side, false if it is local only (defaults to false). If the grouping is local, it can be applied immediately to the data. If it is remote, then it will simply act as a helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.IgnoreExtraFields">
            <summary>
            If true then only properties included to reader will be converted to json
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.ShowWarningOnFailure">
            <summary>
            Show a Window with error message is DirectEvent request fails.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreBase.Config.SkipIdForNewRecords">
            <summary>
            Skip Id field from save data for new records.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AutoDestroy(System.Boolean)">
            <summary>
            true to destroy the store when the component the store is bound to is destroyed (defaults to false). Note: this should be set to true when using stores that are bound to only 1 component.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AutoLoad(System.Boolean)">
            <summary>
            If passed, this store's load method is automatically called after creation with the autoLoad object.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.Restful(System.Boolean)">
            <summary>
            Defaults to false. Set to true to have the Store and the set Proxy operate in a RESTful manner.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.SaveAllFields(System.Boolean)">
            <summary>
            Save ALL fields of a modified record -- not just those that changed.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AutoSave(System.Boolean)">
            <summary>
            Defaults to true causing the store to automatically save records to the server when a record is modified (ie: becomes 'dirty'). Specify false to manually call save to send all modifiedRecords to the server.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AutoDecode(System.Boolean)">
            <summary>
            If true then submitted data will be decoded
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.PruneModifiedRecords(System.Boolean)">
            <summary>
            True to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RemoteSort(System.Boolean)">
            <summary>
            True if sorting is to be handled by requesting the Proxy to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false). If remote sorting is specified, then clicking on a column header causes the current page to be requested from the server with the addition of the following two parameters: sort: String - The name (as specified in the Record's Field definition) of the field to sort on. dir : String - The direction of the sort, 'ASC' or 'DESC' (case-sensitive).
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RemotePaging(System.Boolean)">
            <summary>
            True to perform remote paging.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.WarningOnDirty(System.Boolean)">
            <summary>
            If true show a warning before load/reload if store has dirty data
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.DirtyWarningTitle(System.String)">
            <summary>
            The title of window showing before load if the dirty data exists
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.DirtyWarningText(System.String)">
            <summary>
            The text of window showing before load if the dirty data exists
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RefreshAfterSaving(Ext.Net.RefreshAfterSavingMode)">
            <summary>
            The refresh mode
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.GroupField(System.String)">
            <summary>
            The field name by which to sort the store's data (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.GroupOnSort(System.Boolean)">
            <summary>
            True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the existing sort info (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RemoteGroup(System.Boolean)">
            <summary>
            True if the grouping should apply on the server side, false if it is local only (defaults to false). If the grouping is local, it can be applied immediately to the data. If it is remote, then it will simply act as a helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.IgnoreExtraFields(System.Boolean)">
            <summary>
            If true then only properties included to reader will be converted to json
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.ShowWarningOnFailure(System.Boolean)">
            <summary>
            Show a Window with error message is DirectEvent request fails.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.SkipIdForNewRecords(System.Boolean)">
            <summary>
            Skip Id field from save data for new records.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.LoadData(System.Object)">
            <summary>
            Loads data from a passed data block. A Reader which understands the format of the data must have been configured in the constructor.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.LoadData(System.Object,System.Boolean)">
            <summary>
            Loads data from a passed data block. A Reader which understands the format of the data must have been configured in the constructor.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddRecord(System.Object)">
            <summary>
            Add Record to the Store and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddRecord(System.Object,System.Boolean)">
            <summary>
            Add Record to the Store and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.InsertRecord(System.Int32,System.Object)">
            <summary>
            Inserts Record into the Store at the given index and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.InsertRecord(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts Record into the Store at the given index and fires the add event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddSortedRecord(System.Object)">
            <summary>
            (Local sort only) Inserts the passed Record into the Store at the index where it should go based on the current sort information.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddSortedRecord(System.Object,System.Boolean)">
            <summary>
            (Local sort only) Inserts the passed Record into the Store at the index where it should go based on the current sort information.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.ClearFilter">
            <summary>
            Revert to a view of the Record cache with no filtering applied.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.ClearFilter(System.Boolean)">
            <summary>
            Revert to a view of the Record cache with no filtering applied.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.CommitChanges">
            <summary>
            Commit all Records with outstanding changes. To handle updates for changes, subscribe to the Store's \"update\" event, and perform updating when the third parameter is Ext.data.Record.COMMIT.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.Filter(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Filter the records by a specified property.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.FilterBy(Ext.Net.JFunction)">
            <summary>
            Filter by a function. The specified function will be called for each Record in this Store. If the function returns true the Record is included, otherwise it is filtered out.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.FilterBy(Ext.Net.JFunction,System.String)">
            <summary>
            Filter by a function. The specified function will be called for each Record in this Store. If the function returns true the Record is included, otherwise it is filtered out.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RejectChanges">
            <summary>
            Cancel outstanding changes on all changed records.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RemoveAll">
            <summary>
            Remove all Records from the Store and fires the clear event.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.SetDefaultSort(System.String,Ext.Net.SortDirection)">
            <summary>
            Sets the default sort column and order to be used by the next load operation.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.Sort(System.String,Ext.Net.SortDirection)">
            <summary>
            Sort the Records. If remote sorting is used, the sort is performed on the server, and the cache is reloaded. If local sorting is used, the cache is sorted internally.
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddField(Ext.Net.RecordField,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddField(Ext.Net.RecordField)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.AddField(Ext.Net.RecordField,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RemoveField(Ext.Net.RecordField)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.RemoveFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.ClearMeta">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.UpdateRecordField(System.Int32,System.String,System.Object)">
            <summary>
            Update record field value
            </summary>
        </member>
        <member name="M:Ext.Net.StoreBase.Builder`2.UpdateRecordField(System.Object,System.String,System.Object)">
            <summary>
            Update record field value
            </summary>
        </member>
        <member name="M:Ext.Net.StoreDataBound.DataBind">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreDataBound.ToScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.StoreDataBound.ToScript(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.StoreDataBound.Render">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.StoreDataBound.Render(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.StoreDataBound.DataSourceID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDataBound.DataMember">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDataBound.Config.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDataBound.Config.DataSourceID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreDataBound.Config.DataMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreDataBound.Builder`2.DataSource(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreDataBound.Builder`2.DataSourceID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreDataBound.Builder`2.DataMember(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StoreDataBound.Builder`2.DataBind">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.BufferView">
            <summary>
            A custom GridView which renders rows on an as-needed basis.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.RowHeight">
            <summary>
            The height of a row in the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.BorderHeight">
            <summary>
            The combined height of border-top and border-bottom of a row.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.ScrollDelay">
            <summary>
            The number of milliseconds before rendering rows out of the visible viewing area. Defaults to 100. Rows will render immediately with a config of false.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.CacheSize">
            <summary>
            The number of rows to look forward and backwards from the currently viewable area.  The cache applies only to rows that have been rendered already.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.CleanDelay">
            <summary>
            The number of milliseconds to buffer cleaning of extra rows not in the cache.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.Config.RowHeight">
            <summary>
            The height of a row in the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.Config.BorderHeight">
            <summary>
            The combined height of border-top and border-bottom of a row.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.Config.ScrollDelay">
            <summary>
            The number of milliseconds before rendering rows out of the visible viewing area. Defaults to 100. Rows will render immediately with a config of false.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.Config.CacheSize">
            <summary>
            The number of rows to look forward and backwards from the currently viewable area.  The cache applies only to rows that have been rendered already.
            </summary>
        </member>
        <member name="P:Ext.Net.BufferView.Config.CleanDelay">
            <summary>
            The number of milliseconds to buffer cleaning of extra rows not in the cache.
            </summary>
        </member>
        <member name="M:Ext.Net.BufferView.Builder.RowHeight(System.Int32)">
            <summary>
            The height of a row in the grid.
            </summary>
        </member>
        <member name="M:Ext.Net.BufferView.Builder.BorderHeight(System.Int32)">
            <summary>
            The combined height of border-top and border-bottom of a row.
            </summary>
        </member>
        <member name="M:Ext.Net.BufferView.Builder.ScrollDelay(System.Int32)">
            <summary>
            The number of milliseconds before rendering rows out of the visible viewing area. Defaults to 100. Rows will render immediately with a config of false.
            </summary>
        </member>
        <member name="M:Ext.Net.BufferView.Builder.CacheSize(System.Int32)">
            <summary>
            The number of rows to look forward and backwards from the currently viewable area.  The cache applies only to rows that have been rendered already.
            </summary>
        </member>
        <member name="M:Ext.Net.BufferView.Builder.CleanDelay(System.Int32)">
            <summary>
            The number of milliseconds to buffer cleaning of extra rows not in the cache.
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarReorderer">
            <summary>
            Plugin which can be attached to any Ext.Toolbar instance. Provides ability to reorder toolbar items with drag and drop.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReorderer.Animate">
            <summary>
            If set to true, the rearranging of the toolbar items is animated
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReorderer.AnimationDuration">
            <summary>
            The duration of the animation used to move other toolbar items out of the way
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReorderer.DefaultReorderable">
            <summary>
            True to make every toolbar draggable unless reorderable is specifically set to false. This defaults to false
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReorderer.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReorderer.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.TreePanelBase.AppendChild(System.String,Ext.Net.TreeNodeBase)">
            <summary>
            Insert node as the last child node of this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="node">The node to append</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.AppendChild(System.String,System.Collections.Generic.IEnumerable{Ext.Net.TreeNodeBase})">
            <summary>
            nsert nodes as the last child node of this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="nodes">Array of nodes to append</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.Bubble(System.String,Ext.Net.JFunction,System.String,System.String[])">
            <summary>
            Bubbles up the tree from this node, calling the specified function with each node. The scope (this) of function call will be the scope provided or the current node. The arguments to the function will be the args provided or the current node. If the function returns false at any point, the bubble is stopped.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">The function to call</param>
            <param name="scope">The scope of the function (defaults to current node)</param>
            <param name="args">The args to call the function with (default to passing the current node)</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.Bubble(System.String,Ext.Net.JFunction)">
            <summary>
            Bubbles up the tree from this node, calling the specified function with each node. The scope (this) of function call will be the scope provided or the current node. The arguments to the function will be the args provided or the current node. If the function returns false at any point, the bubble is stopped.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">The function to call</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.Cascade(System.String,Ext.Net.JFunction,System.String,System.String[])">
            <summary>
            Cascades down the tree from this node, calling the specified function with each node. The scope (this) of function call will be the scope provided or the current node. The arguments to the function will be the args provided or the current node. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">The function to call</param>
            <param name="scope">The scope of the function (defaults to current node)</param>
            <param name="args">The args to call the function with (default to passing the current node)</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.Cascade(System.String,Ext.Net.JFunction)">
            <summary>
            Cascades down the tree from this node, calling the specified function with each node. The scope (this) of function call will be the scope provided or the current node. The arguments to the function will be the args provided or the current node. If the function returns false at any point, the cascade is stopped on that branch.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">The function to call</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseNode(System.String,System.Boolean,System.Boolean,Ext.Net.JFunction,System.String)">
            <summary>
            Collapse this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to collapse all children as well</param>
            <param name="anim">false to cancel the default animation</param>
            <param name="callback">A callback to be called when collapsing this node completes (does not wait for deep expand to complete). Called with 1 parameter, this node.</param>
            <param name="scope">The scope in which to execute the callback.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseNode(System.String,System.Boolean,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Collapse this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to collapse all children as well</param>
            <param name="anim">false to cancel the default animation</param>
            <param name="callback">A callback to be called when collapsing this node completes (does not wait for deep expand to complete). Called with 1 parameter, this node.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Collapse this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to collapse all children as well</param>
            <param name="anim">false to cancel the default animation</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseNode(System.String,System.Boolean)">
            <summary>
            Collapse this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to collapse all children as well</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseNode(System.String)">
            <summary>
            Collapse this node.
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseChildNodes(System.String,System.Boolean)">
            <summary>
            Collapse all child nodes
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">true if the child nodes should also collapse their child nodes</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseChildNodes(System.String)">
            <summary>
            Collapse all child nodes
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.DisableNode(System.String)">
            <summary>
            Disables this node
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.EachChild(System.String,Ext.Net.JFunction,System.String,System.String[])">
            <summary>
            Interates the child nodes of this node, calling the specified function with each node. The scope (this) of function call will be the scope provided or the current node. The arguments to the function will be the args provided or the current node. If the function returns false at any point, the iteration stops.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">The function to call</param>
            <param name="scope">The scope of the function (defaults to current node)</param>
            <param name="args">The args to call the function with (default to passing the current node)</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.EachChild(System.String,Ext.Net.JFunction)">
            <summary>
            Interates the child nodes of this node, calling the specified function with each node. The scope (this) of function call will be the scope provided or the current node. The arguments to the function will be the args provided or the current node. If the function returns false at any point, the iteration stops.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">The function to call</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.EnableNode(System.String)">
            <summary>
            Enables this node
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.EnsureNodeVisible(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Ensures all parent nodes are expanded, and if necessary, scrolls the node into view.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="callback">A function to call when the node has been made visible.</param>
            <param name="scope">The scope in which to execute the callback.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.EnsureNodeVisible(System.String,Ext.Net.JFunction)">
            <summary>
            Ensures all parent nodes are expanded, and if necessary, scrolls the node into view.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="callback">A function to call when the node has been made visible.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.EnsureNodeVisible(System.String)">
            <summary>
            Ensures all parent nodes are expanded, and if necessary, scrolls the node into view.
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandNode(System.String,System.Boolean,System.Boolean,Ext.Net.JFunction,System.String)">
            <summary>
            Expand this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to expand all children as well</param>
            <param name="anim">false to cancel the default animation</param>
            <param name="callback">A callback to be called when expanding this node completes (does not wait for deep expand to complete). Called with 1 parameter, this node.</param>
            <param name="scope">The scope in which to execute the callback.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandNode(System.String,System.Boolean,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Expand this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to expand all children as well</param>
            <param name="anim">false to cancel the default animation</param>
            <param name="callback">A callback to be called when expanding this node completes (does not wait for deep expand to complete). Called with 1 parameter, this node.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Expand this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to expand all children as well</param>
            <param name="anim">false to cancel the default animation</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandNode(System.String,System.Boolean)">
            <summary>
            Expand this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">True to expand all children as well</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandNode(System.String)">
            <summary>
            Expand this node.
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandChildNodes(System.String,System.Boolean)">
            <summary>
            Expand all child nodes
            </summary>
            <param name="nodeId">Node id</param>
            <param name="deep">true if the child nodes should also expand their child nodes</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandChildNodes(System.String)">
            <summary>
            Expand all child nodes
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.InsertBeforeChild(System.String,Ext.Net.TreeNodeBase,System.String)">
            <summary>
            Inserts the first node before the second node in this nodes childNodes collection.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="newNode">The node to insert</param>
            <param name="refNodeId">The node to insert before (if null the node is appended)</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.NodeOn(System.String,System.String,Ext.Net.JFunction)">
            <summary>
            Appends an event handler to the node
            </summary>
            <param name="nodeId">Node id</param>
            <param name="eventName">The type of event to listen for</param>
            <param name="fn">The method the event invokes</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.NodeOn(System.String,System.String,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to the node
            </summary>
            <param name="nodeId">Node id</param>
            <param name="eventName">The type of event to listen for</param>
            <param name="fn">The method the event invokes</param>
            <param name="scope">The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.</param>
            <param name="options">An object containing handler configuration.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.RemoveNode(System.String)">
            <summary>
            Removes this node from its parent
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.RemoveChildren(System.String)">
            <summary>
            Removes all children nodes
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.RemoveChildNode(System.String,System.String)">
            <summary>
            Removes a child node from this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="childNodeId">The node to remove</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ReplaceChildNode(System.String,System.String,Ext.Net.TreeNodeBase)">
            <summary>
            Replaces one child node in this node with another.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="oldChildNodeId">The node to replace</param>
            <param name="newNode">The replacement node</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SelectNode(System.String)">
            <summary>
            Triggers selection of this node
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SetNodeId(System.String,System.String)">
            <summary>
            Changes the id of this node.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="newId">The new id for the node.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SetNodeText(System.String,System.String)">
            <summary>
            Sets the text for this node
            </summary>
            <param name="nodeId">Node id</param>
            <param name="text">The new text for the node.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SortChildrenNodes(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Sorts this nodes children using the supplied sort function
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">Sort function</param>
            <param name="scope">The scope of the sort function</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SortChildrenNodes(System.String,Ext.Net.JFunction)">
            <summary>
            Sorts this nodes children using the supplied sort function
            </summary>
            <param name="nodeId">Node id</param>
            <param name="fn">Sort function</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ToggleNode(System.String)">
            <summary>
            Toggles expanded/collapsed state of the node
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.UnselectNode(System.String)">
            <summary>
            Triggers deselection of this node
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ReloadAsyncNode(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Trigger a reload for this node
            </summary>
            <param name="nodeId">Node id</param>
            <param name="callback ">Callback  function</param>
            <param name="scope">The scope of the sort function</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ReloadAsyncNode(System.String,Ext.Net.JFunction)">
            <summary>
            Trigger a reload for this node
            </summary>
            <param name="nodeId">Node id</param>
            <param name="callback">Callback function</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.AddNodeClass(System.String,System.String)">
            <summary>
            Adds one or more CSS classes to the node's UI element. Duplicate classes are automatically filtered out.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="className">The CSS class to add</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.HideNode(System.String)">
            <summary>
            Hides this node.
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.RemoveNodeClass(System.String,System.String)">
            <summary>
            Removes one or more CSS classes from the node's UI element.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="className">The CSS class to remove</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ShowNode(System.String)">
            <summary>
            Shows this node.
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ToggleCheck(System.String,System.Boolean)">
            <summary>
            Sets the checked status of the tree node to the passed value, or, if no value was passed, toggles the checked status. If the node was rendered with no checkbox, this has no effect.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="value">The new checked status.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ToggleCheck(System.String)">
            <summary>
            Sets the checked status of the tree node to the passed value, or, if no value was passed, toggles the checked status. If the node was rendered with no checkbox, this has no effect.
            </summary>
            <param name="nodeId">Node id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CollapseAll">
            <summary>
            Collapse all nodes
            </summary>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandAll">
            <summary>
            Expand all nodes
            </summary>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandPath(System.String,System.String,Ext.Net.JFunction)">
            <summary>
            Expands a specified path in this TreePanel. A path can be retrieved from a node with Ext.data.Node.getPath
            </summary>
            <param name="path">Path</param>
            <param name="attr">The attribute used in the path</param>
            <param name="callback">The callback to call when the expand is complete. The callback will be called with (bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandPath(System.String,System.String)">
            <summary>
            Expands a specified path in this TreePanel. A path can be retrieved from a node with Ext.data.Node.getPath
            </summary>
            <param name="path">Path</param>
            <param name="attr">The attribute used in the path</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.ExpandPath(System.String)">
            <summary>
            Expands a specified path in this TreePanel. A path can be retrieved from a node with Ext.data.Node.getPath
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SelectPath(System.String,System.String,Ext.Net.JFunction)">
            <summary>
            Selects the node in this tree at the specified path. A path can be retrieved from a node with Ext.data.Node.getPath
            </summary>
            <param name="path">Path</param>
            <param name="attr">The attribute used in the path</param>
            <param name="callback">The callback to call when the selection is complete. The callback will be called with (bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SelectPath(System.String,System.String)">
            <summary>
            Selects the node in this tree at the specified path. A path can be retrieved from a node with Ext.data.Node.getPath
            </summary>
            <param name="path">Path</param>
            <param name="attr">The attribute used in the path</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SelectPath(System.String)">
            <summary>
            Selects the node in this tree at the specified path. A path can be retrieved from a node with Ext.data.Node.getPath
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.SetRootNode(Ext.Net.TreeNodeBase)">
            <summary>
            Sets the root node for this tree. If the TreePanel has already rendered a root node, the previous root node (and all of its descendants) are destroyed before the new root node is rendered.
            </summary>
            <param name="node">New root node</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.StartEdit(System.String,System.Int32)">
            <summary>
            Start editing of the node
            </summary>
            <param name="nodeId">Node Id</param>
            <param name="defer">Delay before start in ms</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.StartEdit(System.String)">
            <summary>
            Start editing of the node
            </summary>
            <param name="nodeId">Node Id</param>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CompleteEdit">
            <summary>
            Complete editing of the node
            </summary>
        </member>
        <member name="M:Ext.Net.TreePanelBase.CancelEdit">
            <summary>
            Cancel editing of the node
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.DragConfig">
            <summary>
            Custom config to pass to the Ext.tree.TreeDragZone instance
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.DropConfig">
            <summary>
            Custom config to pass to the Ext.tree.TreeDropZone instance
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.SelectionModel">
            <summary>
            A tree selection model to use with this TreePanel (defaults to an Ext.tree.DefaultSelectionModel)
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.Editors">
            <summary>
            A collection of editors configs
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.SelectionSubmitConfig">
            <summary>
            Selection submit config
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.Sorter">
            <summary>
            Provides sorting of nodes in a Ext.tree.TreePanel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelBase.Mode">
            <summary>
            Set to Remote need perform remote confirmation for basic operations.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanel.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGrid.SetHideHeaders(System.Boolean)">
            <summary>
            Show/Hide the grid's header.
            </summary>
            <param name="hide"></param>
        </member>
        <member name="P:Ext.Net.TreeGrid.Columns">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.AutoScroll">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.HideHeaders">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.NoLeafIcon">
            <summary>
            if true then leaf node has no icon
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGrid.Builder.AutoScroll(System.Boolean)">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGrid.Builder.HideHeaders(System.Boolean)">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TreeGrid.Builder.NoLeafIcon(System.Boolean)">
            <summary>
            if true then leaf node has no icon
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.Config.Columns">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.Config.AutoScroll">
            <summary>
            true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.Config.HideHeaders">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGrid.Config.NoLeafIcon">
            <summary>
            if true then leaf node has no icon
            </summary>
        </member>
        <member name="T:Ext.Net.SliderField">
            <summary>
            Wraps a Slider so it can be used as a form field.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SliderField.Slider">
            <summary>
            Slider object config
            </summary>
        </member>
        <member name="P:Ext.Net.SliderField.Config.Slider">
            <summary>
            Slider object config
            </summary>
        </member>
        <member name="T:Ext.Net.RowExpander">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.ToggleRow(System.Int32)">
            <summary>
            Toggle (expand/collapse) row
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.ExpandAll">
            <summary>
            Expand all rows
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.CollapseAll">
            <summary>
            Collapse all rows
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.ExpandRow(System.Int32)">
            <summary>
            Expand row
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.CollapseRow(System.Int32)">
            <summary>
            Collapse row
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Template">
            <summary>
            The template string to use to display each item in the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.RecreateComponent">
            <summary>
            Recreate component on each row expand
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.SwallowBodyEvents">
            <summary>
            Swallow row body's events
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.ColumnPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.EnableCaching">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.ExpandOnEnter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.ExpandOnDblClick">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.LazyRender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.SingleExpand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.RecreateComponent(System.Boolean)">
            <summary>
            Recreate component on each row expand
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.SwallowBodyEvents(System.Boolean)">
            <summary>
            Swallow row body's events
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.ColumnPosition(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.EnableCaching(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.ExpandOnEnter(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.ExpandOnDblClick(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.LazyRender(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.SingleExpand(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.ToggleRow(System.Int32)">
            <summary>
            Toggle (expand/collapse) row
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.ExpandAll">
            <summary>
            Expand all rows
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.CollapseAll">
            <summary>
            Collapse all rows
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.ExpandRow(System.Int32)">
            <summary>
            Expand row
            </summary>
        </member>
        <member name="M:Ext.Net.RowExpander.Builder.CollapseRow(System.Int32)">
            <summary>
            Collapse row
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.Template">
            <summary>
            The template string to use to display each item in the dropdown list.
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.RecreateComponent">
            <summary>
            Recreate component on each row expand
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.SwallowBodyEvents">
            <summary>
            Swallow row body's events
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.ColumnPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.EnableCaching">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.ExpandOnEnter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.ExpandOnDblClick">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.LazyRender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.SingleExpand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpander.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.MultiSelect">
            <summary>
            A control that allows selection and form submission of multiple list items.
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelect.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelect.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelect.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelect.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.LayoutRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutRow.RowHeight">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="M:Ext.Net.LayoutRow.Builder.RowHeight(System.Decimal)">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutRow.Config.RowHeight">
            <summary>
            The ColumnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than or equal to 1.0.
            </summary>
        </member>
        <member name="T:Ext.Net.HeaderColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Target">
            <summary>
            The target element which will be placed to the header.
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.AutoWidthElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.AutoWidthCorrection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Component">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HeaderColumn.Builder.Target(System.String)">
            <summary>
            The target element which will be placed to the header.
            </summary>
        </member>
        <member name="M:Ext.Net.HeaderColumn.Builder.AutoWidthElement(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HeaderColumn.Builder.AutoWidthCorrection(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HeaderColumn.Builder.Cls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Config.Target">
            <summary>
            The target element which will be placed to the header.
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Config.AutoWidthElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Config.AutoWidthCorrection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Config.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderColumn.Config.Component">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.GridPanel">
            <summary>
            This class represents the primary interface of a component based grid control.
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridPanel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.DateMenu">
            <summary>
            A menu containing a Ext.menu.DateItem component (which provides a date picker).
            </summary>
        </member>
        <member name="P:Ext.Net.DateMenu.Picker">
            <summary>
            The Ext.DatePicker object
            </summary>
        </member>
        <member name="P:Ext.Net.DateMenu.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DateMenu.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DateMenu.Config.Picker">
            <summary>
            The Ext.DatePicker object
            </summary>
        </member>
        <member name="P:Ext.Net.DateMenu.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DateMenu.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.BorderLayout">
            <summary>
            This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic split bars between regions and built-in expanding and collapsing of regions.
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.North">
            <summary>
            Represent options of north region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.South">
            <summary>
            Represent options of south region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.West">
            <summary>
            Represent options of west region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.East">
            <summary>
            Represent options of east region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.Center">
            <summary>
            Represent options of center region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.Config.North">
            <summary>
            Represent options of north region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.Config.South">
            <summary>
            Represent options of south region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.Config.West">
            <summary>
            Represent options of west region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.Config.East">
            <summary>
            Represent options of east region
            </summary>
        </member>
        <member name="P:Ext.Net.BorderLayout.Config.Center">
            <summary>
            Represent options of center region
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutConfig.RenderHidden">
            <summary>
            True to hide each contained item on render (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.LayoutConfig.ExtraCls">
            <summary>
            An optional extra CSS class that will be added to the container. This can be useful for adding customized styles to the container or any of its children using standard CSS rules. See Component.CtCls also.
            Note: ExtraCls defaults to '' except for the following classes which assign a value by default:
            Absolute Layout : 'x-abs-layout-item'
            Box Layout : 'x-box-item'
            Column Layout : 'x-column'
            To configure the above Classes with an extra CSS class append to the default. For example, for ColumnLayout:
            extraCls: 'x-column custom-class'
            </summary>
        </member>
        <member name="T:Ext.Net.Element">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.op_Implicit(System.Web.UI.Control)~Ext.Net.Element">
            <new date="2010-01-04" owner="geoff" key="Element">
            New WebControl to Element implicit conversion operator which enables direct cast of Control objects to Ext.Net.Element objects.
            </new>
        </member>
        <member name="M:Ext.Net.Element.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.#ctor(Ext.Net.Component)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.#ctor(Ext.Net.Component,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.GetDom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.Get(System.Web.UI.Control)">
            <summary>
            Retrieves Ext.Element objects.
            This method does not retrieve Components. This method retrieves Ext.Element objects which encapsulate DOM elements.
            Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with the same id via AJAX or DOM.
            </summary>
            <param name="control">The Control to get as an Element object.</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Get(System.String)">
            <summary>
            Retrieves Ext.Element objects.
            This method does not retrieve Components. This method retrieves Ext.Element objects which encapsulate DOM elements.
            Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with the same id via AJAX or DOM.
            </summary>
            <param name="id">The id of the node</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Fly(System.String)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element - the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
            Use this to make one-time references to DOM elements which are not going to be accessed again either by application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get will be more appropriate to take advantage of the caching provided by the Ext.Element class.
            </summary>
            <param name="id">The id of the node</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Fly(System.Web.UI.Control)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element - the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
            Use this to make one-time references to DOM elements which are not going to be accessed again either by application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get will be more appropriate to take advantage of the caching provided by the Ext.Element class.
            </summary>
            <param name="control">The Control to get as an Element object.</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Fly(System.String,System.String)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element - the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
            Use this to make one-time references to DOM elements which are not going to be accessed again either by application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get will be more appropriate to take advantage of the caching provided by the Ext.Element class.
            </summary>
            <param name="id">The id of the node</param>
            <param name="named">Allows for creation of named reusable flyweights to prevent conflicts</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Body">
            <summary>
            Returns the current document body as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Form">
            <summary>
            Returns the current document body as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Document">
            <summary>
            Returns the current HTML document object as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Head">
            <summary>
            Returns the current HTML head object as an Ext.Element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Element.Call(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.CallDelay(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.GetID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.ConvertToSafeJSHtml(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.ToScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Element.DelayOn(System.Int32)">
            <summary>
            Turn on delay execution for subsequent methods calling
            </summary>
            <param name="delay">Delay amount</param>
            <returns>this element</returns>
        </member>
        <member name="M:Ext.Net.Element.DelayOff">
            <summary>
            Turn off delay execution
            </summary>
            <returns>this element</returns>
        </member>
        <member name="M:Ext.Net.Element.ChainOn">
            <summary>
            Turn on script chaining
            </summary>
            <returns>this element</returns>
        </member>
        <member name="M:Ext.Net.Element.ChainOff">
            <summary>
            Turn off script chaining
            </summary>
            <returns>this element</returns>
        </member>
        <member name="M:Ext.Net.Element.ResetChain">
            <summary>
            Ends the existing method chaining and starts a new
            </summary>
            <returns>this element</returns>
        </member>
        <member name="M:Ext.Net.Element.Up">
            <summary>
            Return original element, uses with Chaining only
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddClass(System.String)">
            <summary>
            Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
            </summary>
            <param name="className">The CSS class to add</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddClass(System.String[])">
            <summary>
            Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
            </summary>
            <param name="classNames">The array of CSS classes to add</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddClassOnClick(System.String)">
            <summary>
            Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)
            </summary>
            <param name="className">The CSS class to add on click</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddClassOnFocus(System.String)">
            <summary>
            Sets up event handlers to add and remove a css class when this element has the focus
            </summary>
            <param name="className">The CSS class to add on focus</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddClassOnOver(System.String)">
            <summary>
            Sets up event handlers to add and remove a css class when the mouse is over this element
            </summary>
            <param name="className">The CSS class to add on over</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddKeyListener(Ext.Net.KeyBinding)">
            <summary>
            Convenience method for constructing a KeyMap
            </summary>
            <param name="key">Key config</param>
            <returns>this element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddListener(Ext.Net.ElementListeners)">
            <summary>
            Appends an events handlers to this element.
            </summary>
            <param name="listeners">Listeners object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AddListener(System.String,System.String)">
            <summary>
            Appends an event handler to this element.
            <param name="eventName">The type of event to handle</param>
            <param name="fn">The handler function the event invokes.
            This function is passed the following parameters:
               evt : EventObject
               The EventObject describing the event.
               el : Element
               The Element which was the target of the event. Note that this may be filtered by using the delegate option.
               o : Object
               The options object from the addListener call.
            </param>
            </summary>
        </member>
        <member name="M:Ext.Net.Element.AddListener(System.String,Ext.Net.JFunction)">
            <summary>
            Appends an event handler to this element.
            <param name="eventName">The type of event to handle</param>
            <param name="fn">The handler function the event invoke</param>
            </summary>
        </member>
        <member name="M:Ext.Net.Element.AddListener(System.String,System.String,System.String)">
            <summary>
            Appends an event handler to this element.
            <param name="eventName">The type of event to handle</param>
            <param name="fn">The handler function the event invokes.
            This function is passed the following parameters:
               evt : EventObject
               The EventObject describing the event.
               el : Element
               The Element which was the target of the event. Note that this may be filtered by using the delegate option.
               o : Object
               The options object from the addListener call.
            </param>
            <param name="scope">The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element..</param>
            </summary>
        </member>
        <member name="M:Ext.Net.Element.AddListener(System.String,Ext.Net.JFunction,System.String)">
            <summary>
            Appends an event handler to this element.
            <param name="eventName">The type of event to handle</param>
            <param name="fn">The handler function the event invokes.</param>
            <param name="scope">The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element..</param>
            </summary>
        </member>
        <member name="M:Ext.Net.Element.AddListener(System.String,System.String,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this element.
            <param name="eventName">The type of event to handle</param>
            <param name="fn">The handler function the event invokes.
            This function is passed the following parameters:
               evt : EventObject
               The EventObject describing the event.
               el : Element
               The Element which was the target of the event. Note that this may be filtered by using the delegate option.
               o : Object
               The options object from the addListener call.
            </param>
            <param name="scope">The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.</param>
            <param name="options">An object containing handler configuration properties. </param>
            </summary>
        </member>
        <member name="M:Ext.Net.Element.AddListener(System.String,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Appends an event handler to this element.
            <param name="eventName">The type of event to handle</param>
            <param name="fn">The handler function the event invokes.</param>
            <param name="scope">The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.</param>
            <param name="options">An object containing handler configuration properties. </param>
            </summary>
        </member>
        <member name="M:Ext.Net.Element.PurgeAllListeners">
            <summary>
            Recursively removes all previous added listeners from this element and its children
            </summary>
            <returns>this Element</returns>
        </member>
        <member name="M:Ext.Net.Element.AlignTo(Ext.Net.Element,System.String,System.Int32[],System.Boolean)">
            <summary>
            Aligns this element with another element relative to the specified anchor points. If the other element is the document it aligns it to the viewport. 
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.
            The position parameter is optional, and can be specified in any one of the following formats:
            Blank: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").
            One anchor (deprecated): The passed anchor position is used as the target element's anchor point. The element being aligned will position its top-left corner (tl) to that point. This method has been deprecated in favor of the newer two anchor syntax below.
            Two anchors: If two values from the table below are passed separated by a dash, the first value is used as the element's anchor point, and the second value is used as the target's anchor point.
            In addition to the anchor points, the position parameter also supports the "?" character. If "?" is passed at the end of the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to the viewport if necessary. Note that the element being aligned might be swapped to align to a different position than that specified in order to enforce the viewport constraints. Following are all of the supported anchor positions:
            Value  Description
            -----  -----------------------------
            tl     The top left corner (default)
            t      The center of the top edge
            tr     The top right corner
            l      The center of the left edge
            c      In the center of the element
            r      The center of the right edge
            bl     The bottom left corner
            b      The center of the bottom edge
            br     The bottom right corner
            Example Usage:
               align el to other-el using the default positioning ("tl-bl", non-constrained)
               el.alignTo("other-el");
            
               align the top left corner of el with the top right corner of other-el (constrained to viewport)
               el.alignTo("other-el", "tr?");
            
               align the bottom right corner of el with the center left edge of other-el
               el.alignTo("other-el", "br-l?");
            
               align the center of el with the bottom left corner of other-el and
               adjust the x position by -6 pixels (and the y position by 0)
               el.alignTo("other-el", "c-bl", [-6, 0]);
            </param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AlignTo(Ext.Net.Element,System.String,System.Int32[],Ext.Net.ElementFxConfig)">
            <summary>
            Aligns this element with another element relative to the specified anchor points. If the other element is the document it aligns it to the viewport. 
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">Animation config</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AlignTo(Ext.Net.Element,System.String,System.Int32[])">
            <summary>
            Aligns this element with another element relative to the specified anchor points. If the other element is the document it aligns it to the viewport. 
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.
            The position parameter is optional, and can be specified in any one of the following formats:
            Blank: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").
            One anchor (deprecated): The passed anchor position is used as the target element's anchor point. The element being aligned will position its top-left corner (tl) to that point. This method has been deprecated in favor of the newer two anchor syntax below.
            Two anchors: If two values from the table below are passed separated by a dash, the first value is used as the element's anchor point, and the second value is used as the target's anchor point.
            In addition to the anchor points, the position parameter also supports the "?" character. If "?" is passed at the end of the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to the viewport if necessary. Note that the element being aligned might be swapped to align to a different position than that specified in order to enforce the viewport constraints. Following are all of the supported anchor positions:
            Value  Description
            -----  -----------------------------
            tl     The top left corner (default)
            t      The center of the top edge
            tr     The top right corner
            l      The center of the left edge
            c      In the center of the element
            r      The center of the right edge
            bl     The bottom left corner
            b      The center of the bottom edge
            br     The bottom right corner
            Example Usage:
               align el to other-el using the default positioning ("tl-bl", non-constrained)
               el.alignTo("other-el");
            
               align the top left corner of el with the top right corner of other-el (constrained to viewport)
               el.alignTo("other-el", "tr?");
            
               align the bottom right corner of el with the center left edge of other-el
               el.alignTo("other-el", "br-l?");
            
               align the center of el with the bottom left corner of other-el and
               adjust the x position by -6 pixels (and the y position by 0)
               el.alignTo("other-el", "c-bl", [-6, 0]);
            </param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AlignTo(Ext.Net.Element,System.String)">
            <summary>
            Aligns this element with another element relative to the specified anchor points. If the other element is the document it aligns it to the viewport. 
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.
            The position parameter is optional, and can be specified in any one of the following formats:
            Blank: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").
            One anchor (deprecated): The passed anchor position is used as the target element's anchor point. The element being aligned will position its top-left corner (tl) to that point. This method has been deprecated in favor of the newer two anchor syntax below.
            Two anchors: If two values from the table below are passed separated by a dash, the first value is used as the element's anchor point, and the second value is used as the target's anchor point.
            In addition to the anchor points, the position parameter also supports the "?" character. If "?" is passed at the end of the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to the viewport if necessary. Note that the element being aligned might be swapped to align to a different position than that specified in order to enforce the viewport constraints. Following are all of the supported anchor positions:
            Value  Description
            -----  -----------------------------
            tl     The top left corner (default)
            t      The center of the top edge
            tr     The top right corner
            l      The center of the left edge
            c      In the center of the element
            r      The center of the right edge
            bl     The bottom left corner
            b      The center of the bottom edge
            br     The bottom right corner
            Example Usage:
               align el to other-el using the default positioning ("tl-bl", non-constrained)
               el.alignTo("other-el");
            
               align the top left corner of el with the top right corner of other-el (constrained to viewport)
               el.alignTo("other-el", "tr?");
            
               align the bottom right corner of el with the center left edge of other-el
               el.alignTo("other-el", "br-l?");
            
               align the center of el with the bottom left corner of other-el and
               adjust the x position by -6 pixels (and the y position by 0)
               el.alignTo("other-el", "c-bl", [-6, 0]);
            </param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AlignTo(Ext.Net.Element)">
            <summary>
            Aligns this element with another element relative to the specified anchor points. If the other element is the document it aligns it to the viewport. 
            </summary>
            <param name="element">The element to align to.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],System.Boolean,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <param name="callback">The function to call after the animation finishes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],Ext.Net.ElementFxConfig,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <param name="callback">The function to call after the animation finishes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],System.Boolean,System.Int32,Ext.Net.JFunction)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <param name="callback">The function to call after the animation finishes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],Ext.Net.ElementFxConfig,System.Int32,Ext.Net.JFunction)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <param name="callback">The function to call after the animation finishes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],Ext.Net.ElementFxConfig,System.Int32)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],Ext.Net.ElementFxConfig,System.Boolean)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <param name="monitorScroll">True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay (defaults to 50ms).</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],System.Boolean)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[],Ext.Net.ElementFxConfig)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String,System.Int32[])">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <param name="offsets">Offset the positioning by [x, y]</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AnchorTo(Ext.Net.Element,System.String)">
            <summary>
            Anchors an element to another element and realigns it when the window is resized.
            </summary>
            <param name="element">The element to align to.</param>
            <param name="position">The position to align to.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Animate(Ext.Net.ElementAnimationConfig,System.Double,Ext.Net.JFunction,Ext.Net.Easing,Ext.Net.AnimationType)">
            <summary>
            Perform custom animation on this element.
            </summary>
            <param name="args">The animation control args</param>
            <param name="duration">How long the animation lasts in seconds (defaults to .35)</param>
            <param name="onComplete">Function to call when animation completes</param>
            <param name="easing">Ext.Fx.easing method to use (defaults to 'easeOut')</param>
            <param name="animType">'run' is the default. Can also be 'color', 'motion', or 'scroll'</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Animate(Ext.Net.ElementAnimationConfig,System.Double,Ext.Net.JFunction,Ext.Net.Easing)">
            <summary>
            Perform custom animation on this element.
            </summary>
            <param name="args">The animation control args</param>
            <param name="duration">How long the animation lasts in seconds (defaults to .35)</param>
            <param name="onComplete">Function to call when animation completes</param>
            <param name="easing">Ext.Fx.easing method to use (defaults to 'easeOut')</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Animate(Ext.Net.ElementAnimationConfig,System.Double,Ext.Net.JFunction)">
            <summary>
            Perform custom animation on this element.
            </summary>
            <param name="args">The animation control args</param>
            <param name="duration">How long the animation lasts in seconds (defaults to .35)</param>
            <param name="onComplete">Function to call when animation completes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Animate(Ext.Net.ElementAnimationConfig,System.Double)">
            <summary>
            Perform custom animation on this element.
            </summary>
            <param name="args">The animation control args</param>
            <param name="duration">How long the animation lasts in seconds (defaults to .35)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Animate(Ext.Net.ElementAnimationConfig)">
            <summary>
            Perform custom animation on this element.
            </summary>
            <param name="args">The animation control args</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AppendChild(Ext.Net.Element)">
            <summary>
            Appends the passed element(s) to this element
            </summary>
            <param name="element">element</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AppendChild(System.String)">
            <summary>
            Appends the passed element(s) to this element
            </summary>
            <param name="element">element</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AppendTo(Ext.Net.Element)">
            <summary>
            Appends this element to the passed element
            </summary>
            <param name="element">The new parent element</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ApplyStyles(System.String)">
            <summary>
            More flexible version of setStyle for setting style properties. 
            </summary>
            <param name="styles">A style specification string, e.g. "width:100px"</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ApplyStyles(Ext.Net.JsonObject)">
            <summary>
            More flexible version of setStyle for setting style properties. 
            </summary>
            <param name="styles">A style specification object in the form {width:"100px"}</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ApplyStyles(Ext.Net.JFunction)">
            <summary>
            More flexible version of setStyle for setting style properties. 
            </summary>
            <param name="styles">Function which returns styles specification, like {width:"100px"}</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AutoHeight(System.Boolean,System.Double,Ext.Net.JFunction,Ext.Net.Easing)">
            <summary>
            Measures the element's content height and updates height to match. Note: this function uses setTimeout so the new height may not be available immediately.
            </summary>
            <param name="animate">Animate the transition (defaults to false)</param>
            <param name="duration">Length of the animation in seconds (defaults to .35)</param>
            <param name="onComplete">Function to call when animation completes</param>
            <param name="easing">Easing method to use (defaults to easeOut)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AutoHeight(System.Boolean,System.Double,Ext.Net.JFunction)">
            <summary>
            Measures the element's content height and updates height to match. Note: this function uses setTimeout so the new height may not be available immediately.
            </summary>
            <param name="animate">Animate the transition (defaults to false)</param>
            <param name="duration">Length of the animation in seconds (defaults to .35)</param>
            <param name="onComplete">Function to call when animation completes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AutoHeight(System.Boolean,System.Double)">
            <summary>
            Measures the element's content height and updates height to match. Note: this function uses setTimeout so the new height may not be available immediately.
            </summary>
            <param name="animate">Animate the transition (defaults to false)</param>
            <param name="duration">Length of the animation in seconds (defaults to .35)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AutoHeight(System.Boolean)">
            <summary>
            Measures the element's content height and updates height to match. Note: this function uses setTimeout so the new height may not be available immediately.
            </summary>
            <param name="animate">Animate the transition (defaults to false)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.AutoHeight">
            <summary>
            Measures the element's content height and updates height to match. Note: this function uses setTimeout so the new height may not be available immediately.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Blur">
            <summary>
            Tries to blur the element. Any exceptions are caught and ignored.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.BoxWrap(System.String)">
            <summary>
            Wraps the specified element with a special 9 element markup/CSS block that renders by default as a gray container with a gradient background, rounded corners and a 4-way shadow.
            This special markup is used throughout Ext when box wrapping elements (Ext.Button, Ext.Panel when frame=true, Ext.Window).
            </summary>
            <param name="cssClass">A base CSS class to apply to the containing wrapper element (defaults to 'x-box'). Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.BoxWrap">
            <summary>
            Wraps the specified element with a special 9 element markup/CSS block that renders by default as a gray container with a gradient background, rounded corners and a 4-way shadow.
            This special markup is used throughout Ext when box wrapping elements (Ext.Button, Ext.Panel when frame=true, Ext.Window).
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Center(Ext.Net.Element)">
            <summary>
            Centers the Element in either the viewport, or another Element.
            </summary>
            <param name="centerIn">The element in which to center the element.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Center">
            <summary>
            Centers the Element in either the viewport, or another Element.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Child(System.String)">
            <summary>
            Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
            </summary>
            <param name="selector">The CSS selector</param>
            <returns>The child Ext.Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Clean(System.Boolean)">
            <summary>
            Removes worthless text nodes
            </summary>
            <param name="forceReclean">By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a reclean, you can pass true.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Clean">
            <summary>
            Removes worthless text nodes
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ClearOpacity">
            <summary>
            Clears any opacity settings from this element. Required in some cases for IE.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ClearPositioning(System.String)">
            <summary>
            Clear positioning back to the default when the document was loaded
            </summary>
            <param name="value">The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Clip">
            <summary>
            Store the current overflow setting and clip overflow on the element - use unclip to remove
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateChild(Ext.Net.DomObject,Ext.Net.Element)">
            <summary>
            Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
            </summary>
            <param name="config">DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.</param>
            <param name="insertBefore">a child element of this element</param>
            <returns>The new child element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateChild(Ext.Net.DomObject)">
            <summary>
            Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
            </summary>
            <param name="config">DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.</param>
            <returns>The new child element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateProxy(Ext.Net.DomObject,System.String,System.Boolean)">
            <summary>
            Creates a proxy element of this element
            </summary>
            <param name="config">The DomHelper config object of the proxy element</param>
            <param name="renderTo">The  element id to render the proxy to (defaults to document.body)</param>
            <param name="matchBox">True to align and size the proxy to this element now (defaults to false)</param>
            <returns>The new proxy element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateProxy(Ext.Net.DomObject,Ext.Net.Element,System.Boolean)">
            <summary>
            Creates a proxy element of this element
            </summary>
            <param name="config">The DomHelper config object of the proxy element</param>
            <param name="renderTo">The  element to render the proxy to (defaults to document.body)</param>
            <param name="matchBox">True to align and size the proxy to this element now (defaults to false)</param>
            <returns>The new proxy element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateProxy(System.String,System.String,System.Boolean)">
            <summary>
            Creates a proxy element of this element
            </summary>
            <param name="className">The class name of the proxy element</param>
            <param name="renderTo">The  element id to render the proxy to (defaults to document.body)</param>
            <param name="matchBox">True to align and size the proxy to this element now (defaults to false)</param>
            <returns>The new proxy element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateProxy(System.String,Ext.Net.Element,System.Boolean)">
            <summary>
            Creates a proxy element of this element
            </summary>
            <param name="className">The class name of the proxy element</param>
            <param name="renderTo">The  element to render the proxy to (defaults to document.body)</param>
            <param name="matchBox">True to align and size the proxy to this element now (defaults to false)</param>
            <returns>The new proxy element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateProxy(System.String)">
            <summary>
            Creates a proxy element of this element
            </summary>
            <param name="className">The class name of the proxy element</param>
            <returns>The new proxy element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateProxy(Ext.Net.DomObject)">
            <summary>
            Creates a proxy element of this element
            </summary>
            <param name="config">The DomHelper config object of the proxy element</param>
            <returns>The new proxy element</returns>
        </member>
        <member name="M:Ext.Net.Element.CreateShim">
            <summary>
            Creates an iframe shim for this element to keep selects and other windowed objects from showing through.
            </summary>
            <returns>The new shim element</returns>
        </member>
        <member name="M:Ext.Net.Element.Down(System.String)">
            <summary>
            Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
            </summary>
            <param name="selector">The CSS selector</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.EnableDisplayMode(System.String)">
            <summary>
            Convenience method for setVisibilityMode(Element.DISPLAY)
            </summary>
            <param name="display">What to set display to when visible</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.EnableDisplayMode">
            <summary>
            Convenience method for setVisibilityMode(Element.DISPLAY)
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.FindParent(System.String,System.Int32)">
            <summary>
            Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            </summary>
            <param name="selector">The simple selector to test</param>
            <param name="maxDepth">The max depth to search as a number (defaults to 50 || document.body)</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.FindParent(System.String,Ext.Net.Element)">
            <summary>
            Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            </summary>
            <param name="selector">The simple selector to test</param>
            <param name="maxDepth">The max depth to search as a element (defaults to 50 || document.body)</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.FindParent(System.String)">
            <summary>
            Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            </summary>
            <param name="selector">The simple selector to test</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.FindParentNode(System.String,System.Int32)">
            <summary>
            Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            </summary>
            <param name="selector">The simple selector to test</param>
            <param name="maxDepth">The max depth to search as a number (defaults to 10 || document.body)</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.FindParentNode(System.String,Ext.Net.Element)">
            <summary>
            Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            </summary>
            <param name="selector">The simple selector to test</param>
            <param name="maxDepth">The max depth to search as a element (defaults to 10 || document.body)</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.FindParentNode(System.String)">
            <summary>
            Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
            </summary>
            <param name="selector">The simple selector to test</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.First(System.String)">
            <summary>
            Gets the first child, skipping text nodes
            </summary>
            <param name="selector">Find the next sibling that matches the passed simple selector</param>
            <returns>The first child or null</returns>
        </member>
        <member name="M:Ext.Net.Element.First">
            <summary>
            Gets the first child, skipping text nodes
            </summary>
            <returns>The first child or null</returns>
        </member>
        <member name="M:Ext.Net.Element.Focus(System.Int32)">
            <summary>
            Tries to focus the element. Any exceptions are caught and ignored.
            </summary>
            <param name="defer">Milliseconds to defer the focus</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Focus">
            <summary>
            Tries to focus the element. Any exceptions are caught and ignored.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Hide(System.Boolean)">
            <summary>
            Hide this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
            </summary>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Hide(Ext.Net.ElementFxConfig)">
            <summary>
            Hide this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
            </summary>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Hide">
            <summary>
            Hide this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Hover(Ext.Net.JFunction,Ext.Net.JFunction,System.String,Ext.Net.HandlerConfig)">
            <summary>
            Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
            </summary>
            <param name="overFn">The function to call when the mouse enters the Element.</param>
            <param name="outFn">The function to call when the mouse leaves the Element.</param>
            <param name="scope">The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element.</param>
            <param name="options">Options for the listener.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Hover(Ext.Net.JFunction,Ext.Net.JFunction,System.String)">
            <summary>
            Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
            </summary>
            <param name="overFn">The function to call when the mouse enters the Element.</param>
            <param name="outFn">The function to call when the mouse leaves the Element.</param>
            <param name="scope">The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Hover(Ext.Net.JFunction,Ext.Net.JFunction)">
            <summary>
            Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
            </summary>
            <param name="overFn">The function to call when the mouse enters the Element.</param>
            <param name="outFn">The function to call when the mouse leaves the Element.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InitDD(System.String,Ext.Net.DD,Ext.Net.JsonObject)">
            <summary>
            Initializes a Ext.dd.DD drag drop object for this element.
            </summary>
            <param name="group">The group the DD object is member of</param>
            <param name="config">The DD config object</param>
            <param name="overrides">An object containing methods to override/implement on the DD object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InitDDProxy(System.String,Ext.Net.DDProxy,Ext.Net.JsonObject)">
            <summary>
            Initializes a Ext.dd.DDProxy object for this element.
            </summary>
            <param name="group">The group the DDProxy object is member of</param>
            <param name="config">The DDProxy config object</param>
            <param name="overrides">An object containing methods to override/implement on the DDProxy object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InitDDTarget(System.String,Ext.Net.DDTarget,Ext.Net.JsonObject)">
            <summary>
            Initializes a Ext.dd.DDTarget object for this element.
            </summary>
            <param name="group">The group the DDTarget object is member of</param>
            <param name="config">The DDTarget config object</param>
            <param name="overrides">An object containing methods to override/implement on the DDTarget object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertAfter(Ext.Net.Element)">
            <summary>
            Inserts this element after the passed element in the DOM
            </summary>
            <param name="element">The element to insert after</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertBefore(Ext.Net.Element)">
            <summary>
            Inserts this element before the passed element in the DOM
            </summary>
            <param name="element">The element before which this element will be inserted</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertFirst(Ext.Net.Element)">
            <summary>
            Inserts an element as the first child of this element
            </summary>
            <param name="element">The id or element to insert</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertFirst(System.String)">
            <summary>
            Inserts an element as the first child of this element
            </summary>
            <param name="element">The id or element to insert</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertFirst(Ext.Net.DomObject)">
            <summary>
            Creates an DomHelper config as the first child of this element
            </summary>
            <param name="element">DomHelper config to create and insert</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertHtml(Ext.Net.InsertPosition,System.String)">
            <summary>
            Inserts an html fragment into this element
            </summary>
            <param name="where">Where to insert the html in relation to this element-beforeBegin, afterBegin, beforeEnd, afterEnd.</param>
            <param name="html">The HTML fragment</param>
            <returns>The inserted node (or nearest related if more than 1 inserted)</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertSibling(Ext.Net.Element,Ext.Net.InsertPosition)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            </summary>
            <param name="element">The id or element to insert</param>
            <param name="where">'before' or 'after' defaults to before</param>
            <returns>The inserted Element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertSibling(System.String,Ext.Net.InsertPosition)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            </summary>
            <param name="element">The id or element to insert</param>
            <param name="where">'before' or 'after' defaults to before</param>
            <returns>The inserted Element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertSibling(Ext.Net.DomObject,Ext.Net.InsertPosition)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            </summary>
            <param name="element">DomHelper config to create and insert</param>
            <param name="where">'before' or 'after' defaults to before</param>
            <returns>The inserted Element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertSibling(Ext.Net.Element)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            </summary>
            <param name="element">The id or element to insert</param>
            <returns>The inserted Element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertSibling(System.String)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            </summary>
            <param name="element">The id or element to insert</param>
            <returns>The inserted Element</returns>
        </member>
        <member name="M:Ext.Net.Element.InsertSibling(Ext.Net.DomObject)">
            <summary>
            Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
            </summary>
            <param name="element">DomHelper config to create and insert</param>
            <returns>The inserted Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Last(System.String)">
            <summary>
            Gets the last child, skipping text nodes
            </summary>
            <param name="selector">Find the previous sibling that matches the passed simple selector</param>
            <returns>The last child or null</returns>
        </member>
        <member name="M:Ext.Net.Element.Last">
            <summary>
            Gets the last child, skipping text nodes
            </summary>
            <returns>The last child or null</returns>
        </member>
        <member name="M:Ext.Net.Element.Load(Ext.Net.BaseLoadConfig)">
            <summary>
            Direct access to the Updater Ext.Updater.update method.
            </summary>
            <param name="config">Load config</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Mask(System.String,System.String)">
            <summary>
            Puts a mask over this element to disable user interaction. Requires core.css. This method can only be applied to elements which accept child nodes.
            </summary>
            <param name="msg"> A message to display in the mask</param>
            <param name="msgCls">A css class to apply to the msg element</param>
            <returns>The mask element</returns>
        </member>
        <member name="M:Ext.Net.Element.Mask(System.String)">
            <summary>
            Puts a mask over this element to disable user interaction. Requires core.css. This method can only be applied to elements which accept child nodes.
            </summary>
            <param name="msg"> A message to display in the mask</param>
            <returns>The mask element</returns>
        </member>
        <member name="M:Ext.Net.Element.Mask">
            <summary>
            Puts a mask over this element to disable user interaction. Requires core.css. This method can only be applied to elements which accept child nodes.
            </summary>
            <returns>The mask element</returns>
        </member>
        <member name="M:Ext.Net.Element.Move(Ext.Net.Direction,System.Int32,System.Boolean)">
            <summary>
            Move this element relative to its current position.
            </summary>
            <param name="direction">Moving direction</param>
            <param name="distance">How far to move the element in pixels</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Move(Ext.Net.Direction,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Move this element relative to its current position.
            </summary>
            <param name="direction">Moving direction</param>
            <param name="distance">How far to move the element in pixels</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Move(Ext.Net.Direction,System.Int32)">
            <summary>
            Move this element relative to its current position.
            </summary>
            <param name="direction">Moving direction</param>
            <param name="distance">How far to move the element in pixels</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.MoveTo(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Net.Element.MoveTo(System.Int32,System.Int32,Ext.Net.ElementFxConfig)" -->
        <member name="M:Ext.Net.Element.MoveTo(System.Int32,System.Int32)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Next(System.String)">
            <summary>
            Gets the next sibling, skipping text nodes
            </summary>
            <param name="selector">Find the next sibling that matches the passed simple selector</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Next">
            <summary>
            Gets the next sibling, skipping text nodes
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Parent(System.String)">
            <summary>
            Gets the parent node for this element, optionally chaining up trying to match a selector
            </summary>
            <param name="selector">Find a parent node that matches the passed simple selector</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Parent">
            <summary>
            Gets the parent node for this element, optionally chaining up trying to match a selector
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Position(Ext.Net.CssPosition,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes positioning on this element. If a desired position is not passed, it will make the the element positioned relative IF it is not already positioned.
            </summary>
            <param name="position">Positioning to use "relative", "absolute" or "fixed"</param>
            <param name="zIndex">The zIndex to apply</param>
            <param name="x">Set the page X position</param>
            <param name="y">Set the page Y position</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Position(Ext.Net.CssPosition,System.Int32)">
            <summary>
            Initializes positioning on this element. If a desired position is not passed, it will make the the element positioned relative IF it is not already positioned.
            </summary>
            <param name="position">Positioning to use "relative", "absolute" or "fixed"</param>
            <param name="zIndex">The zIndex to apply</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Position(Ext.Net.CssPosition)">
            <summary>
            Initializes positioning on this element. If a desired position is not passed, it will make the the element positioned relative IF it is not already positioned.
            </summary>
            <param name="position">Positioning to use "relative", "absolute" or "fixed"</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Position">
            <summary>
            Initializes positioning on this element. If a desired position is not passed, it will make the the element positioned relative IF it is not already positioned.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Prev(System.String)">
            <summary>
            Gets the previous sibling, skipping text nodes
            </summary>
            <param name="selector">Find the previous sibling that matches the passed simple selector</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Prev">
            <summary>
            Gets the previous sibling, skipping text nodes
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RadioClass(System.String)">
            <summary>
            Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
            </summary>
            <param name="className">The CSS class to add</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RadioClass(System.String[])">
            <summary>
            Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
            </summary>
            <param name="classNames">The array of CSS classes to add</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RelayEvent(System.String,Ext.Net.Observable)">
            <summary>
            Create an event handler on this element such that when the event fires and is handled by this element, it will be relayed to another object (i.e., fired again as if it originated from that object instead).
            </summary>
            <param name="eventName">The type of event to relay</param>
            <param name="observable">Any object that extends Ext.util.Observable that will provide the context for firing the relayed event</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RelayEvent(System.String,System.String)">
            <summary>
            Create an event handler on this element such that when the event fires and is handled by this element, it will be relayed to another object (i.e., fired again as if it originated from that object instead).
            </summary>
            <param name="eventName">The type of event to relay</param>
            <param name="observable">Any object that extends Ext.util.Observable that will provide the context for firing the relayed event</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Remove">
            <summary>
            Removes this element from the DOM and deletes it from the cache
            </summary>
        </member>
        <member name="M:Ext.Net.Element.RemoveAllListeners">
            <summary>
            Removes all previous added listeners from this element
            </summary>
        </member>
        <member name="M:Ext.Net.Element.RemoveClass(System.String)">
            <summary>
            Removes one or more CSS classes from the element.
            </summary>
            <param name="className">The CSS class to remove</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveClass(System.String[])">
            <summary>
            Removes one or more CSS classes from the element.
            </summary>
            <param name="classNames">The array of CSS classes to remove</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveListener(System.String,System.String,System.String)">
            <summary>
            Removes an event handler from this element. Note: if a scope was explicitly specified when adding the listener, the same scope must be specified here. 
            </summary>
            <param name="eventName">the type of event to remove </param>
            <param name="funcName">the method the event invokes</param>
            <param name="scope">The scope (The this reference) of the handler function. Defaults to this Element.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveListener(System.String,System.String)">
            <summary>
            Removes an event handler from this element. Note: if a scope was explicitly specified when adding the listener, the same scope must be specified here. 
            </summary>
            <param name="eventName">the type of event to remove </param>
            <param name="funcName">the method the event invokes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Repaint">
            <summary>
            Forces the browser to repaint this element
            </summary>
        </member>
        <member name="M:Ext.Net.Element.Replace(Ext.Net.Element)">
            <summary>
            Replaces the passed element with this element
            </summary>
            <param name="element">The element to replace</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ReplaceClass(System.String,System.String)">
            <summary>
            Replaces a CSS class on the element with another. If the old name does not exist, the new name will simply be added.
            </summary>
            <param name="oldClassName">The CSS class to replace</param>
            <param name="newClassName">The replacement CSS class</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ReplaceWith(Ext.Net.Element)">
            <summary>
            Replaces this element with the passed element
            </summary>
            <param name="element">The new element or a DomHelper config of an element to create</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ReplaceWith(Ext.Net.DomObject)">
            <summary>
            Replaces this element with the passed element
            </summary>
            <param name="element">The new element or a DomHelper config of an element to create</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Scroll(Ext.Net.Direction,System.Int32,System.Boolean)">
            <summary>
            Scrolls this element the specified direction. Does bounds checking to make sure the scroll is within this element's scrollable range.
            </summary>
            <param name="direction">Scroll direction</param>
            <param name="distance">How far to scroll the element in pixels</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Scroll(Ext.Net.Direction,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Scrolls this element the specified direction. Does bounds checking to make sure the scroll is within this element's scrollable range.
            </summary>
            <param name="direction">Scroll direction</param>
            <param name="distance">How far to scroll the element in pixels</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Scroll(Ext.Net.Direction,System.Int32)">
            <summary>
            Scrolls this element the specified direction. Does bounds checking to make sure the scroll is within this element's scrollable range.
            </summary>
            <param name="direction">Scroll direction</param>
            <param name="distance">How far to scroll the element in pixels</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ScrollIntoView(Ext.Net.Element,System.Boolean)">
            <summary>
            Scrolls this element into view within the passed container.
            </summary>
            <param name="container">The container element to scroll (defaults to document.body).</param>
            <param name="hscroll">False to disable horizontal scroll (defaults to true)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ScrollIntoView(Ext.Net.Element)">
            <summary>
            Scrolls this element into view within the passed container.
            </summary>
            <param name="container">The container element to scroll (defaults to document.body).</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ScrollIntoView">
            <summary>
            Scrolls this element into view within the passed container.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ScrollTo(Ext.Net.Direction,System.Int32,System.Boolean)">
            <summary>
            Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
            </summary>
            <param name="side">Either "Left" for scrollLeft values or "Top" for scrollTop values.</param>
            <param name="value">The new scroll value</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ScrollTo(Ext.Net.Direction,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
            </summary>
            <param name="side">Either "Left" for scrollLeft values or "Top" for scrollTop values.</param>
            <param name="value">The new scroll value</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ScrollTo(Ext.Net.Direction,System.Int32)">
            <summary>
            Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
            </summary>
            <param name="side">Either "Left" for scrollLeft values or "Top" for scrollTop values.</param>
            <param name="value">The new scroll value</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Set(Ext.Net.JsonObject,System.Boolean)">
            <summary>
            Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
            </summary>
            <param name="o">The object with the attributes</param>
            <param name="useSet">false to override the default setAttribute to use expandos.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Set(Ext.Net.JsonObject)">
            <summary>
            Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
            </summary>
            <param name="o">The object with the attributes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBottom(System.String)">
            <summary>
            Sets the element's CSS bottom style.
            </summary>
            <param name="bottom">The bottom CSS property value</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBounds(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBounds(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBounds(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBox(Ext.Net.Box,System.Boolean,System.Boolean)">
            <summary>
            Sets the element's box.
            </summary>
            <param name="box">The box to fill {x, y, width, height}</param>
            <param name="adjust">Whether to adjust for box-model issues automatically</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBox(Ext.Net.Box,System.Boolean,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the element's box.
            </summary>
            <param name="box">The box to fill {x, y, width, height}</param>
            <param name="adjust">Whether to adjust for box-model issues automatically</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBox(Ext.Net.Box,System.Boolean)">
            <summary>
            Sets the element's box.
            </summary>
            <param name="box">The box to fill {x, y, width, height}</param>
            <param name="adjust">Whether to adjust for box-model issues automatically</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetBox(Ext.Net.Box)">
            <summary>
            Sets the element's box.
            </summary>
            <param name="box">The box to fill {x, y, width, height}</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetDisplayed(System.Boolean)">
            <summary>
            Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.
            </summary>
            <param name="value">Boolean value to display the element using its default display</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetDisplayed(System.String)">
            <summary>
            Sets the CSS display property.
            </summary>
            <param name="value">String to set the display directly.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetHeight(System.Int32,System.Boolean)">
            <summary>
            Set the height of this Element.
            </summary>
            <param name="value">The new height</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetHeight(System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Set the height of this Element.
            </summary>
            <param name="value">The new height</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetHeight(System.String)">
            <summary>
            Set the height of this Element.
            </summary>
            <param name="value">The new height</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetLeft(System.String)">
            <summary>
            Sets the element's left position directly using CSS style (instead of setX).
            </summary>
            <param name="left">The left CSS property value</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetLeftTop(System.String,System.String)">
            <summary>
            Quick set left and top adding default units
            </summary>
            <param name="left">The left CSS property value</param>
            <param name="top">The top CSS property value</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetLocation(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetLocation(System.Int32,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetLocation(System.Int32,System.Int32)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X value for new position (coordinates are page-based)</param>
            <param name="y">Y value for new position (coordinates are page-based)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetOpacity(System.Double,System.Boolean)">
            <summary>
            Set the opacity of the element
            </summary>
            <param name="opacity">The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetOpacity(System.Double)">
            <summary>
            Set the opacity of the element
            </summary>
            <param name="opacity">The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetOpacity(System.Double,Ext.Net.ElementFxConfig)">
            <summary>
            Set the opacity of the element
            </summary>
            <param name="opacity">The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetRight(System.String)">
            <summary>
            Sets the element's CSS right style.
            </summary>
            <param name="right">The right CSS property value</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetSize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the size of this Element. If animation is true, both width and height will be animated concurrently.
            </summary>
            <param name="width">A Number specifying the new width</param>
            <param name="height">A Number specifying the new height</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetSize(System.Int32,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Set the size of this Element. If animation is true, both width and height will be animated concurrently.
            </summary>
            <param name="width">A Number specifying the new width</param>
            <param name="height">A Number specifying the new height</param>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetSize(System.Int32,System.Int32)">
            <summary>
            Set the size of this Element. If animation is true, both width and height will be animated concurrently.
            </summary>
            <param name="width">A Number specifying the new width</param>
            <param name="height">A Number specifying the new height</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetSize(System.String,System.String)">
            <summary>
            Set the size of this Element. If animation is true, both width and height will be animated concurrently.
            </summary>
            <param name="width">A String used to set the CSS width style</param>
            <param name="height">A String used to set the CSS height style.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetSize(System.Int32,System.String)">
            <summary>
            Set the size of this Element. If animation is true, both width and height will be animated concurrently.
            </summary>
            <param name="width">A Number specifying the new width</param>
            <param name="height">A String used to set the CSS height style.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetSize(System.String,System.Int32)">
            <summary>
            Set the size of this Element. If animation is true, both width and height will be animated concurrently.
            </summary>
            <param name="width">A String used to set the CSS width style</param>
            <param name="height">A Number specifying the new height</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetStyle(Ext.Net.JsonObject)">
            <summary>
            Wrapper for setting style properties, also takes single object parameter of multiple styles.
            </summary>
            <param name="properties">Object of multiple styles</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetStyle(System.String,System.String)">
            <summary>
            Wrapper for setting style properties, also takes single object parameter of multiple styles.
            </summary>
            <param name="property">The style property to be set</param>
            <param name="value">The value to apply to the given property</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetTop(System.String)">
            <summary>
            Sets the element's top position directly using CSS style (instead of setY).
            </summary>
            <param name="top">The top CSS property value</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetValue(System.Object)">
            <summary>
            Sets the .value property of the Elements dom object if it exists.
            </summary>
            <param name="value">The value to set the Elements dom object with.</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetVisibilityMode(Ext.Net.VisibilityMode)">
            <summary>
            Sets the element's visibility mode. When setVisible() is called it will use this to determine whether to set the visibility or the display property.
            </summary>
            <param name="mode">Visibility mode</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetVisible(System.Boolean,System.Boolean)">
            <summary>
            Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
            </summary>
            <param name="visible">Whether the element is visible</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetVisible(System.Boolean,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
            </summary>
            <param name="visible">Whether the element is visible</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetWidth(System.Int32,System.Boolean)">
            <summary>
            Set the width of this Element.
            </summary>
            <param name="width">The new width</param>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetWidth(System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Set the width of this Element.
            </summary>
            <param name="width">The new width</param>
            <param name="animate">standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetWidth(System.String)">
            <summary>
            Set the width of this Element.
            </summary>
            <param name="width">The new width</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetX(System.Int32,System.Boolean)">
            <summary>
            Sets the X position of the element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X position of the element</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetX(System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the X position of the element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X position of the element</param>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetX(System.Int32)">
            <summary>
            Sets the X position of the element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X position of the element</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetY(System.Int32,System.Boolean)">
            <summary>
            Sets the Y position of the element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="y">Y position of the element</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetY(System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the Y position of the element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="y">Y position of the element</param>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetY(System.Int32)">
            <summary>
            Sets the Y position of the element based on page coordinates. Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="y">Y position of the element</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetXY(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X position of the element</param>
            <param name="y">Y position of the element</param>
            <param name="animate">True for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetXY(System.Int32,System.Int32,Ext.Net.ElementFxConfig)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X position of the element</param>
            <param name="y">Y position of the element</param>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SetXY(System.Int32,System.Int32)">
            <summary>
            Sets the position of the element in page coordinates, regardless of how the element is positioned. The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
            </summary>
            <param name="x">X position of the element</param>
            <param name="y">Y position of the element</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Select(System.String,System.Boolean,System.String)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in one statement
            </summary>
            <param name="selector">The CSS selector or an array of elements</param>
            <param name="unique">true to create a unique Ext.Element for each element (defaults to a shared flyweight object)</param>
            <param name="root">id of the root</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Select(System.String,System.Boolean)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in one statement
            </summary>
            <param name="selector">The CSS selector or an array of elements</param>
            <param name="unique">true to create a unique Ext.Element for each element (defaults to a shared flyweight object)</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Select(System.String)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in one statement
            </summary>
            <param name="selector">The CSS selector or an array of elements</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.SingleSelect(System.String)">
            <summary>
            Selects first element based on the passed CSS selector
            </summary>
            <param name="selector">The CSS selector</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.SingleSelect(System.String,System.Boolean)">
            <summary>
            Selects first element based on the passed CSS selector
            </summary>
            <param name="selector">The CSS selector</param>
            <param name="unique">true to create a unique Ext.Element for each element</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Show(System.Boolean)">
            <summary>
            Show this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
            </summary>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Show(Ext.Net.ElementFxConfig)">
            <summary>
            Show this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
            </summary>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Show">
            <summary>
            Show this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SwallowEvent(System.String,System.Boolean)">
            <summary>
            Stops the specified event(s) from bubbling and optionally prevents the default action
            </summary>
            <param name="eventName">an event / array of events to stop from bubbling</param>
            <param name="preventDefault">true to prevent the default action too</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SwallowEvent(System.String)">
            <summary>
            Stops the specified event(s) from bubbling and optionally prevents the default action
            </summary>
            <param name="eventName">an event / array of events to stop from bubbling</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SwallowEvent(System.String[],System.Boolean)">
            <summary>
            Stops the specified event(s) from bubbling and optionally prevents the default action
            </summary>
            <param name="eventNames">an event / array of events to stop from bubbling</param>
            <param name="preventDefault">true to prevent the default action too</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.SwallowEvent(System.String[])">
            <summary>
            Stops the specified event(s) from bubbling and optionally prevents the default action
            </summary>
            <param name="eventNames">an event / array of events to stop from bubbling</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Toggle(System.Boolean)">
            <summary>
            Toggles the element's visibility or display, depending on visibility mode.
            </summary>
            <param name="animate">true for the default animation</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Toggle(Ext.Net.ElementFxConfig)">
            <summary>
            Toggles the element's visibility or display, depending on visibility mode.
            </summary>
            <param name="animate">Standard Element animation config object</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Toggle">
            <summary>
            Toggles the element's visibility or display, depending on visibility mode.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.ToggleClass(System.String)">
            <summary>
            Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
            </summary>
            <param name="className">The CSS class to toggle</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Unclip">
            <summary>
            Return clipping (overflow) to original clipping before clip was called
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Unmask">
            <summary>
            Removes a previously applied mask.
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Unselectable">
            <summary>
            Disables text selection for this element (normalized across browsers)
            </summary>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Up(System.String,System.Int32)">
            <summary>
            Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child). This is a shortcut for findParentNode() that always returns an Ext.Element.
            </summary>
            <param name="selector">The simple selector to test</param>
            <param name="maxDepth">The max depth to search as a number </param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.Up(System.String,Ext.Net.Element)">
            <summary>
            Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child). This is a shortcut for findParentNode() that always returns an Ext.Element.
            </summary>
            <param name="selector">The simple selector to test</param>
            <param name="maxDepth">The max depth to search as a element</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.Up(System.String)">
            <summary>
            Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child). This is a shortcut for findParentNode() that always returns an Ext.Element.
            </summary>
            <param name="selector">The simple selector to test</param>
            <returns>The matching DOM node</returns>
        </member>
        <member name="M:Ext.Net.Element.Update(System.String,System.Boolean,Ext.Net.JFunction)">
            <summary>
            Update the innerHTML of this element, optionally searching for and processing scripts
            </summary>
            <param name="html">The new HTML</param>
            <param name="loadScripts">True to look for and process scripts (defaults to false)</param>
            <param name="callback">For async script loading you can be notified when the update completes</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Update(System.String,System.Boolean)">
            <summary>
            Update the innerHTML of this element, optionally searching for and processing scripts
            </summary>
            <param name="html">The new HTML</param>
            <param name="loadScripts">True to look for and process scripts (defaults to false)</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Update(System.String)">
            <summary>
            Update the innerHTML of this element, optionally searching for and processing scripts
            </summary>
            <param name="html">The new HTML</param>
            <returns>This element</returns>
        </member>
        <member name="M:Ext.Net.Element.Wrap(Ext.Net.DomObject)">
            <summary>
            Creates and wraps this element with another element
            </summary>
            <param name="config">DomHelper element config object for the wrapper element</param>
            <returns>The newly created wrapper element</returns>
        </member>
        <member name="M:Ext.Net.Element.Wrap">
            <summary>
            Creates and wraps this element with another element
            </summary>
            <returns>The newly created wrapper element</returns>
        </member>
        <member name="M:Ext.Net.Element.Add(System.String)">
            <summary>
            Adds elements to this composite.
            </summary>
            <param name="selector">A string CSS selector</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Add(Ext.Net.Element[])">
            <summary>
            Adds elements to this composite.
            </summary>
            <param name="elements">an array of elements or an element</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Each(Ext.Net.JFunction,System.String)">
            <summary>
            Calls the passed function passing (el, this, index) for each element in this composite.
            </summary>
            <param name="fn">The function to call</param>
            <param name="scope">The this object (defaults to the element)</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Each(Ext.Net.JFunction)">
            <summary>
            Calls the passed function passing (el, this, index) for each element in this composite.
            </summary>
            <param name="fn">The function to call</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Filter(System.String)">
            <summary>
            Filters this composite to only elements that match the passed selector.
            </summary>
            <param name="selector">A string CSS selector</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.Element.Item(System.Int32)">
            <summary>
            Returns the Element object at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveElement(System.Int32,System.Boolean)">
            <summary>
            Removes the specified element(s).
            </summary>
            <param name="index">the index of the element in this composite</param>
            <param name="removeDom">True to also remove the element from the document</param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveElement(System.Int32)">
            <summary>
            Removes the specified element(s).
            </summary>
            <param name="index">the index of the element in this composite</param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveElement(System.String,System.Boolean)">
            <summary>
            Removes the specified element(s).
            </summary>
            <param name="id">The id of an element</param>
            <param name="removeDom">True to also remove the element from the document</param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Element.RemoveElement(System.String)">
            <summary>
            Removes the specified element(s).
            </summary>
            <param name="id">The id of an element</param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Element.FadeIn(Ext.Net.FadeInConfig)">
            <summary>
            Fade an element in (from transparent to opaque). The ending opacity can be specified using the endOpacity config option.
            </summary>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.FadeOut(Ext.Net.FadeOutConfig)">
            <summary>
            Fade an element out (from opaque to transparent). The ending opacity can be specified using the endOpacity config option. Note that IE may require useDisplay:true in order to redisplay correctly.
            </summary>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Frame(System.String,System.Int32,Ext.Net.FxConfig)">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element
            </summary>
            <param name="color">The color of the border. Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').</param>
            <param name="count">The number of ripples to display (defaults to 1)</param>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Frame(System.String,System.Int32)">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element
            </summary>
            <param name="color">The color of the border. Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').</param>
            <param name="count">The number of ripples to display (defaults to 1)</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Frame(System.String)">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element
            </summary>
            <param name="color">The color of the border. Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Frame">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Ghost(System.String,Ext.Net.FxConfig)">
            <summary>
            Slides the element while fading it out of view. An anchor point can be optionally passed to set the ending point of the effect.
            </summary>
            <param name="anchor">One of the valid Fx anchor positions (defaults to bottom: 'b')</param>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Ghost(System.String)">
            <summary>
            Slides the element while fading it out of view. An anchor point can be optionally passed to set the ending point of the effect.
            </summary>
            <param name="anchor">One of the valid Fx anchor positions (defaults to bottom: 'b')</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Ghost">
            <summary>
            Slides the element while fading it out of view. An anchor point can be optionally passed to set the ending point of the effect.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Highlight(System.String,Ext.Net.HighlightConfig)">
            <summary>
            Highlights the Element by setting a color (applies to the background-color by default, but can be changed using the "attr" config option) and then fading back to the original color. If no original color is available, you should provide the "endColor" config option which will be cleared after the animation.
            </summary>
            <param name="color">The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')</param>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Highlight(System.String)">
            <summary>
            Highlights the Element by setting a color (applies to the background-color by default, but can be changed using the "attr" config option) and then fading back to the original color. If no original color is available, you should provide the "endColor" config option which will be cleared after the animation.
            </summary>
            <param name="color">The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Highlight">
            <summary>
            Highlights the Element by setting a color (applies to the background-color by default, but can be changed using the "attr" config option) and then fading back to the original color. If no original color is available, you should provide the "endColor" config option which will be cleared after the animation.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Pause(System.Int32)">
            <summary>
            Creates a pause before any subsequent queued effects begin. If there are no effects queued after the pause it will have no effect.
            </summary>
            <param name="seconds">The length of time to pause (in seconds)</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Puff(Ext.Net.FxConfig)">
            <summary>
            Fades the element out while slowly expanding it in all directions. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
            </summary>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Puff">
            <summary>
            Fades the element out while slowly expanding it in all directions. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Scale(System.Nullable{System.Int32},System.Nullable{System.Int32},Ext.Net.FxConfig)">
            <summary>
            Animates the transition of an element's dimensions from a starting height/width to an ending height/width. This method is a convenience implementation of shift. 
            </summary>
            <param name="width">The new width (pass undefined to keep the original width)</param>
            <param name="height">The new height (pass undefined to keep the original height)</param>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Scale(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Animates the transition of an element's dimensions from a starting height/width to an ending height/width. This method is a convenience implementation of shift. 
            </summary>
            <param name="width">The new width (pass undefined to keep the original width)</param>
            <param name="height">The new height (pass undefined to keep the original height)</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SequenceFx">
            <summary>
            Ensures that all effects queued after sequenceFx is called on the element are run in sequence. This is the opposite of syncFx.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.Shift(Ext.Net.ShiftConfig)">
            <summary>
            Animates the transition of any combination of an element's dimensions, xy position and/or opacity. Any of these properties not specified in the config object will not be changed. This effect requires that at least one new dimension, position or opacity setting must be passed in on the config object in order for the function to have any effect. 
            </summary>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SlideIn(System.String,Ext.Net.FxConfig)">
            <summary>
            Slides the element into view. An anchor point can be optionally passed to set the point of origin for the slide effect. This function automatically handles wrapping the element with a fixed-size container if needed. See the Fx class overview for valid anchor point options. 
            </summary>
            <param name="anchor">One of the valid Fx anchor positions (defaults to top: 't')</param>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SlideIn(System.String)">
            <summary>
            Slides the element into view. An anchor point can be optionally passed to set the point of origin for the slide effect. This function automatically handles wrapping the element with a fixed-size container if needed. See the Fx class overview for valid anchor point options. 
            </summary>
            <param name="anchor">One of the valid Fx anchor positions (defaults to top: 't')</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SlideIn">
            <summary>
            Slides the element into view. An anchor point can be optionally passed to set the point of origin for the slide effect. This function automatically handles wrapping the element with a fixed-size container if needed. See the Fx class overview for valid anchor point options. 
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SlideOut(System.String,Ext.Net.FxConfig)">
            <summary>
            Slides the element out of view. An anchor point can be optionally passed to set the end point for the slide effect. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. This function automatically handles wrapping the element with a fixed-size container if needed.
            </summary>
            <param name="anchor">One of the valid Fx anchor positions (defaults to top: 't')</param>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SlideOut(System.String)">
            <summary>
            Slides the element out of view. An anchor point can be optionally passed to set the end point for the slide effect. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. This function automatically handles wrapping the element with a fixed-size container if needed.
            </summary>
            <param name="anchor">One of the valid Fx anchor positions (defaults to top: 't')</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SlideOut">
            <summary>
            Slides the element out of view. An anchor point can be optionally passed to set the end point for the slide effect. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. This function automatically handles wrapping the element with a fixed-size container if needed.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.StopFx">
            <summary>
            Stops any running effects and clears the element's internal effects queue if it contains any additional effects that haven't started yet.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SwitchOff(Ext.Net.FxConfig)">
            <summary>
            Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television). When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. 
            </summary>
            <param name="config">Object literal with any of the Fx config options</param>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SwitchOff">
            <summary>
            Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television). When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. 
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="M:Ext.Net.Element.SyncFx">
            <summary>
            Ensures that all effects queued after syncFx is called on the element are run concurrently. This is the opposite of sequenceFx.
            </summary>
            <returns>The Element</returns>
        </member>
        <member name="P:Ext.Net.Element.Dom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.Buffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.Descriptor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.RealDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.Chaining">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.Delay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Element.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ElementAnimationConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.TabStripListeners">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripListeners.BeforeTabChange">
            <summary>
            Fires before the active tab changes. Handlers can return false to cancel the tab change.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripListeners.ContextMenu">
            <summary>
            Fires when the original browser contextmenu event originated from a tab element.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripListeners.TabChange">
            <summary>
            Fires after the active tab has changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripListeners.TabClose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripListeners.BeforeTabClose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroupDirectEvents.Change">
            <summary>
            Fires when the state of a child checkbox changes.
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroupDirectEvents.Change">
            <summary>
            Fires when the state of a child radio changes.
            </summary>
        </member>
        <member name="T:Ext.Net.ResourceManager">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.ResourceManager.INSTANCESCRIPT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.ResourceManager.ASSEMBLYSLUG">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ResourceManager.AddUpdatePanelToRefresh(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="updatePanel"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RemoveUpdatePanelToRefresh(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="updatePanel"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.Page_PreRenderComplete(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.AddInstanceScript(System.String)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.AddInstanceScript(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="template"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetCacheFlyLink(System.String)">
            <summary>
            
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildStyles">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildStyleBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildScripts">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildDirectMethodProxies">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildDirectMethodProxies(System.Boolean)">
            <summary>
            
            </summary>
            <param name="dynamicOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.AddDirectMethodControl(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.AddDirectMethodControl(System.Web.UI.Control,System.Boolean)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="isDynamic"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RemoveDirectMethodControl(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RemoveDirectMethodControl(System.Web.UI.Control,System.Boolean)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="isDynamic"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildScriptBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.BuildScriptBlock(System.Boolean)">
            <summary>
            
            </summary>
            <param name="withFunctionTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetWebResourceUrl(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetWebResourceUrl(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetWebResourceAsString(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetWebResourceAsString(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.ParseCssWebResourceUrls(System.String)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterIcon(Ext.Net.Icon)">
            <summary>
            
            </summary>
            <param name="icon"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetIconClassName(Ext.Net.Icon)">
            <summary>
            
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetIconClass(Ext.Net.Icon)">
            <summary>
            
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetIconUrl(Ext.Net.Icon)">
            <summary>
            
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetInstance(System.Web.UI.Page)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetInstance(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.Page_AjaxLoadComplete(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.XmlToParams(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RaisePostBackEvent(System.String)">
            <summary>
            
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterControlResources``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ext.Net.ResourceManager.GetThemeUrl(Ext.Net.Theme)">
            <summary>
            
            </summary>
            <param name="theme"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.SetTheme(Ext.Net.Theme)">
            <summary>
            
            </summary>
            <param name="theme"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterBeforeClientInitScript(System.String)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsClientSpecialInitScriptRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientSpecialInitScript(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsClientInitScriptRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientInitScript(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterAfterClientInitScript(System.String)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterOnReadyScript(System.String)">
            <summary>
            
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterOnReadyScript(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="orderNumber"></param>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsOnWindowResizeScriptRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterOnWindowResizeScript(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsOnTextResizeScriptRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterOnTextResizeScript(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsClientScriptBlockRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientScriptBlock(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientScriptBlock(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="script"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsClientScriptIncludeRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientScriptInclude(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientScriptInclude(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientScriptInclude(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="url"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientStyleBlock(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientStyleBlock(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientStyleBlock(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="styles"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientStyleInclude(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientStyleInclude(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.RegisterClientStyleInclude(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="url"></param>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsSupportedCulture(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsSupportedCulture(System.Globalization.CultureInfo,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <param name="isParentSupported"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsSupportedCulture(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceManager.IsSupportedCulture(System.String,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="isParentSupported"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.ResourceManager.RemoveContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ConfigOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.AllUpdatePanels">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.UpdatePanelsToRefresh">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.UpdatePanelIDsToRefresh">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.TriggerUpdatePanel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.TriggerUpdatePanelID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.WindowUnloadMsg">
            <summary>
            The message to display in the Window unload confirm dialog. Used in conjunction with WindowUnload Listener.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.HideInDesign">
            <summary>
            Hide the ResourceManager at Design Time.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.UniqueID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ClientIDProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ResourceContainers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ResourcePlaceHolder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptFilesContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.StyleContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ApplicationName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.CacheBuster">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.BLANK_IMAGE_URL">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.BLANK_IMAGE_URL_Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.CustomListeners">
            <summary>
            Custom Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.CustomDirectEvents">
            <summary>
            Custom Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.RestAPI">
            <summary>
            Defines variables for CRUD actions create, read, update and destroy in addition to a mapping of RESTful HTTP methods GET, POST, PUT and DELETE to CRUD actions.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ServiceResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ExtraParamsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.AjaxSuccess">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.AjaxErrorMessage">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.ResourceManager.DirectEventUrl" -->
        <member name="P:Ext.Net.ResourceManager.DirectEventUrlProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.AjaxViewStateMode">
            <summary>
            Specifies whether the ViewState should be returned and updated on the client during an DirectEvent. The Default value is to Exclude the ViewState from the Response. Can be set at Page level in ResourceManager, Session[\"Ext.Net.AjaxViewStateMode\"], Application[\"Ext.Net.AjaxViewStateMode\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.DirectMethodProxy">
            <summary>
            Specifies ajax method proxies creation. The Default value is to Create the proxy for each ajax method. Can be set at Page level in ResourceManager, Session[\"Ext.Net.DirectMethodProxy\"], Application[\"Ext.Net.DirectMethodProxy\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.IDMode">
            <summary>
            Gets or Sets the IDMode. Can be set at Page level in ResourceManager, Session[\"Ext.Net.IDMode\"], Application[\"Ext.Net.IDMode\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.GZip">
            <summary>
            Specifies whether the Ext.NET ResourceManager will output GZip Embedded JavaScript and Css Resources. Default is 'True'. Can be set within Session[\"Ext.Net.GZip\"], Application[\"Ext.Net.GZip\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.CleanResourceUrl">
            <summary>
            Specifies whether the Ext.NET ResourceManager will output 'clean' Url's when linking to Embedded Resources. Default is 'True'. Can be set at Page level in ResourceManager, Session[\"Ext.Net.CleanResourceUrl\"], Application[\"Ext.Net.CleanResourceUrl\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.InitScriptMode">
            <summary>
            Gets or Sets the InitScriptMode. Can be set at Page level in ResourceManager, Session[\"Ext.Net.InitScriptMode\"], Application[\"Ext.Net.InitScriptMode\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.RenderScripts">
            <summary>
            Determines how or if the required Scripts should be rendered to the Page. Can be set at Page level in ResourceManager, Session[\"Ext.Net.RenderScripts\"], Application[\"Ext.Net.RenderScripts\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.RenderStyles">
            <summary>
            Determines how or if the required Styles should be rendered to the Page. Can be set at Page level in ResourceManager, Session[\"Ext.Net.RenderStyles\"], Application[\"Ext.Net.RenderStyles\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ResourcePath">
            <summary>
            Gets the prefix of the Url path to the base ~/Ext.Net/ folder containing the resources files for this project. The path can be Absolute or Relative. Can be set at Page level in ResourceManager, Session[\"Ext.Net.ResourcePath\"], Application[\"Ext.Net.ResourcePath\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptMode">
            <summary>
            Specifies whether the Scripts should be rendered in Release or Debug mode. Default is Release. Can be set at Page level in ResourceManager, Session[\"Ext.Net.ScriptMode\"], Application[\"Ext.Net.ScriptMode\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.SourceFormatting">
            <summary>
            Specifies whether the scripts rendered to the page should be formatted. 'True' = formatting, 'False' = minified/compressed. Default is 'False'. Can be set at Page level in ResourceManager, Session[\"Ext.Net.SourceFormatting\"], Application[\"Ext.Net.SourceFormatting\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.Theme">
            <summary>
            Gets or Sets the current Theme. Can be set at Page level in ResourceManager, Session[\"Ext.Net.Theme\"], Application[\"Ext.Net.Theme\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptAdapter">
            <summary>
            Gets or Sets the current script Adapter. Can be set at Page level in ResourceManager, Session[\"Ext.Net.ScriptAdapter\"], Application[\"Ext.Net.ScriptAdapter\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.StateProvider">
            <summary>
            Gets or Sets the current script Adapter. Can be set at Page level in ResourceManager, Session[\"Ext.Net.ScriptAdapter\"], Application[\"Ext.Net.ScriptAdapter\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.QuickTips">
            <summary>
            Specifies whether to render the QuickTips. Provides attractive and customizable tooltips for any element. 'True' = QuickTips enabled, 'False' = QuickTips disabled. Default is 'True'. Can be set at Page level in ResourceManager, Session[\"Ext.Net.QuickTips\"], Application[\"Ext.Net.QuickTips\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.Locale">
            <summary>
            Specifies language of the ExtJS resources to use.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.DirectMethodNamespace">
            <summary>
            Specifies a custom namespace prefix to use for the DirectMethods.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.RemoveViewState">
            <summary>
            Remove ViewState data from page's rendering.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.RethrowAjaxExceptions">
            <summary>
            Rethrow ajax exceptions from catch sections. Default is 'False'. Can be set within Session[\"Ext.Net.RethrowAjaxExceptions\"], Application[\"Ext.Net.RethrowAjaxExceptions\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ShowWarningOnAjaxFailure">
            <summary>
            Show warning dialog on ajax event failureDefault is 'True'. Can be set within Session[\"Ext.Net.ShowWarningOnAjaxFailure\"], Application[\"Ext.Net.ShowWarningOnAjaxFailure\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ManageEventsViewState">
            <summary>
            If true then load/save event's viewstate. Can be set within Session[\"Ext.Net.ManageEventsViewState\"], Application[\"Ext.Net.ManageEventsViewState\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.DebugConsole">
            <summary>
            Gets or Sets the current debug module. Can be set at Page level in ResourceManager, Session[\"Ext.Net.Debug\"], Application[\"Ext.Net.Debug\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.LazyMode">
            <summary>
            Gets or Sets the LazyMode. Can be set at Page level in ResourceManager, Session[\"Ext.Net.LazyMode\"], Application[\"Ext.Net.LazyMode\"] and web.config.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptBeforeClientInitBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptClientSpecialInitBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptClientInitBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptAfterClientInitBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptOnReadyBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptOnWindowResizeBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ScriptOnTextResizeBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ClientScriptBlockBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ClientScriptIncludeBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ClientStyleBlockBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.ClientStyleIncludeBag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManager.SupportedCultures">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.JFunction.ToScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.JFunction.Fn">
            <summary>
            The raw JavaScript code to call.
            </summary>
        </member>
        <member name="P:Ext.Net.JFunction.Handler">
            <summary>
            The JavaScript logic within the function(){} signature.
            </summary>
        </member>
        <member name="P:Ext.Net.JFunction.Args">
            <summary>
            Custom arguments passed to event handler if Handler property is set.
            </summary>
        </member>
        <member name="P:Ext.Net.JFunction.FormatHandler">
            <summary>
            If FormatHander=true, then the Handler property will be passed through the string.Format() Method and argument placeholders/tokens with be replaced with the argument index value.
            </summary>
        </member>
        <member name="P:Ext.Net.JFunction.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.DirectEventHandlerJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DirectEventHandlerJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ext.Net.DirectEventHandlerJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.DirectEventHandlerJsonConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Ext.Net.GroupingView">
            <summary>
            Adds the ability for single level grouping to the grid.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.CollapseAllGroups">
            <summary>
            Collapses all grouped rows.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.ExpandAllGroups">
            <summary>
            Expands all grouped rows.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.ToggleAllGroups(System.Boolean)">
            <summary>
            Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.
            </summary>
            <param name="expanded">sets the expanded state of all groups to the value passed</param>
        </member>
        <member name="M:Ext.Net.GroupingView.ToggleAllGroups">
            <summary>
            Toggles all groups
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.ToggleGroup(System.String,System.Boolean)">
            <summary>
            Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.
            </summary>
            <param name="groupId">The groupId assigned to the group</param>
            <param name="expanded">sets the expanded state of all groups to the value passed</param>
        </member>
        <member name="M:Ext.Net.GroupingView.ToggleGroup(System.String)">
            <summary>
            Toggles the specified group
            </summary>
            <param name="groupId">The groupId assigned to the group</param>
        </member>
        <member name="P:Ext.Net.GroupingView.EmptyGroupText">
            <summary>
            The text to display when there is an empty group value.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.EnableGrouping">
            <summary>
            False to disable grouping functionality (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.EnableGroupingMenu">
            <summary>
            True to enable the grouping control in the column menu.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.EnableNoGroups">
            <summary>
            True to allow the user to turn off grouping.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.GroupByText">
            <summary>
            Text displayed in the grid header menu for grouping by a column (defaults to 'Group By This Field').
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.GroupTextTpl">
            <summary>
            The template used to render the group header. See Ext.XTemplate for information on how to format data using a template.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Header">
            <summary>
            The text with which to prefix the group field value in the group header line.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.HideGroupedColumn">
            <summary>
            True to hide the column that is currently grouped.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.IgnoreAdd">
            <summary>
            True to skip refreshing the view when new rows are added (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.ShowGroupName">
            <summary>
            True to display the name for each set of grouped rows (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.ShowGroupsText">
            <summary>
            Text displayed in the grid header for enabling/disabling grouping (defaults to 'Show in Groups').
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.StartCollapsed">
            <summary>
            True to start all groups collapsed.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.EmptyGroupText">
            <summary>
            The text to display when there is an empty group value.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.EnableGrouping">
            <summary>
            False to disable grouping functionality (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.EnableGroupingMenu">
            <summary>
            True to enable the grouping control in the column menu.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.EnableNoGroups">
            <summary>
            True to allow the user to turn off grouping.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.GroupByText">
            <summary>
            Text displayed in the grid header menu for grouping by a column (defaults to 'Group By This Field').
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.GroupTextTpl">
            <summary>
            The template used to render the group header. See Ext.XTemplate for information on how to format data using a template.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.Header">
            <summary>
            The text with which to prefix the group field value in the group header line.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.HideGroupedColumn">
            <summary>
            True to hide the column that is currently grouped.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.IgnoreAdd">
            <summary>
            True to skip refreshing the view when new rows are added (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.ShowGroupName">
            <summary>
            True to display the name for each set of grouped rows (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.ShowGroupsText">
            <summary>
            Text displayed in the grid header for enabling/disabling grouping (defaults to 'Show in Groups').
            </summary>
        </member>
        <member name="P:Ext.Net.GroupingView.Config.StartCollapsed">
            <summary>
            True to start all groups collapsed.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.EmptyGroupText(System.String)">
            <summary>
            The text to display when there is an empty group value.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.EnableGrouping(System.Boolean)">
            <summary>
            False to disable grouping functionality (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.EnableGroupingMenu(System.Boolean)">
            <summary>
            True to enable the grouping control in the column menu.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.EnableNoGroups(System.Boolean)">
            <summary>
            True to allow the user to turn off grouping.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.GroupByText(System.String)">
            <summary>
            Text displayed in the grid header menu for grouping by a column (defaults to 'Group By This Field').
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.GroupTextTpl(System.String)">
            <summary>
            The template used to render the group header. See Ext.XTemplate for information on how to format data using a template.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.Header(System.String)">
            <summary>
            The text with which to prefix the group field value in the group header line.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.HideGroupedColumn(System.Boolean)">
            <summary>
            True to hide the column that is currently grouped.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.IgnoreAdd(System.Boolean)">
            <summary>
            True to skip refreshing the view when new rows are added (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ShowGroupName(System.Boolean)">
            <summary>
            True to display the name for each set of grouped rows (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ShowGroupsText(System.String)">
            <summary>
            Text displayed in the grid header for enabling/disabling grouping (defaults to 'Show in Groups').
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.StartCollapsed(System.Boolean)">
            <summary>
            True to start all groups collapsed.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.CollapseAllGroups">
            <summary>
            Collapses all grouped rows.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ExpandAllGroups">
            <summary>
            Expands all grouped rows.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ToggleAllGroups(System.Boolean)">
            <summary>
            Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ToggleAllGroups">
            <summary>
            Toggles all groups
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ToggleGroup(System.String,System.Boolean)">
            <summary>
            Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingView.Builder.ToggleGroup(System.String)">
            <summary>
            Toggles the specified group
            </summary>
        </member>
        <member name="T:Ext.Net.TreeSelectionModelCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TreeSelectionModelCollection.Primary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNode.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.TableLayout">
            <summary>
            This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and rowspan and colspan can be used to create complex layouts within the table.
            </summary>
        </member>
        <member name="P:Ext.Net.TableLayout.Columns">
            <summary>
            The total number of columns to create in the table for this layout. If not specified, all panels added to this layout will be rendered into a single row using a column per panel.
            </summary>
        </member>
        <member name="P:Ext.Net.TableLayout.Cells">
            <summary>
            Cells collection
            </summary>
        </member>
        <member name="P:Ext.Net.TableLayout.Config.Columns">
            <summary>
            The total number of columns to create in the table for this layout. If not specified, all panels added to this layout will be rendered into a single row using a column per panel.
            </summary>
        </member>
        <member name="P:Ext.Net.TableLayout.Config.Cells">
            <summary>
            Cells collection
            </summary>
        </member>
        <member name="M:Ext.Net.TableLayout.Builder.Columns(System.Int32)">
            <summary>
            The total number of columns to create in the table for this layout. If not specified, all panels added to this layout will be rendered into a single row using a column per panel.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarClearStatusConfig.Anim">
            <summary>
            True to clear the status by fading out the status element (defaults to false which clears immediately)
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarClearStatusConfig.UseDefaults">
            <summary>
            True to reset the text and icon using defaultText and defaultIconCls (defaults to false which sets the text to '' and removes any existing icon class).
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerFieldDirectEvents.Spin">
            <summary>
            Fires when the autosize function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed.
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerFieldDirectEvents.SpinUp">
            <summary>
            Fires when the autosize function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed.
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerFieldDirectEvents.SpinDown">
            <summary>
            Fires when the autosize function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed.
            </summary>
        </member>
        <member name="T:Ext.Net.Slider">
            <summary>
            Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking and animation.
            </summary>
        </member>
        <member name="T:Ext.Net.SliderBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.SetValue(System.Int32)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
            <param name="value">The value to set the slider to. (This will be constrained within minValue and maxValue)</param>
        </member>
        <member name="M:Ext.Net.SliderBase.SetValue(System.Int32,System.Int32)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
            <param name="index">Index of the thumb to move</param>
            <param name="value">The value to set the slider to. (This will be constrained within minValue and maxValue)</param>
        </member>
        <member name="M:Ext.Net.SliderBase.SetValue(System.Int32,System.Boolean)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
            <param name="value">The value to set the slider to. (This will be constrained within minValue and maxValue)</param>
            <param name="animate">Turn on or off animation, defaults to true</param>
        </member>
        <member name="M:Ext.Net.SliderBase.SetValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
            <param name="index">Index of the thumb to move</param>
            <param name="value">The value to set the slider to. (This will be constrained within minValue and maxValue)</param>
            <param name="animate">Turn on or off animation, defaults to true</param>
        </member>
        <member name="M:Ext.Net.SliderBase.SyncThumb">
            <summary>
            Synchronizes the thumb position to the proper proportion of the total component width based on the current slider value. This will be called automatically when the Slider is resized by a layout, but if it is rendered auto width, this method can be called from another resize handler to sync the Slider if necessary.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.AddThumb(System.Int32)">
            <summary>
            Creates a new thumb and adds it to the slider
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Value">
            <summary>
            The Number (int) to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Values">
            <summary>
            Thumbs values array
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Animate">
            <summary>
            Turn on or off animation. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.ClickToChange">
            <summary>
            Determines whether or not clicking on the Slider axis will change the slider. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.ConstrainThumbs">
            <summary>
            True to disallow thumbs from overlapping one another. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.DecimalPrecision">
            <summary>
            The number of decimal places to which to round the Slider's value. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Increment">
            <summary>
            How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.KeyIncrement">
            <summary>
            How many units to change the Slider when adjusting with keyboard navigation. Defaults to 1. If the increment config is larger, it will be used instead.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.MaxValue">
            <summary>
            The maximum value for the Slider. Defaults to 100.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.MinValue">
            <summary>
            The minimum value for the Slider. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Vertical">
            <summary>
            Orient the Slider vertically rather than horizontally, defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.TopThumbZIndex">
            <summary>
            The number used to set the z index of the top thumb
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.Value">
            <summary>
            The Number (int) to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.Animate">
            <summary>
            Turn on or off animation. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.ClickToChange">
            <summary>
            Determines whether or not clicking on the Slider axis will change the slider. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.ConstrainThumbs">
            <summary>
            True to disallow thumbs from overlapping one another. Defaults to true
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.DecimalPrecision">
            <summary>
            The number of decimal places to which to round the Slider's value. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.Increment">
            <summary>
            How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.KeyIncrement">
            <summary>
            How many units to change the Slider when adjusting with keyboard navigation. Defaults to 1. If the increment config is larger, it will be used instead.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.MaxValue">
            <summary>
            The maximum value for the Slider. Defaults to 100.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.MinValue">
            <summary>
            The minimum value for the Slider. Defaults to 0.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.Vertical">
            <summary>
            Orient the Slider vertically rather than horizontally, defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderBase.Config.TopThumbZIndex">
            <summary>
            The number used to set the z index of the top thumb
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.Value(System.Int32)">
            <summary>
            The Number (int) to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.Animate(System.Boolean)">
            <summary>
            Turn on or off animation. Defaults to true
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.ClickToChange(System.Boolean)">
            <summary>
            Determines whether or not clicking on the Slider axis will change the slider. Defaults to true
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.ConstrainThumbs(System.Boolean)">
            <summary>
            True to disallow thumbs from overlapping one another. Defaults to true
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.DecimalPrecision(System.Int32)">
            <summary>
            The number of decimal places to which to round the Slider's value. Defaults to 0.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.Increment(System.Int32)">
            <summary>
            How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.KeyIncrement(System.Int32)">
            <summary>
            How many units to change the Slider when adjusting with keyboard navigation. Defaults to 1. If the increment config is larger, it will be used instead.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.MaxValue(System.Int32)">
            <summary>
            The maximum value for the Slider. Defaults to 100.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.MinValue(System.Int32)">
            <summary>
            The minimum value for the Slider. Defaults to 0.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.Vertical(System.Boolean)">
            <summary>
            Orient the Slider vertically rather than horizontally, defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.TopThumbZIndex(System.Int32)">
            <summary>
            The number used to set the z index of the top thumb
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.SetValue(System.Int32)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.SetValue(System.Int32,System.Int32)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.SetValue(System.Int32,System.Boolean)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.SetValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and maxValue.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.SyncThumb">
            <summary>
            Synchronizes the thumb position to the proper proportion of the total component width based on the current slider value. This will be called automatically when the Slider is resized by a layout, but if it is rendered auto width, this method can be called from another resize handler to sync the Slider if necessary.
            </summary>
        </member>
        <member name="M:Ext.Net.SliderBase.Builder`2.AddThumb(System.Int32)">
            <summary>
            Creates a new thumb and adds it to the slider
            </summary>
        </member>
        <member name="P:Ext.Net.Slider.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Slider.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.Slider.ValueChanged">
            <summary>
            Fires when the Value property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.Slider.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Slider.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.SelectedListItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedListItem.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedListItem.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedListItem.Index">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedListItem.Builder.Value(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedListItem.Builder.Index(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedListItem.Config.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedListItem.Config.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.SaveMask">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.LoadMask">
            <summary>
            A simple utility class for generically masking elements while loading data. If the element being masked has an underlying Ext.data.Store, the masking will be automatically synchronized with the store's loading process and the mask element will be cached for reuse. For all other elements, this mask will replace the element's UpdateOptions load indicator and will be destroyed after the initial load.
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.ShowMask">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.Msg">
            <summary>
            The text to display in a centered loading message box (defaults to 'Loading...').
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.MsgCls">
            <summary>
            The CSS class to apply to the loading message element (defaults to 'x-mask-loading').
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.RemoveMask">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.LoadMask.Builder.ShowMask(System.Boolean)">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.LoadMask.Builder.Msg(System.String)">
            <summary>
            The text to display in a centered loading message box (defaults to 'Loading...').
            </summary>
        </member>
        <member name="M:Ext.Net.LoadMask.Builder.MsgCls(System.String)">
            <summary>
            The CSS class to apply to the loading message element (defaults to 'x-mask-loading').
            </summary>
        </member>
        <member name="M:Ext.Net.LoadMask.Builder.RemoveMask(System.Boolean)">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.Config.ShowMask">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.Config.Msg">
            <summary>
            The text to display in a centered loading message box (defaults to 'Loading...').
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.Config.MsgCls">
            <summary>
            The CSS class to apply to the loading message element (defaults to 'x-mask-loading').
            </summary>
        </member>
        <member name="P:Ext.Net.LoadMask.Config.RemoveMask">
            <summary>
            True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.SaveMask.Msg">
            <summary>
            The text to display in a centered saving message box (defaults to 'Saving...').
            </summary>
        </member>
        <member name="P:Ext.Net.SaveMask.Config.Msg">
            <summary>
            The text to display in a centered saving message box (defaults to 'Saving...').
            </summary>
        </member>
        <member name="M:Ext.Net.SaveMask.Builder.Msg(System.String)">
            <summary>
            The text to display in a centered saving message box (defaults to 'Saving...').
            </summary>
        </member>
        <member name="T:Ext.Net.PropertyGrid">
            <summary>
            A specialized grid implementation intended to mimic the traditional property grid as typically seen in development IDEs. Each row in the grid represents a property of some object, and the data is stored as a set of name/value pairs
            </summary>
        </member>
        <member name="M:Ext.Net.PropertyGrid.SetSource(Ext.Net.PropertyGridParameterCollection)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Ext.Net.PropertyGrid.AddProperty(Ext.Net.PropertyGridParameter)" -->
        <member name="M:Ext.Net.PropertyGrid.UpdateProperty(System.String,System.Object)">
            <summary>
            Updates the property.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="value">New value of the property</param>
        </member>
        <member name="M:Ext.Net.PropertyGrid.RemoveProperty(System.String)">
            <summary>
            Removes a property from the grid.
            </summary>
            <param name="propertyName">The name of the property to remove</param>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Source">
            <summary>
            A data object to use as the data source of the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Editable">
            <summary>
            If false then all cells will be read only
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Ext.Net.PropertyGrid.DataChanged">
            <summary>
            Fires when the the PropertyGrid has changed records
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.PropertyGrid.Builder.Editable(System.Boolean)">
            <summary>
            If false then all cells will be read only
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Config.Source">
            <summary>
            A data object to use as the data source of the grid.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Config.Editable">
            <summary>
            If false then all cells will be read only
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGrid.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbarDirectEvents.Change">
            <summary>
            Fires after page changing
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbarDirectEvents.BeforeChange">
            <summary>
            Fires before page changing
            </summary>
        </member>
        <member name="T:Ext.Net.Menu">
            <summary>
            A menu object. This is the container to which you add all other menu items. Menu can also serve as a base class when you want a specialized menu based off of another component.
            </summary>
        </member>
        <member name="P:Ext.Net.Menu.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Menu.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Menu.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Menu.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.BeforeRefresh">
            <summary>
            Internal UI Event. Fired before the view is refreshed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.BeforeRowRemoved">
            <summary>
            Internal UI Event. Fired before a row is removed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.BeforeRowsInserted">
            <summary>
            Internal UI Event. Fired before rows are inserted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.Refresh">
            <summary>
            Internal UI Event. Fired after the GridView's body has been refreshed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.RowRemoved">
            <summary>
            Internal UI Event. Fired after a row is removed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.RowsInserted">
            <summary>
            Internal UI Event. Fired after rows are inserted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewListeners.RowUpdated">
            <summary>
            Internal UI Event. Fired after a row has been updated.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelListeners.ClientValidation">
            <summary>
            If the monitorValid config option is true, this event fires repetitively to notify of valid state
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelListeners.ActionComplete">
            <summary>
            Fires when an action is completed.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelListeners.ActionFailed">
            <summary>
            Fires when an action fails.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelListeners.BeforeAction">
            <summary>
            Fires before any action is performed. Return false to cancel the action.
            </summary>
        </member>
        <member name="P:Ext.Net.DomObject.Tag">
            <summary>
            The tag name of the element
            </summary>
        </member>
        <member name="P:Ext.Net.DomObject.ID">
            <summary>
            The id of the element
            </summary>
        </member>
        <member name="P:Ext.Net.DomObject.Cls">
            <summary>
            The class attribute of the element. This will end up being either the "class" attribute on a HTML fragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.
            </summary>
        </member>
        <member name="P:Ext.Net.DomObject.Html">
            <summary>
            The innerHTML for the element
            </summary>
        </member>
        <member name="P:Ext.Net.DomObject.Children">
            <summary>
            An array of the same kind of element definition objects to be created and appended. These can be nested as deep as you want.
            </summary>
        </member>
        <member name="T:Ext.Net.DatePicker">
            <summary>
            Simple DatePicker class.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Clear">
            <summary>
            Clear the value of this field.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.SetMinDate(System.DateTime)">
            <summary>
            Replaces any existing minDate with the new value and refreshes the DatePicker.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.SetMaxDate(System.DateTime)">
            <summary>
            Replaces any existing maxDate with the new value and refreshes the DatePicker.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.UpdateDisabledDates">
            <summary>
            Replaces any existing disabled dates with new values and refreshes the DatePicker.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.UpdateDisabledDays">
            <summary>
            Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.HideWithLabel">
            <summary>
            True to hide the label when the field hide
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.ReadOnly">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Note">
            <summary>
            The note.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.NoteCls">
            <summary>
            The note css class.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.NoteAlign">
            <summary>
            Note align
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.IsNull">
            <summary>
            Gets a value indicating whether the Value is equal to NullValue.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.AutoPostBack">
            <summary>
            AutoPostBack
            </summary>
            <value><c>true</c> if [auto post back]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ext.Net.DatePicker.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.SelectedDate">
            <summary>
            Gets or sets the current selected date of the DatePicker. Accepts and returns a DateTime object.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.CancelText">
            <summary>
            The text to display on the cancel button.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DisabledDates">
            <summary>
            An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular expression so they are very powerful.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DayNames">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DisabledDatesRE">
            <summary>
            JavaScript regular expression used to disable a pattern of dates (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DisabledDays">
            <summary>
            An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DisabledDaysText">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Format">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.MaxDate">
            <summary>
            The maximum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.MaxText">
            <summary>
            The error text to display when the date in the cell is after MaxValue (defaults to 'The date in this field must be before {MaxValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.MinDate">
            <summary>
            The minimum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.MinText">
            <summary>
            The error text to display when the date in the cell is before MinValue (defaults to 'The date in this field must be after {MinValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.MonthNames">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.MonthYearText">
            <summary>
            The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.NextText">
            <summary>
            The next month navigation button tooltip (defaults to 'Next Month (Control+Right)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.OkText">
            <summary>
            The text to display on the ok button.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.PrevText">
            <summary>
            The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.ShowToday">
            <summary>
            False to hide the footer area containing the Today button and disable the keyboard handler for spacebar that selects the current date (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.StartDay">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.TodayText">
            <summary>
            The text to display on the button that selects the current date (defaults to 'Today').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.TodayTip">
            <summary>
            The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.DatePicker.SelectionChanged">
            <summary>
            Fires when the Item property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DataIndex">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.HideWithLabel">
            <summary>
            True to hide the label when the field hide
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.ReadOnly">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.Note">
            <summary>
            The note.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.NoteCls">
            <summary>
            The note css class.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.NoteAlign">
            <summary>
            Note align
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.AutoPostBack">
            <summary>
            AutoPostBack
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.SelectedDate">
            <summary>
            Gets or sets the current selected date of the DatePicker. Accepts and returns a DateTime object.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.SelectedValue">
            <summary>
            Gets or sets the current selected date of the DatePicker.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.CancelText">
            <summary>
            The text to display on the cancel button.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DisabledDates">
            <summary>
            An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular expression so they are very powerful.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DayNames">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DisabledDatesRE">
            <summary>
            JavaScript regular expression used to disable a pattern of dates (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DisabledDays">
            <summary>
            An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DisabledDaysText">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.Format">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.MaxDate">
            <summary>
            The maximum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.MaxText">
            <summary>
            The error text to display when the date in the cell is after MaxValue (defaults to 'The date in this field must be before {MaxValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.MinDate">
            <summary>
            The minimum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.MinText">
            <summary>
            The error text to display when the date in the cell is before MinValue (defaults to 'The date in this field must be after {MinValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.MonthNames">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.MonthYearText">
            <summary>
            The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.NextText">
            <summary>
            The next month navigation button tooltip (defaults to 'Next Month (Control+Right)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.OkText">
            <summary>
            The text to display on the ok button.
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.PrevText">
            <summary>
            The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.ShowToday">
            <summary>
            False to hide the footer area containing the Today button and disable the keyboard handler for spacebar that selects the current date (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.StartDay">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday).
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.TodayText">
            <summary>
            The text to display on the button that selects the current date (defaults to 'Today').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.TodayTip">
            <summary>
            The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)').
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DatePicker.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.DataIndex(System.String)">
            <summary>
            (optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.HideWithLabel(System.Boolean)">
            <summary>
            True to hide the label when the field hide
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.ReadOnly(System.Boolean)">
            <summary>
            True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.Note(System.String)">
            <summary>
            The note.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.NoteCls(System.String)">
            <summary>
            The note css class.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.NoteAlign(Ext.Net.NoteAlign)">
            <summary>
            Note align
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.Value(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.AutoPostBack(System.Boolean)">
            <summary>
            AutoPostBack
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.SelectedDate(System.DateTime)">
            <summary>
            Gets or sets the current selected date of the DatePicker. Accepts and returns a DateTime object.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.CancelText(System.String)">
            <summary>
            The text to display on the cancel button.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.DayNames(System.String[])">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames).
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.DisabledDatesRE(System.String)">
            <summary>
            JavaScript regular expression used to disable a pattern of dates (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.DisabledDays(System.Int32[])">
            <summary>
            An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.DisabledDaysText(System.String)">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.Format(System.String)">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.MaxDate(System.DateTime)">
            <summary>
            The maximum allowed date.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.MaxText(System.String)">
            <summary>
            The error text to display when the date in the cell is after MaxValue (defaults to 'The date in this field must be before {MaxValue}').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.MinDate(System.DateTime)">
            <summary>
            The minimum allowed date.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.MinText(System.String)">
            <summary>
            The error text to display when the date in the cell is before MinValue (defaults to 'The date in this field must be after {MinValue}').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.MonthNames(System.String[])">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames).
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.MonthYearText(System.String)">
            <summary>
            The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.NextText(System.String)">
            <summary>
            The next month navigation button tooltip (defaults to 'Next Month (Control+Right)').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.OkText(System.String)">
            <summary>
            The text to display on the ok button.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.PrevText(System.String)">
            <summary>
            The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.ShowToday(System.Boolean)">
            <summary>
            False to hide the footer area containing the Today button and disable the keyboard handler for spacebar that selects the current date (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.StartDay(System.Int32)">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday).
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.TodayText(System.String)">
            <summary>
            The text to display on the button that selects the current date (defaults to 'Today').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.TodayTip(System.String)">
            <summary>
            The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)').
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.Clear">
            <summary>
            Clear the value of this field.
            </summary>
        </member>
        <member name="M:Ext.Net.DatePicker.Builder.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="T:Ext.Net.DateField">
            <summary>
            Provides a date input field with a DatePicker dropdown and automatic date validation.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.SetMinDate(System.DateTime)">
            <summary>
            The minimum allowed date. Can be either a Javascript date object or a string date in a valid format (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.SetMaxDate(System.DateTime)">
            <summary>
            The maximum allowed date. Can be either a Javascript date object or a string date in a valid format (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.SelectedDate">
            <summary>
            Gets or sets the current selected date of the DatePicker. Accepts and returns a DateTime object.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.SelectedValue">
            <summary>
            Gets or sets the current selected date of the DatePicker.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.DateField.SelectionChanged">
            <summary>
            Fires when the SelectedDate property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.AltFormats">
            <summary>
            Multiple date formats separated by \" | \" to try when parsing a user input value and it doesn't match the defined format ('MM/dd/yyyy|MM-dd-yy|MM-dd-yyyy|MM/dd|MM-dd|dd').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.DisabledDates">
            <summary>
            An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular expression so they are very powerful.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.DisabledDatesText">
            <summary>
            The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled').")]
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.DisabledDays">
            <summary>
            An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.DisabledDaysText">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to 'Disabled').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Format">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'd').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.MaxText">
            <summary>
            The error text to display when the date in the cell is after MaxValue (defaults to 'The date in this field must be before {MaxValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.MaxDate">
            <summary>
            The maximum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.MinText">
            <summary>
            The error text to display when the date in the cell is before MinValue (defaults to 'The date in this field must be after {MinValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.MinDate">
            <summary>
            The minimum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.ShowToday">
            <summary>
            False to hide the footer area of the DatePicker containing the Today button and disable the keyboard handler for spacebar that selects the current date (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.CancelText">
            <summary>
            The text to display on the cancel button.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.DayNames">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.MonthNames">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.MonthYearText">
            <summary>
            The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.NextText">
            <summary>
            The next month navigation button tooltip (defaults to 'Next Month (Control+Right)').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.OkText">
            <summary>
            The text to display on the ok button.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.PrevText">
            <summary>
            The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.StartDay">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.TodayText">
            <summary>
            The text to display on the button that selects the current date (defaults to 'Today').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.TodayTip">
            <summary>
            The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)').
            </summary>
        </member>
        <member name="E:Ext.Net.DateField.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.SelectedDate">
            <summary>
            Gets or sets the current selected date of the DatePicker. Accepts and returns a DateTime object.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.SelectedValue">
            <summary>
            Gets or sets the current selected date of the DatePicker.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.NullValue">
            <summary>
            The fields null value.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.AltFormats">
            <summary>
            Multiple date formats separated by \" | \" to try when parsing a user input value and it doesn't match the defined format ('MM/dd/yyyy|MM-dd-yy|MM-dd-yyyy|MM/dd|MM-dd|dd').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.DisabledDates">
            <summary>
            An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular expression so they are very powerful.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.DisabledDatesText">
            <summary>
            The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.DisabledDays">
            <summary>
            An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.DisabledDaysText">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to 'Disabled').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.Format">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'd').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.MaxText">
            <summary>
            The error text to display when the date in the cell is after MaxValue (defaults to 'The date in this field must be before {MaxValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.MaxDate">
            <summary>
            The maximum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.MinText">
            <summary>
            The error text to display when the date in the cell is before MinValue (defaults to 'The date in this field must be after {MinValue}').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.MinDate">
            <summary>
            The minimum allowed date.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.ShowToday">
            <summary>
            False to hide the footer area of the DatePicker containing the Today button and disable the keyboard handler for spacebar that selects the current date (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.CancelText">
            <summary>
            The text to display on the cancel button.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.DayNames">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.MonthNames">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.MonthYearText">
            <summary>
            The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.NextText">
            <summary>
            The next month navigation button tooltip (defaults to 'Next Month (Control+Right)').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.OkText">
            <summary>
            The text to display on the ok button.
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.PrevText">
            <summary>
            The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.StartDay">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday).
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.TodayText">
            <summary>
            The text to display on the button that selects the current date (defaults to 'Today').
            </summary>
        </member>
        <member name="P:Ext.Net.DateField.Config.TodayTip">
            <summary>
            The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.SelectedDate(System.DateTime)">
            <summary>
            Gets or sets the current selected date of the DatePicker. Accepts and returns a DateTime object.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.SelectedValue(System.Object)">
            <summary>
            Gets or sets the current selected date of the DatePicker.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.AltFormats(System.String)">
            <summary>
            Multiple date formats separated by \" | \" to try when parsing a user input value and it doesn't match the defined format ('MM/dd/yyyy|MM-dd-yy|MM-dd-yyyy|MM/dd|MM-dd|dd').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.DisabledDatesText(System.String)">
            <summary>
            The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.DisabledDays(System.Int32[])">
            <summary>
            An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.DisabledDaysText(System.String)">
            <summary>
            The tooltip to display when the date falls on a disabled day (defaults to 'Disabled').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.Format(System.String)">
            <summary>
            The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'd').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.MaxText(System.String)">
            <summary>
            The error text to display when the date in the cell is after MaxValue (defaults to 'The date in this field must be before {MaxValue}').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.MaxDate(System.DateTime)">
            <summary>
            The maximum allowed date.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.MinText(System.String)">
            <summary>
            The error text to display when the date in the cell is before MinValue (defaults to 'The date in this field must be after {MinValue}').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.MinDate(System.DateTime)">
            <summary>
            The minimum allowed date.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.ShowToday(System.Boolean)">
            <summary>
            False to hide the footer area of the DatePicker containing the Today button and disable the keyboard handler for spacebar that selects the current date (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.CancelText(System.String)">
            <summary>
            The text to display on the cancel button.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.DayNames(System.String[])">
            <summary>
            An array of textual day names which can be overriden for localization support (defaults to Date.dayNames).
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.MonthNames(System.String[])">
            <summary>
            An array of textual month names which can be overriden for localization support (defaults to Date.monthNames).
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.MonthYearText(System.String)">
            <summary>
            The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.NextText(System.String)">
            <summary>
            The next month navigation button tooltip (defaults to 'Next Month (Control+Right)').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.OkText(System.String)">
            <summary>
            The text to display on the ok button.
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.PrevText(System.String)">
            <summary>
            The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.StartDay(System.Int32)">
            <summary>
            Day index at which the week should begin, 0-based (defaults to 0, which is Sunday).
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.TodayText(System.String)">
            <summary>
            The text to display on the button that selects the current date (defaults to 'Today').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.TodayTip(System.String)">
            <summary>
            The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)').
            </summary>
        </member>
        <member name="M:Ext.Net.DateField.Builder.SetValue(System.Object)">
            <summary>
            Sets a data value into the field and validates it. To set the value directly without validation see setRawValue.
            </summary>
        </member>
        <member name="M:Ext.Net.Mask.Hide">
            <summary>
            Hides the message box if it is displayed
            </summary>
        </member>
        <member name="P:Ext.Net.MaskConfig.Msg">
            <summary>
            The title text
            </summary>
        </member>
        <member name="P:Ext.Net.MaskConfig.MsgCls">
            <summary>
            An id or Element from which the message box should animate as it opens and closes (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.Net.MaskConfig.El">
            <summary>
            An id or Element from which the message box should animate as it opens and closes (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.Net.MaskConfig.Control">
            <summary>
            A Control to mask
            </summary>
        </member>
        <member name="T:Ext.Net.TreeEditor">
            <summary>
            Provides editor functionality for inline tree node editing. Any valid Ext.form.Field subclass can be used as the editor field.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.EditDelay">
            <summary>
            The number of milliseconds between clicks to register a double-click that will trigger editing on the current node (defaults to 350). If two clicks occur on the same node within this time span, the editor for the node will display, otherwise it will be processed as a regular click.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.HideEl">
            <summary>
            False to keep the bound element visible while the editor is displayed (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.MaxWidth">
            <summary>
            The maximum width in pixels of the editor field (defaults to 250). Note that if the maxWidth would exceed the containing tree element's size, it will be automatically limited for you to the container width, taking scroll and client offsets into account prior to each edit.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.Shim">
            <summary>
            True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.TreePanelID">
            <summary>
            The tree panel to use.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.Filter">
            <summary>
            The tree editor filter to edit particular nodes
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditor.UpdateEl">
            <summary>
            Handle the keydown/keypress events so they don't propagate (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeDropZone.DragOverData">
            <summary>
            Arbitrary data that can be associated with this tree and will be included in the event object that gets passed to any nodedragover event handler (defaults to {})
            </summary>
        </member>
        <member name="P:Ext.Net.TreeDropZone.AllowContainerDrop">
            <summary>
            True if drops on the tree container (outside of a specific tree node) are allowed (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeDropZone.AllowParentInsert">
            <summary>
            Allow inserting a dragged node between an expanded parent node and its first child that will become a sibling of the parent when dropped (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeDropZone.AppendOnly">
            <summary>
            True if the tree should only allow append drops (use for trees which are sorted, defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.TreeDropZone.ExpandDelay">
            <summary>
            The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node over the target (defaults to 1000)
            </summary>
        </member>
        <member name="T:Ext.Net.AbstractTreeSelectionModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbarListeners.Change">
            <summary>
            Fires after page changing
            </summary>
        </member>
        <member name="P:Ext.Net.PagingToolbarListeners.BeforeChange">
            <summary>
            Fires before page changing
            </summary>
        </member>
        <member name="P:Ext.Net.MenuListeners.Click">
            <summary>
            Fires when this menu is clicked (or when the enter key is pressed while it is active)
            </summary>
        </member>
        <member name="P:Ext.Net.MenuListeners.ItemClick">
            <summary>
            Fires when a menu item contained in this menu is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.MenuListeners.MouseOut">
            <summary>
            Fires when the mouse exits this menu
            </summary>
        </member>
        <member name="P:Ext.Net.MenuListeners.MouseOver">
            <summary>
            Fires when the mouse is hovering over this menu
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderDirectEvents.BeforeExpand">
            <summary>
            Fires before a row expand
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderDirectEvents.Expand">
            <summary>
            Fires afyter a row expand
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderDirectEvents.BeforeCollapse">
            <summary>
            Fires before a row collapse
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderDirectEvents.Collapse">
            <summary>
            Fires after a row collapse
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBarDirectEvents.Update">
            <summary>
            Fires after each update interval
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.Append">
            <summary>
            Fires when a new child node is appended
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.BeforeAppend">
            <summary>
            Fires before a new child is appended, return false to cancel the append
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.BeforeInsert">
            <summary>
            Fires before a new child is inserted, return false to cancel the insert.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.BeforeMove">
            <summary>
            Fires before this node is moved to a new location in the tree. Return false to cancel the move.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.BeforeRemove">
            <summary>
            Fires before a child is removed, return false to cancel the remove.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.Insert">
            <summary>
            Fires when a new child node is inserted.
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.Move">
            <summary>
            Fires when this node is moved to a new location in the tree
            </summary>
        </member>
        <member name="P:Ext.Net.NodeDirectEvents.Remove">
            <summary>
            Fires when a child node is removed
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponentDirectEvents.Initialize">
            <summary>
            Fires after the component is resized.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxDirectEvents.BeforeQuery">
            <summary>
            Fires before all queries are processed. Return false to cancel the query or set the queryEvent's cancel property to true.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxDirectEvents.BeforeSelect">
            <summary>
            Fires before a list items is selected. Return false to cancel the selection.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxDirectEvents.Collapse">
            <summary>
            Fires when the dropdown list is collapsed.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxDirectEvents.Expand">
            <summary>
            Fires when the dropdown list is expanded.
            </summary>
        </member>
        <member name="P:Ext.Net.ComboBoxDirectEvents.Select">
            <summary>
            Fires when a list items is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.MenuDirectEvents.Click">
            <summary>
            Fires when this menu is clicked (or when the enter key is pressed while it is active)
            </summary>
        </member>
        <member name="P:Ext.Net.MenuDirectEvents.ItemClick">
            <summary>
            Fires when a menu item contained in this menu is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.MenuDirectEvents.MouseOut">
            <summary>
            Fires when the mouse exits this menu
            </summary>
        </member>
        <member name="P:Ext.Net.MenuDirectEvents.MouseOver">
            <summary>
            Fires when the mouse is hovering over this menu
            </summary>
        </member>
        <member name="T:Ext.Net.Checkbox">
            <summary>
            Single checkbox field. Can be used as a direct replacement for traditional Checkbox controls.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.BoxLabel">
            <summary>
            The text that appears beside the checkbox (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Checked">
            <summary>
            True if the the checkbox should render already checked (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.CheckedCls">
            <summary>
            The CSS class to use when the control is checked (defaults to 'x-form-check-checked'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.FocusCls">
            <summary>
            The CSS class to use when the control receives input focus (defaults to 'x-form-check-focus'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.InputValue">
            <summary>
            The value that should go into the generated input element's value attribute (defaults to undefined, with no value attribute)
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.MouseDownCls">
            <summary>
            The CSS class to use when the control is being actively clicked (defaults to 'x-form-check-down'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.OverCls">
            <summary>
            An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element, and removed when the mouse moves out. (defaults to ''). This can be useful for adding customized 'active' or 'hover' styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.BoxLabel">
            <summary>
            The text that appears beside the checkbox (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.Checked">
            <summary>
            True if the the checkbox should render already checked (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.CheckedCls">
            <summary>
            The CSS class to use when the control is checked (defaults to 'x-form-check-checked'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.FocusCls">
            <summary>
            The CSS class to use when the control receives input focus (defaults to 'x-form-check-focus'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.MouseDownCls">
            <summary>
            The CSS class to use when the control is being actively clicked (defaults to 'x-form-check-down'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.OverCls">
            <summary>
            The CSS class to use when the control is hovered over (defaults to 'x-form-check-over'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxBase.Config.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.BoxLabel(System.String)">
            <summary>
            The text that appears beside the checkbox (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.Checked(System.Boolean)">
            <summary>
            True if the the checkbox should render already checked (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.CheckedCls(System.String)">
            <summary>
            The CSS class to use when the control is checked (defaults to 'x-form-check-checked'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.FocusCls(System.String)">
            <summary>
            The CSS class to use when the control receives input focus (defaults to 'x-form-check-focus'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.MouseDownCls(System.String)">
            <summary>
            The CSS class to use when the control is being actively clicked (defaults to 'x-form-check-down'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.OverCls(System.String)">
            <summary>
            The CSS class to use when the control is hovered over (defaults to 'x-form-check-over'). Note that this class applies to both checkboxes and radio buttons and is added to the control's wrapper element.
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxBase.Builder`2.Tag(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Checkbox.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Checkbox.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.Checkbox.CheckedChanged">
            <summary>
            Fires when the Checked property has been changed
            </summary>
        </member>
        <member name="E:Ext.Net.Checkbox.DirectCheck">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.Checkbox.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Checkbox.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxColumn.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxColumn.Config.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxColumn.Builder.Items(System.Action{Ext.Net.CheckboxColumnItemsBuilder{Ext.Net.CheckboxColumn,Ext.Net.CheckboxColumn.Builder}})">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.BooleanColumn.FalseText">
            <summary>
            The string returned by the renderer when the column value is falsey (but not undefined) (defaults to 'false').
            </summary>
        </member>
        <member name="P:Ext.Net.BooleanColumn.TrueText">
            <summary>
            The string returned by the renderer when the column value is not falsey (defaults to 'true').
            </summary>
        </member>
        <member name="P:Ext.Net.BooleanColumn.UndefinedText">
            <summary>
            The string returned by the renderer when the column value is undefined (defaults to ' ').
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayoutConfig.DefaultMargins">
            <summary>
            If the individual contained items do not have a margins property specified, the default margins from this property will be applied to each item.
            The order of the sides associated with each value matches the way CSS processes margin values:
               If there is only one value, it applies to all sides.
               If there are two values, the top and bottom borders are set to the first value and the right and left are set to the second.
               If there are three values, the top is set to the first value, the left and right are set to the second, and the bottom is set to the third.
               If there are four values, they apply to the top, right, bottom, and left, respectively.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayoutConfig.Padding">
            <summary>
            Defaults to '0'. Sets the padding to be applied to all child items managed by this container's layout.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxLayoutConfig.Pack">
            <summary>
            Controls how the child items of the container are packed together.
            </summary>
        </member>
        <member name="T:Ext.Net.RestUrls">
            <summary>
            Specific urls to call on REST action methods "read", "create", "update" and "destroy"
            </summary>
        </member>
        <member name="T:Ext.Net.StartButtonConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartButtonConfig.Icon">
            <summary>
            The icon to use for the start button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.StartButtonConfig.IconCls">
            <summary>
            A css class to be added to the start button icon element for applying css background images
            </summary>
        </member>
        <member name="P:Ext.Net.StartButtonConfig.Text">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.StartButtonConfig.Builder.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use for the start button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.StartButtonConfig.Builder.IconCls(System.String)">
            <summary>
            A css class to be added to the start button icon element for applying css background images
            </summary>
        </member>
        <member name="M:Ext.Net.StartButtonConfig.Builder.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StartButtonConfig.Config.Icon">
            <summary>
            The icon to use for the start button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.StartButtonConfig.Config.IconCls">
            <summary>
            A css class to be added to the start button icon element for applying css background images
            </summary>
        </member>
        <member name="P:Ext.Net.StartButtonConfig.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.KeyBinding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Shift">
            <summary>
            True to handle key only when shift is pressed (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Ctrl">
            <summary>
            True to handle key only when ctrl is pressed (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Alt">
            <summary>
            True to handle key only when alt is pressed (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.StopEvent">
            <summary>
            True to stop the event.
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Scope">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.KeyBinding.Builder.Shift(System.Boolean)">
            <summary>
            True to handle key only when shift is pressed (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.KeyBinding.Builder.Ctrl(System.Boolean)">
            <summary>
            True to handle key only when ctrl is pressed (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.KeyBinding.Builder.Alt(System.Boolean)">
            <summary>
            True to handle key only when alt is pressed (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.KeyBinding.Builder.StopEvent(System.Boolean)">
            <summary>
            True to stop the event.
            </summary>
        </member>
        <member name="M:Ext.Net.KeyBinding.Builder.Scope(System.String)">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Config.Shift">
            <summary>
            True to handle key only when shift is pressed (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Config.Ctrl">
            <summary>
            True to handle key only when ctrl is pressed (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Config.Alt">
            <summary>
            True to handle key only when alt is pressed (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Config.StopEvent">
            <summary>
            True to stop the event.
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Config.Scope">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="P:Ext.Net.KeyBinding.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayoutConfig.FitHeight">
            <summary>
            Fit item's height
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayoutConfig.Split">
            <summary>
            Add splitter to the item
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayoutConfig.Margin">
            <summary>
            Item's margin
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnLayoutConfig.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarDroppable">
            <summary>
            Plugin which allows items to be dropped onto a toolbar and be turned into new Toolbar items. To use the plugin, you just need to provide a createItem implementation that takes the drop data as an argument and returns an object that can be placed onto the toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarDroppable.CreateItem">
            <summary>
            Creates the new toolbar item based on drop data. This method must be implemented by the plugin instance
            Parameters:
                data : Arbitrary data from the drop
            Return:
                An item that can be added to a toolbar
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarDroppable.CanDrop">
            <summary>
            Returns true if the drop is allowed on the drop target. This function can be overridden and defaults to simply return true
            Parameters:
                data : Arbitrary data from the drop
            Return:
                True if the drop is allowed
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarDroppable.CalculateEntryIndex">
            <summary>
            Calculates the location on the toolbar to create the new sorter button based on the XY of the drag event
            Parameters:
                e : The event object
            Return:
                The index at which to insert the new button
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarDroppable.Mode">
            <summary>
            Set to 'remote' if need remote item creation.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarDroppable.BeforeRemoteCreate">
            <summary>
            Calls before remote request
            Parameters:
                e : The event object
                    - data, 
                    - options,
                    - dragSource, 
                    - event
            Return:
                False to cancel request
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarDroppable.AfterRemoteCreate">
            <summary>
            Calls before remote request
            Parameters:
                e : The event object
                   - success
                   - message
                   - response
                   - o
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMActivate">
            <summary>
            Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMAttrModified">
            <summary>
            Where supported. Fires when an attribute has been modified.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMCharacterDataModified">
            <summary>
            Where supported. Fires when the character data has been modified.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMFocusIn">
            <summary>
            Where supported. Similar to HTML focus event, but can be applied to any focusable element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMFocusOut">
            <summary>
            Where supported. Similar to HTML blur event, but can be applied to any focusable element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMNodeInserted">
            <summary>
            Where supported. Fires when a node has been added as a child of another node.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMNodeInsertedIntoDocument">
            <summary>
            Where supported. Fires when a node is being inserted into a document.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMNodeRemoved">
            <summary>
            Where supported. Fires when a descendant node of the element is removed.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMNodeRemovedFromDocument">
            <summary>
            Where supported. Fires when a node is being removed from a document.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DOMSubtreeModified">
            <summary>
            Where supported. Fires when the subtree is modified.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Abort">
            <summary>
            Fires when an object/image is stopped from loading before completely loaded.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Blur">
            <summary>
            Fires when an element loses focus either via the pointing device or by tabbing navigation.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Change">
            <summary>
            Fires when a control loses the input focus and its value has been modified since gaining focus.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Click">
            <summary>
            Fires when a mouse click is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.DblClick">
            <summary>
            Fires when a mouse double click is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Error">
            <summary>
            Fires when an object/image/frame cannot be loaded properly.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Focus">
            <summary>
            Fires when an element receives focus either via the pointing device or by tab navigation.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.KeyDown">
            <summary>
            Fires when a keydown is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.KeyPress">
            <summary>
            Fires when a keypress is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.KeyUp">
            <summary>
            Fires when a keyup is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Load">
            <summary>
            Fires when the user agent finishes loading all content within the element. Only supported by window, frames, objects and images.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseDown">
            <summary>
            Fires when a mousedown is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseEnter">
            <summary>
            Fires when the mouse enters the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseLeave">
            <summary>
            Fires when the mouse leaves the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseMove">
            <summary>
            Fires when a mousemove is detected with the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseOut">
            <summary>
            Fires when a mouseout is detected with the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseOver">
            <summary>
            Fires when a mouseover is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.MouseUp">
            <summary>
            Fires when a mouseup is detected within the element.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Reset">
            <summary>
            Fires when a form is reset.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Resize">
            <summary>
            Fires when a document view is resized.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Scroll">
            <summary>
            Fires when a document view is scrolled.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Select">
            <summary>
            Fires when a user selects some text in a text field, including input and textarea.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Submit">
            <summary>
            Fires when a form is submitted.
            </summary>
        </member>
        <member name="P:Ext.Net.ElementListeners.Unload">
            <summary>
            Fires when the user agent removes all content from a window or frame. For elements, it fires when the target element or any of its content has been removed.
            </summary>
        </member>
        <member name="T:Ext.Net.HttpMethod">
            <summary>
            List of HTTP methods (verbs), RFC 2616
            </summary>
        </member>
        <member name="M:Ext.Net.IScriptBuilder.Compile">
            <summary>
            Returns the JavaScript required to create this IScriptable component. 
            </summary>
            <returns>The JavaScript</returns>
        </member>
        <member name="P:Ext.Net.IScriptBuilder.Component">
            <summary>
            The IScriptable component to compile into JavaScript.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowDirectEvents.Maximize">
            <summary>
            Fires after the window has been maximized.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowDirectEvents.Minimize">
            <summary>
            Fires after the window has been minimized.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowDirectEvents.Restore">
            <summary>
            Fires after the window has been restored to its original size after being maximized.
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarHtmlElement">
            <summary>
            Any standard HTML element.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarHtmlElement.Target">
            <summary>
            The target element which will be placed to toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarHtmlElement.Config.Target">
            <summary>
            The target element which will be placed to toolbar.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarHtmlElement.Builder.Target(System.String)">
            <summary>
            The target element which will be placed to toolbar.
            </summary>
        </member>
        <member name="T:Ext.Net.Tip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.ShowAt(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Shows this tip at the specified XY position.
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.ShowBy(System.String)">
            <summary>
            Experimental. Shows this tip at a position relative to another element using a standard Ext.Element.alignTo anchor position value.
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.ShowBy(System.String,System.String)">
            <summary>
            Experimental. Shows this tip at a position relative to another element using a standard Ext.Element.alignTo anchor position value.
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.Closable">
            <summary>
            True to render a close tool button into the tooltip header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.DefaultAlign">
            <summary>
            Experimental. The default Ext.Element.alignTo anchor position value for this tip relative to its element of origin (defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.MaxWidth">
            <summary>
            The maximum width of the tip in pixels (defaults to 300). The maximum supported value is 500.
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.MinWidth">
            <summary>
            The minimum width of the tip in pixels (defaults to 40).
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.Closable(System.Boolean)">
            <summary>
            True to render a close tool button into the tooltip header (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.DefaultAlign(System.String)">
            <summary>
            Experimental. The default Ext.Element.alignTo anchor position value for this tip relative to its element of origin (defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.MaxWidth(System.Int32)">
            <summary>
            The maximum width of the tip in pixels (defaults to 300). The maximum supported value is 500.
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.MinWidth(System.Int32)">
            <summary>
            The minimum width of the tip in pixels (defaults to 40).
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.ShowAt(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Shows this tip at the specified XY position.
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.ShowBy(System.String)">
            <summary>
            Experimental. Shows this tip at a position relative to another element using a standard Ext.Element.alignTo anchor position value.
            </summary>
        </member>
        <member name="M:Ext.Net.Tip.Builder`2.ShowBy(System.String,System.String)">
            <summary>
            Experimental. Shows this tip at a position relative to another element using a standard Ext.Element.alignTo anchor position value.
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.Config.Closable">
            <summary>
            True to render a close tool button into the tooltip header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.Config.DefaultAlign">
            <summary>
            Experimental. The default Ext.Element.alignTo anchor position value for this tip relative to its element of origin (defaults to 'tl-bl?').
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.Config.MaxWidth">
            <summary>
            The maximum width of the tip in pixels (defaults to 300). The maximum supported value is 500.
            </summary>
        </member>
        <member name="P:Ext.Net.Tip.Config.MinWidth">
            <summary>
            The minimum width of the tip in pixels (defaults to 40).
            </summary>
        </member>
        <member name="T:Ext.Net.StatusBar">
            <summary>
            Basic status bar component that can be used as the bottom toolbar of any Ext.Panel.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.ClearStatus">
            <summary>
            Clears the status text and iconCls. Also supports clearing via an optional fade out animation.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.ClearStatus(Ext.Net.StatusBarClearStatusConfig)">
            <summary>
            Clears the status text and iconCls. Also supports clearing via an optional fade out animation.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.SetIcon(Ext.Net.Icon)">
            <summary>
            Convenience method for setting the status icon directly. For more flexible options see setStatus. See Icon or IconCls for complete details about customizing the icon. If empty string any iconCls will be cleared. 
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.SetIconClass(System.String)">
            <summary>
            Convenience method for setting the status icon directly. For more flexible options see setStatus. See Icon or IconCls for complete details about customizing the icon. If empty string any iconCls will be cleared. 
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.SetStatus(System.String)">
            <summary>
            Sets the status text and/or iconCls. Also supports automatically clearing the status that was set after a specified interval.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.SetStatus(Ext.Net.StatusBarStatusConfig)">
            <summary>
            Sets the status text and/or iconCls. Also supports automatically clearing the status that was set after a specified interval.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.SetText(System.String)">
            <summary>
            Convenience method for setting the status text directly. For more flexible options see setStatus.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.ShowBusy(System.String)">
            <summary>
            Convenience method for setting the status text directly. For more flexible options see setStatus.
            </summary>
            <param name="text">A string to use as the status text (in which case all other options for setStatus will be defaulted)</param>
        </member>
        <member name="P:Ext.Net.StatusBar.AutoClear">
            <summary>
            The number of milliseconds to wait after setting the status via setStatus before automatically clearing the status text and icon (defaults to 5000). Note that this only applies when passing the clear argument to setStatus since that is the only way to defer clearing the status. This can be overridden by specifying a different wait value in setStatus. Calls to clearStatus always clear the status bar immediately and ignore this value.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.BusyIcon">
            <summary>
            The default Icon applied when calling showBusy (defaults to 'Icon.None'). It can be overridden at any time by passing the iconCls argument into showBusy. See the Icon or IconCls docs for additional details about customizing the icon.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.BusyIconCls">
            <summary>
            The default iconCls applied when calling showBusy (defaults to 'x-status-busy'). It can be overridden at any time by passing the iconCls argument into showBusy. See the iconCls docs for additional details about customizing the icon.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.BusyText">
            <summary>
            The default text applied when calling showBusy (defaults to 'Loading...'). It can be overridden at any time by passing the text argument into showBusy.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Cls">
            <summary>
            The base class applied to the containing element for this component on render (defaults to 'x-statusbar')
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.DefaultIcon">
            <summary>
            The default Icon (see the Icon or IconCls docs for additional details about customizing the icon). This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to 'Icon.None').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.DefaultIconCls">
            <summary>
            The default iconCls value (see the iconCls docs for additional details about customizing the icon). This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.DefaultText">
            <summary>
            The default text value. This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Icon">
            <summary>
            An Icon that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to 'Icon.None'). The Icons is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.IconCls">
            <summary>
            A CSS class that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to ''). The class is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.StatusAlign">
            <summary>
            The alignment of the status element within the overall StatusBar layout. When the StatusBar is rendered, it creates an internal div containing the status text and icon. Any additional Toolbar items added in the StatusBar's items config, or added via add or any of the supported add* methods, will be rendered, in added order, to the opposite side. The status element is greedy, so it will automatically expand to take up all sapce left over by any other items.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Text">
            <summary>
            A string that will be rendered into the status element as the status message (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.AutoClear(System.Int32)">
            <summary>
            The number of milliseconds to wait after setting the status via setStatus before automatically clearing the status text and icon (defaults to 5000). Note that this only applies when passing the clear argument to setStatus since that is the only way to defer clearing the status. This can be overridden by specifying a different wait value in setStatus. Calls to clearStatus always clear the status bar immediately and ignore this value.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.BusyIcon(Ext.Net.Icon)">
            <summary>
            The default Icon applied when calling showBusy (defaults to 'Icon.None'). It can be overridden at any time by passing the iconCls argument into showBusy. See the Icon or IconCls docs for additional details about customizing the icon.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.BusyIconCls(System.String)">
            <summary>
            The default iconCls applied when calling showBusy (defaults to 'x-status-busy'). It can be overridden at any time by passing the iconCls argument into showBusy. See the iconCls docs for additional details about customizing the icon.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.BusyText(System.String)">
            <summary>
            The default text applied when calling showBusy (defaults to 'Loading...'). It can be overridden at any time by passing the text argument into showBusy.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.Cls(System.String)">
            <summary>
            The base class applied to the containing element for this component on render (defaults to 'x-statusbar')
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.DefaultIcon(Ext.Net.Icon)">
            <summary>
            The default Icon (see the Icon or IconCls docs for additional details about customizing the icon). This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to 'Icon.None').
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.DefaultIconCls(System.String)">
            <summary>
            The default iconCls value (see the iconCls docs for additional details about customizing the icon). This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.DefaultText(System.String)">
            <summary>
            The default text value. This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.Icon(Ext.Net.Icon)">
            <summary>
            An Icon that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to 'Icon.None'). The Icons is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.IconCls(System.String)">
            <summary>
            A CSS class that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to ''). The class is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.StatusAlign(Ext.Net.StatusAlign)">
            <summary>
            The alignment of the status element within the overall StatusBar layout. When the StatusBar is rendered, it creates an internal div containing the status text and icon. Any additional Toolbar items added in the StatusBar's items config, or added via add or any of the supported add* methods, will be rendered, in added order, to the opposite side. The status element is greedy, so it will automatically expand to take up all sapce left over by any other items.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.Text(System.String)">
            <summary>
            A string that will be rendered into the status element as the status message (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.ClearStatus">
            <summary>
            Clears the status text and iconCls. Also supports clearing via an optional fade out animation.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.ClearStatus(Ext.Net.StatusBarClearStatusConfig)">
            <summary>
            Clears the status text and iconCls. Also supports clearing via an optional fade out animation.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.SetStatus(System.String)">
            <summary>
            Sets the status text and/or iconCls. Also supports automatically clearing the status that was set after a specified interval.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.SetStatus(Ext.Net.StatusBarStatusConfig)">
            <summary>
            Sets the status text and/or iconCls. Also supports automatically clearing the status that was set after a specified interval.
            </summary>
        </member>
        <member name="M:Ext.Net.StatusBar.Builder.ShowBusy(System.String)">
            <summary>
            Convenience method for setting the status text and icon to special values that are pre-configured to indicate a 'busy' state, usually for loading or processing activities.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.AutoClear">
            <summary>
            The number of milliseconds to wait after setting the status via setStatus before automatically clearing the status text and icon (defaults to 5000). Note that this only applies when passing the clear argument to setStatus since that is the only way to defer clearing the status. This can be overridden by specifying a different wait value in setStatus. Calls to clearStatus always clear the status bar immediately and ignore this value.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.BusyIcon">
            <summary>
            The default Icon applied when calling showBusy (defaults to 'Icon.None'). It can be overridden at any time by passing the iconCls argument into showBusy. See the Icon or IconCls docs for additional details about customizing the icon.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.BusyIconCls">
            <summary>
            The default iconCls applied when calling showBusy (defaults to 'x-status-busy'). It can be overridden at any time by passing the iconCls argument into showBusy. See the iconCls docs for additional details about customizing the icon.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.BusyText">
            <summary>
            The default text applied when calling showBusy (defaults to 'Loading...'). It can be overridden at any time by passing the text argument into showBusy.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.Cls">
            <summary>
            The base class applied to the containing element for this component on render (defaults to 'x-statusbar')
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.DefaultIcon">
            <summary>
            The default Icon (see the Icon or IconCls docs for additional details about customizing the icon). This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to 'Icon.None').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.DefaultIconCls">
            <summary>
            The default iconCls value (see the iconCls docs for additional details about customizing the icon). This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.DefaultText">
            <summary>
            The default text value. This will be used anytime the status bar is cleared with the useDefaults:true option (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.Icon">
            <summary>
            An Icon that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to 'Icon.None'). The Icons is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.IconCls">
            <summary>
            A CSS class that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to ''). The class is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.StatusAlign">
            <summary>
            The alignment of the status element within the overall StatusBar layout. When the StatusBar is rendered, it creates an internal div containing the status text and icon. Any additional Toolbar items added in the StatusBar's items config, or added via add or any of the supported add* methods, will be rendered, in added order, to the opposite side. The status element is greedy, so it will automatically expand to take up all sapce left over by any other items.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.Text">
            <summary>
            A string that will be rendered into the status element as the status message (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBar.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarClearConfig.Anim">
            <summary>
            False to clear the status immediately once the callback executes (defaults to true which fades the status out).
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarClearConfig.UseDefaults">
            <summary>
            False to completely clear the status text and iconCls (defaults to true which uses defaultText and defaultIconCls).
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarClearConfig.Wait">
            <summary>
            The number of milliseconds to wait before clearing (defaults to autoClear).
            </summary>
        </member>
        <member name="T:Ext.Net.SelectedRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedRow.RecordID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedRow.RowIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedRow.Config.RecordID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedRow.Config.RowIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedRow.Builder.RecordID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedRow.Builder.RowIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Ext.Net.ScriptTagProxy" -->
        <member name="P:Ext.Net.ScriptTagProxy.CallbackParam">
            <summary>
            (Optional) The name of the parameter to pass to the server which tells the server
            the name of the callback function set up by the load call to process the returned
            data object. Defaults to "callback".
            The server-side processing must read this parameter value, and generate javascript
            output which calls this named function passing the data object as its only parameter.
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.NoCache">
            <summary>
            (optional) Defaults to true. Disable caching by adding a unique parameter name to the request.
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.Timeout">
            <summary>
            (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.Url">
            <summary>
            The URL from which to request the data object.
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptTagProxy.Builder.CallbackParam(System.String)">
            <summary>
            The name of the parameter to pass to the server which tells the server the name of the callback function set up by the load call to process the returned data object.
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptTagProxy.Builder.NoCache(System.Boolean)">
            <summary>
            Whether a new request should abort any pending requests. (defaults to false)
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptTagProxy.Builder.Timeout(System.Int32)">
            <summary>
            (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
            </summary>
        </member>
        <member name="M:Ext.Net.ScriptTagProxy.Builder.Url(System.String)">
            <summary>
            The URL from which to request the data object.
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.Config.CallbackParam">
            <summary>
            The name of the parameter to pass to the server which tells the server the name of the callback function set up by the load call to process the returned data object.
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.Config.NoCache">
            <summary>
            Whether a new request should abort any pending requests. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.Config.Timeout">
            <summary>
            (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:Ext.Net.ScriptTagProxy.Config.Url">
            <summary>
            The URL from which to request the data object.
            </summary>
        </member>
        <member name="T:Ext.Net.Panel">
            <summary>
            Panel is a container that has specific functionality and structural components that make it the perfect building block for application-oriented user interfaces.
            </summary>
        </member>
        <member name="M:Ext.Net.Panel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Panel.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Ext.Net.Panel.#ctor(System.String,Ext.Net.Icon)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="icon"></param>
        </member>
        <member name="M:Ext.Net.Panel.OnBeforeClientInit(Ext.Net.Observable)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Ext.Net.Panel.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Panel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Panel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Panel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Panel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.ID">
            <summary>
            ID of instance
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Cls">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.CtCls">
            <summary>
            An optional extra CSS class that will be added to this component's container. This can be useful for adding customized styles to the container or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Title">
            <summary>
            The title text to display in the window header
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Html">
            <summary>
            The title text to display in the window header
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.ContentEl">
            <summary>
            The id of an existing HTML node to use as the panel's body content
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Width">
            <summary>
            The width of this notification in pixels (defaults to 200).
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Height">
            <summary>
            The height of this notification in pixels (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.AutoHide">
            <summary>
            False to stay visible after showing
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.AutoScroll">
            <summary>
            True to show scrolling bar if required
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Closable">
            <summary>
            False to hide the button and disallow closing the window
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Shadow">
            <summary>
            True to show a shadow
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Plain">
            <summary>
            False to add a lighter background color to visually highlight the body element and separate it more distinctly from the surrounding frame
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Resizable">
            <summary>
            True to allow user resizing at each edge and corner of the window, false to disable resizing 
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Draggable">
            <summary>
            True to allow the window to be dragged by the header bar 
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.BodyStyle">
            <summary>
            Custom CSS styles to be applied to the body element  
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.AlignCfg">
            <summary>
            Align config object 
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.ShowMode">
            <summary>
            Determines how the Notification Windows will be shown in relation to each other if more than one rendered to the viewport at a single time. 
            Options include "Grid" which will show each individual separately in a matrix and new Notification Windows will be shown in the best available 
            empty hole within the grid. Best available is considered bottom-right.
            If ShowMode.Stack, the Notification Windows will be stacked on top of each other hiding the Window below.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.CloseVisible">
            <summary>
            True to close all other visible notifications
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Modal">
            <summary>
            True to make the window modal and mask everything behind it when displayed, false to display it without restricting access to other UI elements (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.PinEvent">
            <summary>
            Stop hidding event, 'none' if hidding can not be stoped
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.HideDelay">
            <summary>
            Hide delay in ms
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Icon">
            <summary>
            The icon to use in the header. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon in the header.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.AutoLoad">
            <summary>
            A valid url spec according to the UpdateOptions Ext.UpdateOptions.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render. The URL will become the default URL for this panel's body element, so it may be refreshed at any time.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.NotificationConfig.Tools" -->
        <member name="P:Ext.Net.NotificationConfig.ShowPin">
            <summary>
            True to show pin tool button.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.Pinned">
            <summary>
            True to show pin tool button.
            </summary>
        </member>
        <member name="P:Ext.Net.NotificationConfig.BringToFront">
            <summary>
            True to show pin tool button.
            </summary>
        </member>
        <member name="T:Ext.Net.MultiSelectionModel">
            <summary>
            Multi selection for a TreePanel.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectionModel.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.MultiSelectionModel.Select(System.String)">
            <summary>
            Select a node.
            </summary>
            <param name="nodeId">The node to select</param>
        </member>
        <member name="M:Ext.Net.MultiSelectionModel.Select(System.String,System.Boolean)">
            <summary>
            Select a node.
            </summary>
            <param name="nodeId">The node to select</param>
            <param name="keepExisting">True to retain existing selections</param>
        </member>
        <member name="M:Ext.Net.MultiSelectionModel.Unselect(System.String)">
            <summary>
            Deselect a node.
            </summary>
            <param name="nodeId">The node to unselect</param>
        </member>
        <member name="P:Ext.Net.MultiSelectionModel.KeepSelectionOnClick">
            <summary>
            Selection mode
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectionModel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectionModel.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.JsonReader">
            <summary>
            Data reader class to create an Array of Ext.data.Record objects from a JSON response based on mappings in a provided Ext.data.Record constructor.
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.IDProperty">
            <summary>
            [id] Name of the property within a row object that contains a record identifier value. Defaults to id
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.Root">
            <summary>
            Name of the property which contains the Array of row objects.
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.SuccessProperty">
            <summary>
            Name of the property from which to retrieve the success attribute used by forms.
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.TotalProperty">
            <summary>
            Name of the property from which to retrieve the total number of records in the dataset.
            This is only needed if the whole dataset is not passed in one go, but is being paged
            from the remote server.
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.Config.IDProperty">
            <summary>
            [id] Name of the property within a row object that contains a record identifier value. Defaults to id
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.Config.Root">
            <summary>
            Name of the property which contains the Array of row objects.
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.Config.SuccessProperty">
            <summary>
            Name of the property from which to retrieve the success attribute used by forms.
            </summary>
        </member>
        <member name="P:Ext.Net.JsonReader.Config.TotalProperty">
            <summary>
            The DomQuery path from which to retrieve the total number of records in the dataset. This is only needed if the whole dataset is not passed in one go, but is being paged from the remote server.
            </summary>
        </member>
        <member name="M:Ext.Net.JsonReader.Builder.IDProperty(System.String)">
            <summary>
            [id] Name of the property within a row object that contains a record identifier value. Defaults to id
            </summary>
        </member>
        <member name="M:Ext.Net.JsonReader.Builder.Root(System.String)">
            <summary>
            Name of the property which contains the Array of row objects.
            </summary>
        </member>
        <member name="M:Ext.Net.JsonReader.Builder.SuccessProperty(System.String)">
            <summary>
            Name of the property from which to retrieve the success attribute used by forms.
            </summary>
        </member>
        <member name="M:Ext.Net.JsonReader.Builder.TotalProperty(System.String)">
            <summary>
            The DomQuery path from which to retrieve the total number of records in the dataset. This is only needed if the whole dataset is not passed in one go, but is being paged from the remote server.
            </summary>
        </member>
        <member name="T:Ext.Net.Frame">
            <summary>
            Shows a ripple of exploding, attenuating borders to draw attention to an Element
            </summary>
        </member>
        <member name="P:Ext.Net.Frame.Color">
            <summary>
            The color of the border. Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').
            </summary>
        </member>
        <member name="P:Ext.Net.Frame.Count">
            <summary>
            The number of ripples to display (defaults to 1)
            </summary>
        </member>
        <member name="T:Ext.Net.FieldSet">
            <summary>
            Standard content Container used for grouping form fields.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.AutoHeight">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.CheckboxName">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.CheckboxToggle">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.ItemCls">
            <summary>
            A css class to apply to the x-form-items of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.LabelWidth">
            <summary>
            The width of labels. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.Config.AutoHeight">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.Config.CheckboxName">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.Config.CheckboxToggle">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.Config.ItemCls">
            <summary>
            A css class to apply to the x-form-items of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.Net.FieldSet.Config.LabelWidth">
            <summary>
            The width of labels. This property cascades to child containers.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldSet.Builder.AutoHeight(System.Boolean)">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldSet.Builder.CheckboxName(System.String)">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldSet.Builder.CheckboxToggle(System.Boolean)">
            <summary>
            True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldSet.Builder.ItemCls(System.String)">
            <summary>
            A css class to apply to the x-form-items of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="M:Ext.Net.FieldSet.Builder.LabelWidth(System.Int32)">
            <summary>
            The width of labels. This property cascades to child containers.
            </summary>
        </member>
        <member name="T:Ext.Net.FadeOut">
            <summary>
            Fade an element out (from opaque to transparent). The ending opacity can be specified using the "endOpacity" config option. Note that IE may require useDisplay:true in order to redisplay correctly. 
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnDirectEvents.ColumnMoved">
            <summary>
            Fires when a column is moved.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnDirectEvents.ConfigChanged">
            <summary>
            Fires when the configuration is changed
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnDirectEvents.HeaderChange">
            <summary>
            Fires when the text of a header changes.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnDirectEvents.HiddenChange">
            <summary>
            Fires when a column is hidden or "unhidden".
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnDirectEvents.WidthChange">
            <summary>
            Fires when the width of a column is programmaticially changed using setColumnWidth. Note internal resizing suppresses the event from firing. 
            </summary>
        </member>
        <member name="T:Ext.Net.Desktop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Desktop.CallDesktop(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="P:Ext.Net.Desktop.Modules">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Shortcuts">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.ShortcutTextColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Wallpaper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.Desktop.Builder.BackgroundColor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Desktop.Builder.ShortcutTextColor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Desktop.Builder.Wallpaper(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.Modules">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.Shortcuts">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.ShortcutTextColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.Wallpaper">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Desktop.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="T:Ext.Net.CSS">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CSS.ToScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.CSS.CallCSS(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.CSS.CreateStyleSheet(System.String,System.String)">
            <summary>
            Creates a stylesheet from a text blob of rules. These rules will be wrapped in a STYLE tag and appended to the HEAD of the document.
            </summary>
            <param name="cssText">The text containing the css rules</param>
            <param name="id">An id to add to the stylesheet for later removal</param>
        </member>
        <member name="M:Ext.Net.CSS.RefreshCache">
            <summary>
            Refresh the rule cache if you have dynamically added stylesheets
            </summary>
        </member>
        <member name="M:Ext.Net.CSS.RemoveStyleSheet(System.String)">
            <summary>
            Removes a style or link tag by id
            </summary>
            <param name="id">The id of the tag</param>
        </member>
        <member name="M:Ext.Net.CSS.SwapStyleSheet(System.String,System.String)">
            <summary>
            Dynamically swaps an existing stylesheet reference for a new one
            </summary>
            <param name="id">The id of an existing link tag to remove</param>
            <param name="url">The href of the new stylesheet to include</param>
        </member>
        <member name="M:Ext.Net.CSS.UpdateRule(System.String,System.String,System.String)">
            <summary>
            Updates a rule property
            </summary>
            <param name="selector">Selector to update</param>
            <param name="property">The css property</param>
            <param name="value">The new value for the property</param>
        </member>
        <member name="M:Ext.Net.CSS.UpdateRule(System.String[],System.String,System.String)">
            <summary>
            Updates a rule property
            </summary>
            <param name="selectors">Array of selectors - it tries each selector until it finds one. Stops immediately once one is found.</param>
            <param name="property">The css property</param>
            <param name="value">The new value for the property</param>
        </member>
        <member name="P:Ext.Net.CSS.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.DD">
            <summary>
            A DragDrop implementation where the linked element follows the mouse cursor during a drag.
            </summary>
        </member>
        <member name="M:Ext.Net.DD.AlignElWithMouse(System.String,System.Int32,System.Int32)">
            <summary>
            Sets the element to the location of the mousedown or click event, maintaining the cursor location relative to the location on the element that was clicked. Override this if you want to place the element in a location other than where the cursor is.
            </summary>
            <param name="el">the element to move</param>
            <param name="iPageX">the X coordinate of the mousedown or drag event</param>
            <param name="iPageY">the Y coordinate of the mousedown or drag event</param>
        </member>
        <member name="M:Ext.Net.DD.AutoOffset(System.Int32,System.Int32)">
            <summary>
            Sets the pointer offset to the distance between the linked element's top left corner and the location the element was clicked
            </summary>
            <param name="iPageX">the X coordinate of the click</param>
            <param name="iPageY">the Y coordinate of the click</param>
        </member>
        <member name="M:Ext.Net.DD.CachePosition(System.Int32,System.Int32)">
            <summary>
            Saves the most recent position so that we can reset the constraints and tick marks on-demand. We need to know this so that we can calculate the number of pixels the element is offset from its original position.
            </summary>
            <param name="iPageX">current x position (optional, this just makes it so we don't have to look it up again)</param>
            <param name="iPageY">current y position (optional, this just makes it so we don't have to look it up again)</param>
        </member>
        <member name="M:Ext.Net.DD.CachePosition">
            <summary>
            Saves the most recent position so that we can reset the constraints and tick marks on-demand. We need to know this so that we can calculate the number of pixels the element is offset from its original position.
            </summary>
        </member>
        <member name="M:Ext.Net.DD.SetDelta(System.Int32,System.Int32)">
            <summary>
            Sets the pointer offset. You can call this directly to force the offset to be in a particular location (e.g., pass in 0,0 to set it to the center of the object)
            </summary>
            <param name="iDeltaX">the distance from the left</param>
            <param name="iDeltaY">the distance from the top</param>
        </member>
        <member name="M:Ext.Net.DD.SetDragElPos(System.Int32,System.Int32)">
            <summary>
            Sets the drag element to the location of the mousedown or click event, maintaining the cursor location relative to the location on the element that was clicked. Override this if you want to place the element in a location other than where the cursor is.
            </summary>
            <param name="iPageX">the X coordinate of the mousedown or drag event</param>
            <param name="iPageY">the Y coordinate of the mousedown or drag event</param>
        </member>
        <member name="P:Ext.Net.DD.Scroll">
            <summary>
            When set to true, the utility automatically tries to scroll the browser window when a drag and drop element is dragged near the viewport boundary. Defaults to true.
            </summary>
        </member>
        <member name="T:Ext.Net.DefaultSelectionModel">
            <summary>
            The default single selection for a TreePanel.
            </summary>
        </member>
        <member name="M:Ext.Net.DefaultSelectionModel.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.DefaultSelectionModel.Select(System.String)">
            <summary>
            Select a node.
            </summary>
            <param name="nodeId">The node to select</param>
        </member>
        <member name="M:Ext.Net.DefaultSelectionModel.SelectNext">
            <summary>
            Selects the node above the selected node in the tree, intelligently walking the nodes
            </summary>
        </member>
        <member name="M:Ext.Net.DefaultSelectionModel.SelectPrevious">
            <summary>
            Selects the node above the selected node in the tree, intelligently walking the nodes
            </summary>
        </member>
        <member name="M:Ext.Net.DefaultSelectionModel.Unselect">
            <summary>
            Deselect a node.
            </summary>
        </member>
        <member name="P:Ext.Net.DefaultSelectionModel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DefaultSelectionModel.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.SplitCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.GridCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.ToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.StandOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.CtCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.DisabledClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Hidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.OverCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Menu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.HideMode">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'.
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.MinWidth">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.ToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.StandOut">
            <summary>
            True to enable stand out by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.CtCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.DisabledClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.Hidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.OverCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.Menu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.HideMode">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'.
            </summary>
        </member>
        <member name="P:Ext.Net.GridCommand.Config.MinWidth">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.CommandName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.Icon(Ext.Net.Icon)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.IconCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.StandOut(System.Boolean)">
            <summary>
            True to enable stand out by default (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.Cls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.CtCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.Disabled(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.DisabledClass(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.Hidden(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.OverCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.HideMode(Ext.Net.HideMode)">
            <summary>
            How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'.
            </summary>
        </member>
        <member name="M:Ext.Net.GridCommand.Builder.MinWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width for this button (used to give a set of buttons a common width).
            </summary>
        </member>
        <member name="P:Ext.Net.SplitCommand.XType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.MenuCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.CtCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.DisabledClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Hidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.OverCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.ItemCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Menu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Handler">
            <summary>
            A function that will handle the click event of this menu item (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.CommandName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Icon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.IconCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Cls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.CtCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.DisabledClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Hidden">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.OverCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.ItemCls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Menu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.Handler">
            <summary>
            A function that will handle the click event of this menu item (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.MenuCommand.Config.HideOnClick">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.CommandName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.Icon(Ext.Net.Icon)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.IconCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.Cls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.CtCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.Disabled(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.DisabledClass(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.Hidden(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.OverCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.ItemCls(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.Handler(System.String)">
            <summary>
            A function that will handle the click event of this menu item (defaults to undefined).
            </summary>
        </member>
        <member name="M:Ext.Net.MenuCommand.Builder.HideOnClick(System.Boolean)">
            <summary>
            True to hide the containing menu after this item is clicked (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelListeners.BeforeRowSelect">
            <summary>
            Fires when a row is being selected, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelListeners.RowDeselect">
            <summary>
            Fires when a row is deselected.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelListeners.RowSelect">
            <summary>
            Fires when a row is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelListeners.SelectionChange">
            <summary>
            Fires when the selection changes
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelListeners.BeforeCheckAllClick">
            <summary>
            Fires when click on the check all
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelListeners.AfterCheckAllClick">
            <summary>
            Fires when click on the check all
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.Scope">
            <summary>
            The scope in which to execute the handler function. The handler function's 'this' context.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.Delegate">
            <summary>
            A simple selector to filter the target or look for a descendant of the target
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.StopEvent">
            <summary>
            True to stop the event. That is stop propagation, and prevent the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.PreventDefault">
            <summary>
            True to prevent the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.StopPropagation">
            <summary>
            True to prevent event propagation.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.Normalized">
            <summary>
            False to pass a browser event to the handler function instead of an Ext.EventObject.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.Delay">
            <summary>
            The number of milliseconds to delay the invocation of the handler after the event fires.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.Single">
            <summary>
            True to add a handler to handle just the next firing of the event, and then remove itself.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseListener.Buffer">
            <summary>
            Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentListener.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentListener.Fn">
            <summary>
            The handler function the event invokes. This function is passed the following parameters:
                evt : EventObject
                    The EventObject describing the event.
                t : Element
                    The Element which was the target of the event. Note that this may be filtered by using the delegate option.
                o : Object
                    The options object from the addListener call.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.BeforeClick">
            <summary>
            Fires before a click is processed. Returns false to cancel the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.BeforeSelect">
            <summary>
            Fires before a selection is made. If any handlers return false, the selection is cancelled.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.Click">
            <summary>
            Fires when a template node is clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.ContainerClick">
            <summary>
            Fires when a click occurs and it is not on a template node.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.ContextMenu">
            <summary>
            Fires when a template node is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.DblClick">
            <summary>
            Fires when a template node is double clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.MouseEnter">
            <summary>
            Fires when the mouse enters a template node. trackOver:true or an overCls must be set to enable this event.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.MouseLeave">
            <summary>
            Fires when the mouse leaves a template node. trackOver:true or an overCls must be set to enable this event.
            </summary>
        </member>
        <member name="P:Ext.Net.DataViewListeners.SelectionChange">
            <summary>
            Fires when the selected nodes change.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridDirectEvents.BeforePropertyChange">
            <summary>
            Fires before a property value changes. Handlers can return false to cancel the property change (this will internally call Ext.data.Record.reject on the property's record).
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridDirectEvents.PropertyChange">
            <summary>
            Fires after a property value has changed.
            </summary>
        </member>
        <member name="T:Ext.Net.ComponentDirectEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BaseDirectEvent.Type">
            <summary>
            The type of DirectEvent to perform. The 'Submit' type will submit the &lt;form> and 'Load' will make a POST request to url set in the .Url property, or the current url if the .Url property has not been set.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseDirectEvent.FormID">
            <summary>
            The id of the form to submit. If this.ParentForm is not null then this.ParentForm.ClientID is used, else if FormID is empty the Page.Form.ClientID is used, else try to find the form in dom tree hierarchy, otherwise the Url of current page is used.
            </summary>
        </member>
        <member name="P:Ext.Net.BaseDirectEvent.Url">
            <summary>
            The default URL to be used for requests to the server. (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.BaseDirectEvent.Timeout">
            <summary>
            The timeout in milliseconds to be used for requests. (defaults to 30000)
            </summary>
        </member>
        <member name="M:Ext.Net.ComponentDirectEvent.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ext.Net.ComponentDirectEvent.Handler">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ext.Net.ComponentDirectEvent.Event">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.After">
            <new date="2010-01-26" owner="geoff" key="DirectEvent">
            The .After handler is called immediately after the DirectEvent is fired and before the response is returned from the server.
            </new>
            <summary>
            After handler with params: el, extraParams. Called immediately after DirectEvent has been requested.
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.Before">
            <summary>
            Before handler with params: el, type, action, extraParams
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.Success">
            <summary>
            Success handler with params: response, result, control, type, action, extraParams
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.Failure">
            <summary>
            Failure handler with params: response, result, control, type, action, extraParams
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.Complete">
            <summary>
            Failure handler with params: success, response, result, control, type, action, extraParams
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.ShowWarningOnFailure">
            <summary>
            Show warning if request fail. If Failure handler exists then this handler will be called instead showing warning
            </summary>
        </member>
        <member name="P:Ext.Net.ComponentDirectEvent.Confirmation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ComponentDirectEvent.DirectEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Ext.Net.DirectEvent.Target">
            <summary>
            The target to attach this DirectEvent to. The target can be an ID, an ID token (#{Button1}), or a Select token (${div.box}).
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEvent.EventName">
            <summary>
            The name of the server-side Event to fire during the DirectEvent.
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEvent.HtmlEvent">
            <summary>
            The html event type to attach this DirectEvent to. Example 'click'.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPaletteDirectEvents.Select">
            <summary>
            Fires when a color is selected
            </summary>
        </member>
        <member name="T:Ext.Net.PortalColumn">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.MenuPanel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuPanel.SetSelectedIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.MenuPanel.ClearSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Items">
            <summary>
            Items Collection
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.SaveSelection">
            <summary>
            Save selection after click
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.FitHeight">
            <summary>
            Fit menu's height
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.SelectedIndex">
            <summary>
            Index of selected item
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.Menu">
            <summary>
            Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.SaveSelection">
            <summary>
            Save selection after click
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.FitHeight">
            <summary>
            Fit menu's height
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.SelectedIndex">
            <summary>
            Index of selected item
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.MenuPanel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.MenuPanel.Builder.SaveSelection(System.Boolean)">
            <summary>
            Save selection after click
            </summary>
        </member>
        <member name="M:Ext.Net.MenuPanel.Builder.FitHeight(System.Boolean)">
            <summary>
            Fit menu's height
            </summary>
        </member>
        <member name="M:Ext.Net.MenuPanel.Builder.SelectedIndex(System.Int32)">
            <summary>
            Index of selected item
            </summary>
        </member>
        <member name="M:Ext.Net.MenuPanel.Builder.SetSelectedIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.MenuPanel.Builder.ClearSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.LockText">
            <summary>
            The text displayed in the "Lock" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.UnlockText">
            <summary>
            The text displayed in the "Unlock" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.SyncHeights">
            <summary>
            This option ensures that height between the rows is synchronized between the locked and unlocked sides. This option only needs to be used when the row heights isn't predictable.
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.Config.LockText">
            <summary>
            The text displayed in the \"Lock\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.Config.UnlockText">
            <summary>
            The text displayed in the \"Unlock\" menu item
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.Config.RowBorderWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.Config.LockedBorderWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.LockingGridView.Config.SyncHeights">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.LockingGridView.Builder.LockText(System.String)">
            <summary>
            The text displayed in the \"Lock\" menu item
            </summary>
        </member>
        <member name="M:Ext.Net.LockingGridView.Builder.UnlockText(System.String)">
            <summary>
            The text displayed in the \"Unlock\" menu item
            </summary>
        </member>
        <member name="M:Ext.Net.LockingGridView.Builder.RowBorderWidth(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.LockingGridView.Builder.LockedBorderWidth(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.LockingGridView.Builder.SyncHeights(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.HttpWriteProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HttpWriteProxy.HandleSaveResponseAsXml">
            <summary>
            If save handler is web service then response will be xml. This option specifies how to handle response.
            If false then the response is handled as json
            If true then the response is handled as xml
            </summary>
        </member>
        <member name="P:Ext.Net.HttpWriteProxy.Config.HandleSaveResponseAsXml">
            <summary>
            If save handler is web service then response will be xml. This option specifies how to handle response.
            </summary>
        </member>
        <member name="M:Ext.Net.HttpWriteProxy.Builder.HandleSaveResponseAsXml(System.Boolean)">
            <summary>
            If save handler is web service then response will be xml. This option specifies how to handle response.
            </summary>
        </member>
        <member name="T:Ext.Net.HtmlEditor">
            <summary>
            Provides a lightweight HTML Editor component. NOTE: HtmlEditor can not be hidden on initial page load. If placing within a TabPanel, please ensure the correct .ActiveTabIndex is set. If placing within a Window, please ensure InitHidden is 'false'.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.CleanHtml(System.String)">
            <summary>
            Protected method that will not generally be called directly. If you need/want custom HTML cleanup, this is the method you should override.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.ExecCmd(System.String,System.String)">
            <summary>
            Executes a Midas editor command directly on the editor document. For visual commands, you should use relayCmd instead. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.ExecCmd(System.String,System.Boolean)">
            <summary>
            Executes a Midas editor command directly on the editor document. For visual commands, you should use relayCmd instead. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.InsertAtCursor(System.String)">
            <summary>
            Executes a Midas editor command directly on the editor document. For visual commands, you should use relayCmd instead. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.PushValue">
            <summary>
            Protected method that will not generally be called directly. Pushes the value of the textarea into the iframe editor.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.RelayCmd(System.String,System.String)">
            <summary>
            Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.RelayCmd(System.String,System.Boolean)">
            <summary>
            Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.SyncValue">
            <summary>
            Protected method that will not generally be called directly. Syncs the contents of the editor iframe with the textarea.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.ToggleSourceEdit">
            <summary>
            Toggles the editor between standard and source edit mode.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.ToggleSourceEdit(System.Boolean)">
            <summary>
            Toggles the editor between standard and source edit mode.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.UpdateToolbar">
            <summary>
            Protected method that will not generally be called directly. It triggers a toolbar update by reading the markup state of the current selection in the editor.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.HtmlEditor.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="E:Ext.Net.HtmlEditor.TextChanged">
            <summary>
            Fires when the Text property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.CreateLinkText">
            <summary>
            The default text for the create link prompt.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.DefaultLinkValue">
            <summary>
            The default value for the create link prompt (defaults to http://).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableAlignments">
            <summary>
            Enable the left, center, right alignment buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableColors">
            <summary>
            Enable the fore/highlight color buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableFont">
            <summary>
            Enable font selection. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableFontSize">
            <summary>
            Enable the increase/decrease font size buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableFormat">
            <summary>
            Enable the bold, italic and underline buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableLinks">
            <summary>
            Enable the create link button. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableLists">
            <summary>
            Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.EnableSourceEdit">
            <summary>
            Enable the switch to source edit button. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.FontFamilies">
            <summary>
            An array of available font families.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.Text">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.CreateLinkText">
            <summary>
            The default text for the create link prompt.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.DefaultLinkValue">
            <summary>
            The default value for the create link prompt (defaults to http://).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableAlignments">
            <summary>
            Enable the left, center, right alignment buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableColors">
            <summary>
            Enable the fore/highlight color buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableFont">
            <summary>
            Enable font selection. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableFontSize">
            <summary>
            Enable the increase/decrease font size buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableFormat">
            <summary>
            Enable the bold, italic and underline buttons (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableLinks">
            <summary>
            Enable the create link button. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableLists">
            <summary>
            Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EnableSourceEdit">
            <summary>
            Enable the switch to source edit button. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.EscapeValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditor.Config.FontFamilies">
            <summary>
            An array of available font families.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.Text(System.String)">
            <summary>
            The Text value to initialize this field with.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.CreateLinkText(System.String)">
            <summary>
            The default text for the create link prompt.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.DefaultLinkValue(System.String)">
            <summary>
            The default value for the create link prompt (defaults to http://).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableAlignments(System.Boolean)">
            <summary>
            Enable the left, center, right alignment buttons (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableColors(System.Boolean)">
            <summary>
            Enable the fore/highlight color buttons (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableFont(System.Boolean)">
            <summary>
            Enable font selection. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableFontSize(System.Boolean)">
            <summary>
            Enable the increase/decrease font size buttons (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableFormat(System.Boolean)">
            <summary>
            Enable the bold, italic and underline buttons (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableLinks(System.Boolean)">
            <summary>
            Enable the create link button. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableLists(System.Boolean)">
            <summary>
            Enable the bullet and numbered list buttons. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EnableSourceEdit(System.Boolean)">
            <summary>
            Enable the switch to source edit button. Not available in Safari. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.EscapeValue(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.FontFamilies(System.String[])">
            <summary>
            An array of available font families.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.CleanHtml(System.String)">
            <summary>
            Protected method that will not generally be called directly. If you need/want custom HTML cleanup, this is the method you should override.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.ExecCmd(System.String,System.String)">
            <summary>
            Executes a Midas editor command directly on the editor document. For visual commands, you should use relayCmd instead. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.ExecCmd(System.String,System.Boolean)">
            <summary>
            Executes a Midas editor command directly on the editor document. For visual commands, you should use relayCmd instead. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.InsertAtCursor(System.String)">
            <summary>
            Executes a Midas editor command directly on the editor document. For visual commands, you should use relayCmd instead. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.PushValue">
            <summary>
            Protected method that will not generally be called directly. Pushes the value of the textarea into the iframe editor.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.RelayCmd(System.String,System.String)">
            <summary>
            Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.RelayCmd(System.String,System.Boolean)">
            <summary>
            Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates. This should only be called after the editor is initialized.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.SyncValue">
            <summary>
            Protected method that will not generally be called directly. Syncs the contents of the editor iframe with the textarea.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.ToggleSourceEdit">
            <summary>
            Toggles the editor between standard and source edit mode.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.ToggleSourceEdit(System.Boolean)">
            <summary>
            Toggles the editor between standard and source edit mode.
            </summary>
        </member>
        <member name="M:Ext.Net.HtmlEditor.Builder.UpdateToolbar">
            <summary>
            Protected method that will not generally be called directly. It triggers a toolbar update by reading the markup state of the current selection in the editor.
            </summary>
        </member>
        <member name="T:Ext.Net.AnchorLayout">
            <summary>
            This is a layout that enables anchoring of contained elements relative to the container's dimensions. If the container is resized, all anchored items are automatically rerendered according to their anchor rules.
            </summary>
        </member>
        <member name="P:Ext.Net.AnchorLayout.Height">
            <summary>
            The height of this Anchor in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.AnchorLayout.Width">
            <summary>
            The width of this Anchor in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.AnchorLayout.Anchors">
            <summary>
            Anchors collection
            </summary>
        </member>
        <member name="P:Ext.Net.AnchorLayout.Config.Height">
            <summary>
            The height of this Anchor in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.AnchorLayout.Config.Width">
            <summary>
            The width of this Anchor in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.AnchorLayout.Config.Anchors">
            <summary>
            Anchors collection
            </summary>
        </member>
        <member name="M:Ext.Net.AnchorLayout.Builder.Height(System.Web.UI.WebControls.Unit)">
            <summary>
            The height of this Anchor in pixels (defaults to auto).
            </summary>
        </member>
        <member name="M:Ext.Net.AnchorLayout.Builder.Width(System.Web.UI.WebControls.Unit)">
            <summary>
            The width of this Anchor in pixels (defaults to auto).
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanel.DeferredRender">
            <summary>
            Deferred Render
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanel.ActiveGroup">
            <summary>
            Active group
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanel.ActiveGroupIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanel.Groups">
            <summary>
            Tabs Collection
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanel.TabPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabPanel.TabWidth">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="T:Ext.Net.FieldReplicator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.CommandMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.EnableScrolling">
            <summary>
            Whenever a menu gets so long that the items won't fit the viewable area, it provides the user with an easy UI to scroll the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.MinWidth">
            <summary>
            The minimum width of the menu in pixels (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.MaxHeight">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.ScrollIncrement">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.ShowSeparator">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Shadow">
            <summary>
            True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"sides\")
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.SubMenuAlign">
            <summary>
            The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to \"tl-tr?\")
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.IgnoreParentClicks">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.Shared(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.EnableScrolling(System.Boolean)">
            <summary>
            Whenever a menu gets so long that the items won't fit the viewable area, it provides the user with an easy UI to scroll the menu.
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.MinWidth(System.Int32)">
            <summary>
            The minimum width of the menu in pixels (defaults to 120).
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.MaxHeight(System.Int32)">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.ScrollIncrement(System.Int32)">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.ShowSeparator(System.Boolean)">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.Shadow(Ext.Net.ShadowMode)">
            <summary>
            True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"sides\")
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.SubMenuAlign(System.String)">
            <summary>
            The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to \"tl-tr?\")
            </summary>
        </member>
        <member name="M:Ext.Net.CommandMenu.Builder.IgnoreParentClicks(System.Boolean)">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.Shared">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.EnableScrolling">
            <summary>
            Whenever a menu gets so long that the items won't fit the viewable area, it provides the user with an easy UI to scroll the menu.
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.MinWidth">
            <summary>
            The minimum width of the menu in pixels (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.MaxHeight">
            <summary>
            The maximum height of the menu. Only applies when enableScrolling is set to True (defaults to null).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.ScrollIncrement">
            <summary>
            The amount to scroll the menu. Only applies when enableScrolling is set to True (defaults to 24).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.ShowSeparator">
            <summary>
            True to show the icon separator. (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.Shadow">
            <summary>
            True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow (defaults to \"sides\")
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.SubMenuAlign">
            <summary>
            The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to \"tl-tr?\")
            </summary>
        </member>
        <member name="P:Ext.Net.CommandMenu.Config.IgnoreParentClicks">
            <summary>
            True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).
            </summary>
        </member>
        <member name="T:Ext.Net.AjaxRequestFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Ext.Net.AjaxRequestFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.AjaxRequestFilter.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.AjaxRequestFilter.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.AjaxRequestFilter.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.AjaxRequestFilter.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.AjaxRequestFilter.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripDirectEvents.BeforeTabChange">
            <summary>
            Fires before the active tab changes. Handlers can return false to cancel the tab change.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripDirectEvents.ContextMenu">
            <summary>
            Fires when the original browser contextmenu event originated from a tab element.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripDirectEvents.TabChange">
            <summary>
            Fires after the active tab has changed.
            </summary>
        </member>
        <member name="P:Ext.Net.DefaultSelectionModelDirectEvents.BeforeSelect">
            <summary>
            Fires before the selected node changes, return false to cancel the change
            </summary>
        </member>
        <member name="P:Ext.Net.DefaultSelectionModelDirectEvents.SelectionChange">
            <summary>
            Fires when the selected node changes
            </summary>
        </member>
        <member name="T:Ext.Net.DragTrackerDirectEvents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DragTrackerDirectEvents.Drag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DragTrackerDirectEvents.DragEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DragTrackerDirectEvents.DragStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DragTrackerDirectEvents.MouseDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DragTrackerDirectEvents.MouseMove">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DragTrackerDirectEvents.MouseUp">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.PropertyGridParameterCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.VBoxLayout">
            <summary>
            A layout that arranges items vertically
            </summary>
        </member>
        <member name="P:Ext.Net.VBoxLayout.Align">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="P:Ext.Net.VBoxLayout.Config.Align">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="M:Ext.Net.VBoxLayout.Builder.Align(Ext.Net.VBoxAlign)">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="T:Ext.Net.TriggerField">
            <summary>
            Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TriggerField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarStatusConfig.Text">
            <summary>
            The status text to display. If not specified, any current status text will remain unchanged.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarStatusConfig.Icon">
            <summary>
            An Icon that will be applied to the status element and is expected to provide a background image that will serve as the status bar icon (defaults to 'Icon.None'). The Icons is applied directly to the div that also contains the status text, so the rule should provide the appropriate padding on the div to make room for the image.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarStatusConfig.IconCls">
            <summary>
            The CSS class used to customize the status icon (see iconCls for details). If not specified, any current iconCls will remain unchanged.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarStatusConfig.Clear">
            <summary>
            Allows you to set an internal callback that will automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not specified, the new status will not be auto-cleared and will stay until updated again or cleared using clearStatus.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarStatusConfig.Clear2">
            <summary>
            If true is passed, the status will be cleared using autoClear, defaultText and defaultIconCls via a fade out animation.
            </summary>
        </member>
        <member name="P:Ext.Net.StatusBarStatusConfig.Clear3">
            <summary>
            If a numeric value is passed, it will be used as the callback interval (in milliseconds), overriding the autoClear value.
            </summary>
        </member>
        <member name="T:Ext.Net.Spotlight">
            <summary>
            This control allows you to restrict input to a particular element by masking all other page content.
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Show(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Ext.Net.Spotlight.Show(Ext.Net.XControl)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Ext.Net.Spotlight.Hide">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Spotlight.Animate">
            <summary>
            True to animate the spot (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.Spotlight.Duration">
            <summary>
            Animation duration if animate = true (defaults to .25)
            </summary>
        </member>
        <member name="P:Ext.Net.Spotlight.Easing">
            <summary>
            Animation easing if animate = true (defaults to 'easeNone')
            </summary>
        </member>
        <member name="P:Ext.Net.Spotlight.Config.Animate">
            <summary>
            True to animate the spot (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.Spotlight.Config.Duration">
            <summary>
            Animation duration if animate = true (defaults to .25)
            </summary>
        </member>
        <member name="P:Ext.Net.Spotlight.Config.Easing">
            <summary>
            Animation easing if animate = true (defaults to 'easeNone')
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Builder.Animate(System.Boolean)">
            <summary>
            True to animate the spot (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Builder.Duration(System.Double)">
            <summary>
            Animation duration if animate = true (defaults to .25)
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Builder.Easing(Ext.Net.Easing)">
            <summary>
            Animation easing if animate = true (defaults to 'easeNone')
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Builder.Show(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Builder.Show(Ext.Net.XControl)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Spotlight.Builder.Hide">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.SliderTip">
            <summary>
            Simple plugin for using an Ext.Tip with a slider to show the slider value.
            </summary>
        </member>
        <member name="P:Ext.Net.SliderTip.GetText">
            <summary>
            Used to create the text that appears in the Tip's body. By default this just returns the value of the Slider Thumb that the Tip is attached to. Override to customize.
            </summary>
        </member>
        <member name="T:Ext.Net.SlideOut">
            <summary>
            Slides the element out of view. An anchor point can be optionally passed to set the end point for the slide effect. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired. This function automatically handles wrapping the element with a fixed-size container if needed.
            </summary>
        </member>
        <member name="T:Ext.Net.SlideIn">
            <summary>
            Slides the element into view. An anchor point can be optionally passed to set the point of origin for the slide effect. This function automatically handles wrapping the element with a fixed-size container if needed. 
            </summary>
        </member>
        <member name="P:Ext.Net.SlideIn.Anchor">
            <summary>
            One of the valid Fx anchor positions (defaults to AnchorPoint.CenterTop)
            </summary>
        </member>
        <member name="T:Ext.Net.RadioGroup">
            <summary>
            A grouping container for Ext.form.Radio controls.
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'radio').
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.AutomaticGrouping">
            <summary>
            Automatic grouping (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.GroupName">
            <summary>
            The field's HTML name attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.CheckedItems">
            <summary>
            A List of Radio Controls in this RadioGroup that are Checked.
            </summary>
        </member>
        <member name="E:Ext.Net.RadioGroup.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="M:Ext.Net.RadioGroup.Builder.DefaultType(System.String)">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'radio').
            </summary>
        </member>
        <member name="M:Ext.Net.RadioGroup.Builder.AutomaticGrouping(System.Boolean)">
            <summary>
            Automatic grouping (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.RadioGroup.Builder.GroupName(System.String)">
            <summary>
            The field's HTML name attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Config.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'radio').
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Config.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Config.AutomaticGrouping">
            <summary>
            Automatic grouping (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.RadioGroup.Config.GroupName">
            <summary>
            The field's HTML name attribute.
            </summary>
        </member>
        <member name="T:Ext.Net.ImageButton">
            <summary>
            Simple ImageButton class
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.ImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.OverImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.DisabledImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.PressedImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.AlternateText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Align">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Config.ImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Config.OverImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Config.DisabledImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Config.PressedImageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Config.AlternateText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ImageButton.Config.Align">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageButton.Builder.ImageUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageButton.Builder.OverImageUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageButton.Builder.DisabledImageUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageButton.Builder.PressedImageUrl(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageButton.Builder.AlternateText(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ImageButton.Builder.Align(System.Web.UI.WebControls.ImageAlign)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.DirectEventConfirmation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.ConfirmRequest">
            <summary>
            If true show confirmation dialog
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.Title">
            <summary>
            Confirmation dialog title
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.Message">
            <summary>
            Confirmation dialog message
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.BeforeConfirm">
            <summary>
            Before confirm handler. Return false to cancel confirm
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.BeforeConfirmProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.Cancel">
            <summary>
            Javascript handler, Fires if user press No in the confirmation dialog
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventConfirmation.CancelProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxyDirectEvents.BeforeLoad">
            <summary>
            Fires before a network request is made to retrieve a data object.
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxyDirectEvents.Load">
            <summary>
            Fires before the load method's callback is called.
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxyDirectEvents.LoawdException">
             <summary>
             Fires if an exception occurs in the Proxy during data loading. 
             This event can be fired for one of two reasons:
                 The load call timed out. This means the load callback did
                 not execute within the time limit specified by timeout.
                 In this case, this event will be raised and the fourth
                 parameter (read error) will be null.
            
                 The load succeeded but the reader could not read the response.
                 This means the server returned data, but the configured Reader
                 threw an error while reading the data. In this case, this event
                 will be raised and the caught error will be passed along as 
                 the fourth parameter of this event.
             
                 Note that this event is also relayed through Store, so you
                 can listen for it directly on any Store instance.
             
                 DirectEvents will be called with the following arguments:
                     this : Object
                     
                     options : Object
                         The loading options that were specified (see load for details).
                         If the load call timed out, this parameter will be null.
                     
                     arg : Object
                         The callback's arg object passed to the load function
             
                     e : Error
                     The JavaScript Error object caught if the configured Reader
                     could not read the data. If the load call returned 
                     success: false, this parameter will be null.
             </summary>
        </member>
        <member name="T:Ext.Net.CommandText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandText.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CommandText.Config.Text">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CommandText.Builder.Text(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ColumnTree">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTree.Columns">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.ColumnTree.HideHeaders" -->
        <member name="M:Ext.Net.ColumnTree.Builder.HideHeaders(System.Boolean)">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTree.Config.Columns">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnTree.Config.HideHeaders">
            <summary>
            True to hide the grid's header (defaults to false).
            </summary>
        </member>
        <member name="T:Ext.Net.ColorPalette">
            <summary>
            Simple color palette class for choosing colors.
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Select(System.String)">
            <summary>
            Selects the specified color in the palette (fires the select event)
            </summary>
            <param name="value">color A valid 6-digit color hex code (# will be stripped if included)</param>
        </member>
        <member name="M:Ext.Net.ColorPalette.Select(System.String,System.Boolean)">
            <summary>
            Selects the specified color in the palette (fires the select event)
            </summary>
            <param name="value">color A valid 6-digit color hex code (# will be stripped if included)</param>
            <param name="suppressEvent">(optional) True to stop the select event from firing. Defaults to <tt>false</tt>.</param>
        </member>
        <member name="M:Ext.Net.ColorPalette.SilentSelect(System.String)">
            <summary>
            Selects the specified color in the palette (doesn't fire the select event)
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ext.Net.ColorPalette.AllowReselect">
            <summary>
            If set to true then reselecting a color that is already selected fires the select event
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Colors">
            <summary>
            An array of 6-digit color hex code strings (without the # symbol).
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.ItemCls">
            <summary>
            The CSS class to apply to the containing element (defaults to \"x-color-palette\")
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Template">
            <summary>
            An existing XTemplate instance to be used in place of the default template for rendering the component.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Value">
            <summary>
            The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex codes are case-sensitive.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.AutoPostBack">
            <summary>
            AutoPostBack
            </summary>
            <value><c>true</c> if [auto post back]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ext.Net.ColorPalette.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="E:Ext.Net.ColorPalette.ColorChanged">
            <summary>
            Fires when the Item property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.AllowReselect">
            <summary>
            If set to true then reselecting a color that is already selected fires the select event
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.Colors">
            <summary>
            An array of 6-digit color hex code strings (without the # symbol).
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.ItemCls">
            <summary>
            The CSS class to apply to the containing element (defaults to \"x-color-palette\")
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.Template">
            <summary>
            An existing XTemplate instance to be used in place of the default template for rendering the component.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.Value">
            <summary>
            The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex codes are case-sensitive.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.AutoPostBack">
            <summary>
            AutoPostBack
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPalette.Config.DirectEvents">
            <summary>
            Server-side DirectEventHandlers
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.AllowReselect(System.Boolean)">
            <summary>
            If set to true then reselecting a color that is already selected fires the select event
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.Colors(System.String[])">
            <summary>
            An array of 6-digit color hex code strings (without the # symbol).
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.ItemCls(System.String)">
            <summary>
            The CSS class to apply to the containing element (defaults to \"x-color-palette\")
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.Value(System.String)">
            <summary>
            The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex codes are case-sensitive.
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.AutoPostBack(System.Boolean)">
            <summary>
            AutoPostBack
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.Select(System.String)">
            <summary>
            Selects the specified color in the palette (fires the select event)
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.Select(System.String,System.Boolean)">
            <summary>
            Selects the specified color in the palette (fires the select event)
            </summary>
        </member>
        <member name="M:Ext.Net.ColorPalette.Builder.SilentSelect(System.String)">
            <summary>
            Selects the specified color in the palette (doesn't fire the select event)
            </summary>
        </member>
        <member name="M:Ext.Net.DomHelper.Append(Ext.Net.Element,Ext.Net.DomObject)">
            <summary>
            Creates new DOM element(s) and appends them to el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children) or raw HTML blob</param>
        </member>
        <member name="M:Ext.Net.DomHelper.Append(Ext.Net.Element,System.String)">
            <summary>
            Creates new DOM element(s) and appends them to el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">Raw HTML blob</param>
        </member>
        <member name="M:Ext.Net.DomHelper.ApplyStyles(Ext.Net.Element,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies a style specification to an element.
            </summary>
            <param name="el">The element to apply styles to</param>
            <param name="styles">A style specification.</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertAfter(Ext.Net.Element,Ext.Net.DomObject)">
            <summary>
            Creates new DOM element(s) and inserts them after el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertAfter(Ext.Net.Element,System.String)">
            <summary>
            Creates new DOM element(s) and inserts them after el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertBefore(Ext.Net.Element,Ext.Net.DomObject)">
            <summary>
            Creates new DOM element(s) and inserts them before el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertBefore(Ext.Net.Element,System.String)">
            <summary>
            Creates new DOM element(s) and inserts them before el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertFirst(Ext.Net.Element,Ext.Net.DomObject)">
            <summary>
            Creates new DOM element(s) and inserts them as the first child of el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertFirst(Ext.Net.Element,System.String)">
            <summary>
            Creates new DOM element(s) and inserts them as the first child of el.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.InsertHtml(Ext.Net.InsertPosition,Ext.Net.Element,System.String)">
            <summary>
            Inserts an HTML fragment into the DOM.
            </summary>
            <param name="where">Where to insert the html in relation to el - BeforeBegin, AfterBegin, BeforeEnd, AfterEnd.</param>
            <param name="el">The context element</param>
            <param name="html">The HTML fragmenet</param>
        </member>
        <member name="M:Ext.Net.DomHelper.Overwrite(Ext.Net.Element,Ext.Net.DomObject)">
            <summary>
            Creates new DOM element(s) and overwrites the contents of el with them.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="M:Ext.Net.DomHelper.Overwrite(Ext.Net.Element,System.String)">
            <summary>
            Creates new DOM element(s) and overwrites the contents of el with them.
            </summary>
            <param name="el">The context element</param>
            <param name="o">The DOM object spec (and children)</param>
        </member>
        <member name="T:Ext.Net.DDProxy">
            <summary>
            A DragDrop implementation that inserts an empty, bordered div into the document that follows the cursor during drag operations. At the time of the click, the frame div is resized to the dimensions of the linked html element, and moved to the exact location of the linked element. References to the "frame" element refer to the single proxy element that was created to be dragged in place of all DDProxy elements on the page.
            </summary>
        </member>
        <member name="P:Ext.Net.DDProxy.CenterFrame">
            <summary>
            By default the frame is positioned exactly where the drag element is, so we use the cursor offset provided by Ext.dd.DD. Another option that works only if you do not have constraints on the obj is to have the drag frame centered around the cursor. Set centerFrame to true for this effect.
            </summary>
        </member>
        <member name="P:Ext.Net.DDProxy.ResizeFrame">
            <summary>
            By default we resize the drag frame to be the same size as the element we want to drag (this is to get the frame effect). We can turn it off if we want a different behavior.
            </summary>
        </member>
        <member name="P:Ext.Net.DDProxy.AfterDrag">
            <summary>
            Abstract method runs on drag end
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarFill">
            <summary>
            A simple element that adds a greedy (100% width) horizontal space between items in a toolbar.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowListeners.Maximize">
            <summary>
            Fires after the window has been maximized.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowListeners.Minimize">
            <summary>
            Fires after the window has been minimized.
            </summary>
        </member>
        <member name="P:Ext.Net.WindowListeners.Restore">
            <summary>
            Fires after the window has been restored to its original size after being maximized.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Add">
            <summary>
            Fires when Records have been added to the Store
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.BeforeLoad">
            <summary>
            Fires before a request is made for a new data object. If the beforeload handler returns false the load action will be canceled
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Clear">
            <summary>
            Fires when the data cache has been cleared.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.DataChanged">
            <summary>
            Fires when the data cache has changed, and a widget which is using this Store as a Record cache should refresh its view.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Load">
            <summary>
            Fires after a new set of Records has been loaded.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.LoadException">
            <summary>
            Fires if an exception occurs in the Proxy during loading. Called with the signature of the Proxy's \"loadexception\" event.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.MetaChange">
            <summary>
            Fires when this store's reader provides new metadata (fields). This is currently only supported for JsonReaders.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Remove">
            <summary>
            Fires when a Record has been removed from the Store
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Update">
            <summary>
            Fires when a Record has been updated
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.BeforeSave">
            <summary>
            Fires before a network request is made to save a data object. If the beforesave handler returns false the save action will be canceled
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Save">
            <summary>
            Fires before the save method's callback is called.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.SaveException">
            <summary>
            Fires if an exception occurs in the Proxy during writing.
            </summary>
        </member>
        <member name="P:Ext.Net.StoreListeners.Exception">
            <summary>
            Fires if an exception occurs during request
            </summary>
        </member>
        <member name="P:Ext.Net.HistoryListeners.Change">
            <summary>
            Handle this change event in order to restore the UI to the appropriate history state
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponentListeners.Initialize">
            <summary>
            Fires after the component is initialized.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.Append">
            <summary>
            Fires when a new child node is appended to a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeAppend">
            <summary>
            Fires before a new child is appended to a node in this tree, return false to cancel the append.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeChildRenrendered">
            <summary>
            Fires right before the child nodes for a node are rendered
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeClick">
            <summary>
            Fires before click processing on a node. Return false to cancel the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeCollapseNode">
            <summary>
            Fires before a node is collapsed, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeExpandNode">
            <summary>
            Fires before a node is expanded, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeInsert">
            <summary>
            Fires before a new child is inserted in a node in this tree, return false to cancel the insert.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeLoad">
            <summary>
            Fires before a node is loaded, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeMoveNode">
            <summary>
            Fires before a node is moved to a new location in the tree. Return false to cancel the move.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeNodeDrop">
            <summary>
            Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeRemoveNode">
            <summary>
            Fires before a child is removed from a node in this tree, return false to cancel the remove.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.CheckChange">
            <summary>
            Fires when a node with a checkbox's checked property changes
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.Click">
            <summary>
            Fires when a node is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.CollapseNode">
            <summary>
            Fires when a node is collapsed
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.ContextMenu">
            <summary>
            Fires when a node is right clicked.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.DblClick">
            <summary>
            Fires when a node is double clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.DisabledChange">
            <summary>
            Fires when the disabled status of a node changes
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.DragDrop">
            <summary>
            Fires when a dragged node is dropped on a valid DD target
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.EndDrag">
            <summary>
            Fires when a drag operation is complete
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.ExpandNode">
            <summary>
            Fires when a node is expanded
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.Insert">
            <summary>
            Fires when a new child node is inserted in a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.Load">
            <summary>
            Fires when a node is loaded
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.MoveNode">
            <summary>
            Fires when a node is moved to a new location in the tree
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.NodeDragOver">
            <summary>
            Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.NodeDrop">
            <summary>
            Fires after a DD object is dropped on a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.RemoveNode">
            <summary>
            Fires when a child node is removed from a node in this tree.
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.StartDrag">
            <summary>
            Fires when a node starts being dragged
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.TextChange">
            <summary>
            Fires when the text for a node is changed
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.Submit">
            <summary>
            Fires when the submit is success
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.SubmitException">
            <summary>
            Fires when the submit is success
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeRemoteAction">
            <summary>
            Fires before remote action request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.RemoteActionException">
            <summary>
            Fires when an remote action exception occurs
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.RemoteActionRefusal">
            <summary>
            Fires when remote action is finished but contains refusal answer
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.RemoteActionSuccess">
            <summary>
            Fires when remote action successful
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeRemoteMove">
            <summary>
            Fires before remote move request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeRemoteRename">
            <summary>
            Fires before remote rename request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeRemoteRemove">
            <summary>
            Fires before remote remove request
            </summary>
        </member>
        <member name="P:Ext.Net.TreePanelDirectEvents.BeforeRemoteAppend">
            <summary>
            Fires before remote insert/append request
            </summary>
        </member>
        <member name="P:Ext.Net.FileUploadFieldDirectEvents.FileSelected">
            <summary>
            Fires when the underlying file input field's value has changed from the user selecting a new file from the system file selection dialog.
            </summary>
        </member>
        <member name="T:Ext.Net.RendererFormat">
            <summary>
            Reusable data formatting functions
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Capitalize">
            <summary>
            Converts the first character only of a string to upper case
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Date">
            <summary>
            Parse a value into a formatted date using the specified format pattern.
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.DateRenderer">
            <summary>
            Returns a date rendering function that can be reused to apply a date format multiple times efficiently
            format : String
            (optional) Any valid date format string (defaults to 'm/d/Y')
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.DefaultValue">
            <summary>
            Checks a reference and converts it to the default value if it's empty
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Ellipsis">
            <summary>
            Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
            defaultValue : String
            The value to insert of it's undefined (defaults to "")
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.FileSize">
            <summary>
            Simple format for a file size (xxx bytes, xxx KB, xxx MB)
            length : Number
            The maximum length to allow before truncating
            word : Boolean
            True to try to find a common work break
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Ext.Net.RendererFormat.HtmlDecode" -->
        <!-- Badly formed XML comment ignored for member "F:Ext.Net.RendererFormat.HtmlEncode" -->
        <member name="F:Ext.Net.RendererFormat.Nl2br">
            <summary>
            Converts newline characters to the HTML tag &lt;br/>
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Number">
            <summary>
            Formats the number according to the format string.
            examples (123456.789):
            0 - (123456) show only digits, no precision
            0.00 - (123456.78) show only digits, 2 precision
            0.0000 - (123456.7890) show only digits, 4 precision
            0,000 - (123,456) show comma and digits, no precision
            0,000.00 - (123,456.78) show comma and digits, 2 precision
            0,0.00 - (123,456.78) shortcut method, show comma and digits, 2 precision
            To reverse the grouping (,) and decimal (.) for international numbers, add /i to the end. For example: 0.000,00/i
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.NumberRenderer">
            <summary>
            Returns a number rendering function that can be reused to apply a number format multiple times efficiently
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.LowerCase">
            <summary>
            Converts a string to all lower case letters
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Plural">
            <summary>
            Selectively do a plural form of a word based on a numeric value. For example, in a template, {commentCount:plural("Comment")} would result in "1 Comment" if commentCount was 1 or would be "x Comments" if the value is 0 or greater than 1.
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Round">
            <summary>
            Rounds the passed number to the required decimal precision.
            singular : String
            The singular form of the word
            plural : String
            (optional) The plural form of the word (defaults to the singular with an "s")
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.StripScripts">
            <summary>
            Strips all script tags
            precision : Number
            The number of decimal places to which to round the first parameter's value.
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.StripTags">
            <summary>
            Strips all HTML tags
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Substr">
            <summary>
            Returns a substring from within an original string
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Trim">
            <summary>
            Trims any whitespace from either side of a string
            start : Number
            The start index of the substring
            length : Number
            The length of the substring
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Undef">
            <summary>
            Checks a reference and converts it to empty string if it is undefined
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.Uppercase">
            <summary>
            Converts a string to all upper case letters
            </summary>
        </member>
        <member name="F:Ext.Net.RendererFormat.UsMoney">
            <summary>
            Format a number as US currency
            </summary>
        </member>
        <member name="T:Ext.Net.ValidationStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.FormPanelID">
            <summary>
            The FormPanel to use.
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.ErrorIcon">
            <summary>
            The error icon
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.ErrorIconCls">
            <summary>
            The error icon css class
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.ErrorListCls">
            <summary>
            The error list css class
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.ValidIcon">
            <summary>
            The valid icon
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.ValidIconCls">
            <summary>
            The valid icon css class
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.ShowText">
            <summary>
            The text which shown when errors exist
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.HideText">
            <summary>
            The text which hide error list when click on it
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.FormPanelID">
            <summary>
            The FormPanel to use.
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.ErrorIcon">
            <summary>
            The error icon
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.ErrorIconCls">
            <summary>
            The error icon css class
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.ErrorListCls">
            <summary>
            The error list css class
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.ValidIcon">
            <summary>
            The valid icon
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.ValidIconCls">
            <summary>
            The valid icon css class
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.ShowText">
            <summary>
            The text which shown when errors exist
            </summary>
        </member>
        <member name="P:Ext.Net.ValidationStatus.Config.HideText">
            <summary>
            The text which hide error list when click on it
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.FormPanelID(System.String)">
            <summary>
            The FormPanel to use.
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.ErrorIcon(Ext.Net.Icon)">
            <summary>
            The error icon
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.ErrorIconCls(System.String)">
            <summary>
            The error icon css class
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.ErrorListCls(System.String)">
            <summary>
            The error list css class
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.ValidIcon(Ext.Net.Icon)">
            <summary>
            The valid icon
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.ValidIconCls(System.String)">
            <summary>
            The valid icon css class
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.ShowText(System.String)">
            <summary>
            The text which shown when errors exist
            </summary>
        </member>
        <member name="M:Ext.Net.ValidationStatus.Builder.HideText(System.String)">
            <summary>
            The text which hide error list when click on it
            </summary>
        </member>
        <member name="T:Ext.Net.SelectedCell">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.RowIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.ColIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.RecordID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.Config.RowIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.Config.ColIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.Config.RecordID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SelectedCell.Config.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedCell.Builder.RowIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedCell.Builder.ColIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedCell.Builder.RecordID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelectedCell.Builder.Name(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.LinkButton">
            <summary>
            Simple LinkButton class
            </summary>
        </member>
        <member name="T:Ext.Net.BoxItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.BoxItem.Flex">
            <summary>
            This configuation option is to be applied to child items of the container managed by this layout. Each child item with a flex property will be flexed horizontally according to each item's relative flex value compared to the sum of all items with a flex value specified. Any child items that have either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxItem.Margins">
            <summary>
            The margins from this property will be applied to the item.
            </summary>
        </member>
        <member name="P:Ext.Net.BoxItem.Config.Flex">
            <summary>
            This configuation option is to be applied to child items of the container managed by this layout. Each child item with a flex property will be flexed horizontally according to each item's relative flex value compared to the sum of all items with a flex value specified. Any child items that have either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="P:Ext.Net.BoxItem.Config.Margins">
            <summary>
            The margins from this property will be applied to the item.
            </summary>
        </member>
        <member name="M:Ext.Net.BoxItem.Builder.Flex(System.Int32)">
            <summary>
            This configuation option is to be applied to child items of the container managed by this layout. Each child item with a flex property will be flexed horizontally according to each item's relative flex value compared to the sum of all items with a flex value specified. Any child items that have either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
            </summary>
        </member>
        <member name="M:Ext.Net.BoxItem.Builder.Margins(System.String)">
            <summary>
            The margins from this property will be applied to the item.
            </summary>
        </member>
        <member name="T:Ext.Net.XScript">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XScript.ScriptBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XScript.Builder.ScriptBlock(System.String)">
            <summary>
            Script text
            </summary>
        </member>
        <member name="P:Ext.Net.XScript.Config.ScriptBlock">
            <summary>
            Script text
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReordererListeners.Reorder">
            <summary>
            Fires after a reorder has occured.
            </summary>
        </member>
        <member name="T:Ext.Net.StoreCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.StoreCollection.Primary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewDateColumn.Format">
            <summary>
            A formatting string as used by Date.format to format a Date for this Column (defaults to 'd').
            </summary>
        </member>
        <member name="P:Ext.Net.ImageListeners.Complete">
            <summary>
            Fires after the image is loaded.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageListeners.ResizerResize">
            <summary>
            Fired after a resizer resize.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageListeners.ResizerBeforeResize">
            <summary>
            Fired before resize is allowed. Set enabled to false to cancel resize.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageListeners.Pan">
            <summary>
            Fired after a pan.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageListeners.Click">
            <summary>
            Fired after a click.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageListeners.DblClick">
            <summary>
            Fired after a double click.
            </summary>
        </member>
        <member name="P:Ext.Net.HeaderGroupColumn.Align">
            <summary>
            optional) Set the CSS text-align property of the column. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabDirectEvents.Activate">
            <summary>
            Fires after tab is activated.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabDirectEvents.Deactivate">
            <summary>
            Fires after tab is deactivated.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabDirectEvents.ChangeMainItem">
            <summary>
            Fires after main item is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabDirectEvents.BeforeTabChange">
            <summary>
            Fires before tab is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabDirectEvents.TabChange">
            <summary>
            Fires after tab is changed.
            </summary>
        </member>
        <member name="T:Ext.Net.CompositeField">
            <summary>
            Composite field allowing a number of form Fields to be rendered on the same row. The fields are rendered using an hbox layout internally, so all of the normal HBox layout config items are available.
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.DoLayout">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.DoLayout(System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.BuildLabel">
            <summary>
            Builds a label string from an array of subfield labels. Calls if CompositeField has no FieldLabel
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Items">
            <summary>
            A Collection of Field Components.
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.DefaultMargins">
            <summary>
             The margins to apply by default to each field in the composite
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.SkipLastItemMargin">
            <summary>
            If true, the defaultMargins are not applied to the last item in the composite field set (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.CombineErrors">
            <summary>
            True to combine errors from the individual fields into a single error message at the CompositeField level (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Defaults">
            <summary>
            A config object that will be applied to all fields added to this CompositeField either via the items config. The defaults config can contain any number of name/value property pairs to be added to each items, and should be valid for the types of items being added to the CompositeField.
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Config.BuildLabel">
            <summary>
            Builds a label string from an array of subfield labels. Calls if CompositeField has no FieldLabel
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Config.Items">
            <summary>
            A Collection of Field Components.
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Config.DefaultMargins">
            <summary>
            The margins to apply by default to each field in the composite
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Config.SkipLastItemMargin">
            <summary>
            If true, the defaultMargins are not applied to the last item in the composite field set (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Config.CombineErrors">
            <summary>
            True to combine errors from the individual fields into a single error message at the CompositeField level (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.CompositeField.Config.Defaults">
            <summary>
            A config object that will be applied to all fields added to this CompositeField either via the items config. The defaults config can contain any number of name/value property pairs to be added to each items, and should be valid for the types of items being added to the CompositeField.
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.Builder.DefaultMargins(System.String)">
            <summary>
            The margins to apply by default to each field in the composite
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.Builder.SkipLastItemMargin(System.Boolean)">
            <summary>
            If true, the defaultMargins are not applied to the last item in the composite field set (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.Builder.CombineErrors(System.Boolean)">
            <summary>
            True to combine errors from the individual fields into a single error message at the CompositeField level (defaults to true)
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.Builder.DoLayout">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.Builder.DoLayout(System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.CompositeField.Builder.DoLayout(System.Boolean,System.Boolean)">
            <summary>
            Force this container's layout to be recalculated. A call to this function is required after adding a new component to an already rendered container, or possibly after changing sizing/position properties of child components.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupTab.SetActiveTab(System.Int32)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupTab.SetActiveTab(Ext.Net.Component)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupTab.SetActiveTab(System.String)">
            <summary>
            Sets the specified tab as the active tab. This method fires the beforetabchange event which can return false to cancel the tab change.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ext.Net.GroupTab.SetMainItem(Ext.Net.Component)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.MainItem">
            <summary>
            The main item.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.Expanded">
            <summary>
            Expand the group.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.DeferredRender">
            <summary>
            Deferred Render
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.ActiveTab">
            <summary>
            Active tab
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.ActiveTabIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.IdDelimiter">
            <summary>
            Id Delimiter
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.HeaderAsText">
            <summary>
            Header as Text
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.Frame">
            <summary>
            Frame
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTab.HideBorders">
            <summary>
            Hide borders
            </summary>
        </member>
        <member name="P:Ext.Net.ListViewNumberColumn.Format">
            <summary>
            A formatting string as used by Ext.util.Format.number to format a numeric value for this Column (defaults to '0,000.00').
            </summary>
        </member>
        <member name="P:Ext.Net.ImageDirectEvents.Complete">
            <summary>
            Fires after the image is loaded.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageDirectEvents.ResizerResize">
            <summary>
            Fired after a resizer resize.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageDirectEvents.ResizerBeforeResize">
            <summary>
            Fired before resize is allowed. Set enabled to false to cancel resize.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageDirectEvents.Pan">
            <summary>
            Fired after a pan.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageDirectEvents.Click">
            <summary>
            Fired after a click.
            </summary>
        </member>
        <member name="P:Ext.Net.ImageDirectEvents.DblClick">
            <summary>
            Fired after a double click.
            </summary>
        </member>
        <member name="T:Ext.Net.Store">
             <summary>
             The Store class encapsulates a client side cache of Record objects which provide
             input data for Components such as the GridPanel, the ComboBox, or the DataView
             
             A Store object uses its configured implementation of DataProxy to access a data
             object unless you call loadData directly and pass in your data.
            
             A Store object has no knowledge of the format of the data returned by the Proxy.
            
             A Store object uses its configured implementation of DataReader to create Record
             instances from the data object. These Records are cached and made available through
             accessor functions.
             </summary>
        </member>
        <member name="P:Ext.Net.Store.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Store.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Store.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Store.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.ArrayReader">
            <summary>
            Data reader class to create an Array of Ext.data.Record objects from an Array.
            Each element of that Array represents a row of data fields. The fields are pulled
            into a Record object using as a subscript, the mapping property of the field
            definition if it exists, or the field's ordinal position in the definition.
            </summary>
        </member>
        <member name="P:Ext.Net.ArrayReader.IDProperty">
            <summary>
            [id] Name of the property within a row object that contains a record identifier value. Defaults to id
            </summary>
        </member>
        <member name="P:Ext.Net.ArrayReader.IDIndex">
            <summary>
            The subscript within row Array that provides an ID for the Record.
            </summary>
        </member>
        <member name="P:Ext.Net.ArrayReader.Config.IDProperty">
            <summary>
            [id] Name of the property within a row object that contains a record identifier value. Defaults to id
            </summary>
        </member>
        <member name="P:Ext.Net.ArrayReader.Config.IDIndex">
            <summary>
            The subscript within row Array that provides an ID for the Record.
            </summary>
        </member>
        <member name="M:Ext.Net.ArrayReader.Builder.IDProperty(System.String)">
            <summary>
            [id] Name of the property within a row object that contains a record identifier value. Defaults to id
            </summary>
        </member>
        <member name="M:Ext.Net.ArrayReader.Builder.IDIndex(System.Int32)">
            <summary>
            The subscript within row Array that provides an ID for the Record.
            </summary>
        </member>
        <member name="T:Ext.Net.FormPanel">
            <summary>
            Standard form container.
            </summary>
        </member>
        <member name="T:Ext.Net.FormPanelBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.StartMonitoring">
            <summary>
            Starts monitoring of the valid state of this form. Usually this is done by passing the config option "monitorValid"
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.StopMonitoring">
            <summary>
            Stops monitoring of the valid state of this form
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.ClearInvalid">
            <summary>
            Clears all invalid messages in this form.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.MarkInvalid(System.Object)">
            <summary>
            Mark fields in this form invalid in bulk.
            </summary>
            <param name="errors">An object hash of {id: msg, id2: msg2}</param>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Reset">
            <summary>
            Resets this form.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.SetValues(System.Object)">
            <summary>
            Set values for fields in this form in bulk.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.ApplyToFields(System.Object)">
            <summary>
            Calls Ext.apply for all fields in this form with the passed object.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.ApplyIfToFields(System.Object)">
            <summary>
            Calls Ext.applyIf for all fields in this form with the passed object.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.CallFieldMethod(System.String,System.Object[])">
            <summary>
            Calls required method for all fields in this form with the passed args.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.FormID">
            <summary>
            (optional) The id of the FORM tag (defaults to an auto-generated id).
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.ItemCls">
            <summary>
            A css class to apply to the x-form-item of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.MonitorPoll">
            <summary>
            The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.MonitorValid">
            <summary>
            If true the form monitors its valid state client-side and fires a looping event with that state. This is required to bind buttons to the valid state using the config value formBind:true on the button.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.RenderFormElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.BaseParams">
            <summary>
            Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.ErrorReader">
            <summary>
            An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data when reading validation errors on "submit" actions. This is completely optional as there is built-in support for processing JSON.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.FileUpload">
            <summary>
            Set to true if this form is a file upload.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Method">
            <summary>
            The HTTP method to use. Defaults to POST if params are present, or GET if not.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.MethodProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Reader">
            <summary>
            An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data when executing "load" actions. This is optional as there is built-in support for processing JSON.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.StandardSubmit">
            <summary>
            If set to true, standard HTML form submits are used instead of XHR (Ajax) style form submissions. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Timeout">
            <summary>
            Timeout for form actions in seconds (default is 30 seconds).
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.TrackResetOnLoad">
            <summary>
            If set to true, form.reset() resets to the last loaded or setValues() data instead of when the form was first created.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Url">
            <summary>
            The URL to use for form actions if one isn't supplied in the action options.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.UrlProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.ElementStyle">
            <summary>
            A CSS style specification string to add to each field element in this layout (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.TrackLabels">
            <summary>
            True to show/hide the field label when the field is hidden. Defaults to true. 
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.LayoutConfigProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Layout">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.FormID(System.String)">
            <summary>
            (optional) The id of the FORM tag (defaults to an auto-generated id).
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.ItemCls(System.String)">
            <summary>
            A css class to apply to the x-form-item of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.MonitorPoll(System.Int32)">
            <summary>
            The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.MonitorValid(System.Boolean)">
            <summary>
            If true the form monitors its valid state client-side and fires a looping event with that state. This is required to bind buttons to the valid state using the config value formBind:true on the button.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.RenderFormElement(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.FileUpload(System.Boolean)">
            <summary>
            Set to true if this form is a file upload.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.Method(Ext.Net.HttpMethod)">
            <summary>
            The HTTP method to use. Defaults to POST if params are present, or GET if not.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.StandardSubmit(System.Boolean)">
            <summary>
            If set to true, standard HTML form submits are used instead of XHR (Ajax) style form submissions. (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.Timeout(System.Int32)">
            <summary>
            Timeout for form actions in seconds (default is 30 seconds).
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.TrackResetOnLoad(System.Boolean)">
            <summary>
            If set to true, form.reset() resets to the last loaded or setValues() data instead of when the form was first created.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.Url(System.String)">
            <summary>
            The URL to use for form actions if one isn't supplied in the action options.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.ElementStyle(System.String)">
            <summary>
            A CSS style specification string to add to each field element in this layout (defaults to '').
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.Layout(System.String)">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.ClearInvalid">
            <summary>
            Clears all invalid messages in this form.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.MarkInvalid(System.Object)">
            <summary>
            Mark fields in this form invalid in bulk.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.Reset">
            <summary>
            Resets this form.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.SetValues(System.Object)">
            <summary>
            Set values for fields in this form in bulk.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.ApplyToFields(System.Object)">
            <summary>
            Calls Ext.apply for all fields in this form with the passed object.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.ApplyIfToFields(System.Object)">
            <summary>
            Calls Ext.applyIf for all fields in this form with the passed object.
            </summary>
        </member>
        <member name="M:Ext.Net.FormPanelBase.Builder`2.CallFieldMethod(System.String,System.Object[])">
            <summary>
            Calls required method for all fields in this form with the passed args.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.FormID">
            <summary>
            (optional) The id of the FORM tag (defaults to an auto-generated id).
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.ItemCls">
            <summary>
            A css class to apply to the x-form-item of fields. This property cascades to child containers.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.MonitorPoll">
            <summary>
            The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.MonitorValid">
            <summary>
            If true the form monitors its valid state client-side and fires a looping event with that state. This is required to bind buttons to the valid state using the config value formBind:true on the button.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.RenderFormElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.BaseParams">
            <summary>
            Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.ErrorReader">
            <summary>
            An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data when reading validation errors on \"submit\" actions. This is completely optional as there is built-in support for processing JSON.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.FileUpload">
            <summary>
            Set to true if this form is a file upload.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.Method">
            <summary>
            The HTTP method to use. Defaults to POST if params are present, or GET if not.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.Reader">
            <summary>
            An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data when executing \"load\" actions. This is optional as there is built-in support for processing JSON.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.StandardSubmit">
            <summary>
            If set to true, standard HTML form submits are used instead of XHR (Ajax) style form submissions. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.Timeout">
            <summary>
            Timeout for form actions in seconds (default is 30 seconds).
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.TrackResetOnLoad">
            <summary>
            If set to true, form.reset() resets to the last loaded or setValues() data instead of when the form was first created.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.Url">
            <summary>
            The URL to use for form actions if one isn't supplied in the action options.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.ElementStyle">
            <summary>
            A CSS style specification string to add to each field element in this layout (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanelBase.Config.Layout">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FormPanel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.XTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Append(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and appends the new node(s) to el.
            </summary>
            <param name="target">The context element</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.Append(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and appends the new node(s) to el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.Append(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and appends the new node(s) to el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertAfter(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            </summary>
            <param name="target">The context element</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertAfter(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertAfter(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertBefore(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            </summary>
            <param name="target">The context element</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertBefore(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertBefore(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertFirst(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            </summary>
            <param name="target">The context element</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertFirst(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.InsertFirst(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.Overwrite(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            </summary>
            <param name="target">The context element</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.Overwrite(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            </summary>
            <param name="target">The context element</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="M:Ext.Net.XTemplate.Overwrite(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            </summary>
            <param name="target">A ContentPanel whose body will be updated.</param>
            <param name="data">The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</param>
        </member>
        <member name="P:Ext.Net.XTemplate.Html">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.XTemplate.Config.Html">
            <summary>
            Template text
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Html(System.String)">
            <summary>
            Template text
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Append(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and appends the new node(s) to el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Append(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and appends the new node(s) to el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Append(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and appends the new node(s) to el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertAfter(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertAfter(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertAfter(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) after el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertBefore(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertBefore(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertBefore(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) before el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertFirst(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertFirst(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.InsertFirst(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and inserts the new node(s) as the first child of el.
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Overwrite(System.String,System.Object)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Overwrite(Ext.Net.Element,System.Object)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            </summary>
        </member>
        <member name="M:Ext.Net.XTemplate.Builder.Overwrite(Ext.Net.ContentPanel,System.Object)">
            <summary>
            Applies the supplied values to the template and overwrites the content of el with the new node(s).
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBarPager.ProgBarWidth">
            <summary>
            The default progress bar width.  Default is 225.
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBarPager.DefaultText">
            <summary>
            The text to display while the store is loading.  Default is 'Loading...'
            </summary>
        </member>
        <member name="T:Ext.Net.Portlet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.Portlet.Collapsible">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Portlet.Draggable">
            <summary>
            True to enable dragging of this Panel (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Portlet.Config.Collapsible">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.Portlet.Config.Draggable">
            <summary>
            True to enable dragging of this Panel (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Portlet.Builder.Collapsible(System.Boolean)">
            <summary>
            True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.Portlet.Builder.Draggable(System.Boolean)">
            <summary>
            True to enable dragging of this Panel (defaults to false).
            </summary>
        </member>
        <member name="T:Ext.Net.DragSource">
            <summary>
            A simple class that provides the basic implementation needed to make any element draggable.
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.Group">
            <summary>
            A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined).
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.DropAllowed">
            <summary>
            The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.DropNotAllowed">
            <summary>
            The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.AfterDragDrop">
            <summary>
            An empty function by default, but provided so that you can perform a custom action after a valid drag drop has occurred by providing an implementation.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dropped element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.AfterDragEnter">
            <summary>
            An empty function by default, but provided so that you can perform a custom action when the dragged item enters the drop target by providing an implementation.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.AfterDragOut">
            <summary>
            An empty function by default, but provided so that you can perform a custom action after the dragged item is dragged out of the target without dropping.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.AfterDragOver">
            <summary>
            An empty function by default, but provided so that you can perform a custom action while the dragged item is over the drop target by providing an implementation.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.AfterInvalidDrop">
            <summary>
            An empty function by default, but provided so that you can perform a custom action after an invalid drop has occurred by providing an implementation.
            Parameters:
                e      : The mouseup event
                id     : The id of the dropped element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.BeforeDragDrop">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the dragged item is dropped onto the target and optionally cancel the onDragDrop.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.BeforeDragEnter">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the dragged item enters the drop target and optionally cancel the onDragEnter.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.BeforeDragOut">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the dragged item is dragged out of the target without dropping, and optionally cancel the onDragOut.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.BeforeDragOver">
            <summary>
            An empty function by default, but provided so that you can perform a custom action while the dragged item is over the drop target and optionally cancel the onDragOver.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dragged element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.BeforeInvalidDrop">
            <summary>
            An empty function by default, but provided so that you can perform a custom action after an invalid drop has occurred.
            Parameters:
                target : The drop target
                e      : The mouseup event
                id     : The id of the dropped element
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.OnBeforeDrag">
            <summary>
            An empty function by default, but provided so that you can perform a custom action before the initial drag event begins and optionally cancel it.
            Parameters:
                data   : An object containing arbitrary data to be shared with drop targets
                e      : The event object
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.OnStartDrag">
            <summary>
            An empty function by default, but provided so that you can perform a custom action once the initial drag event has begun. The drag cannot be canceled from this function.
            Parameters:
                x   : The x position of the click on the dragged object
                y   : The y position of the click on the dragged object
            </summary>
        </member>
        <member name="P:Ext.Net.DragSource.GetDragData">
            <summary>
            Returns the data object associated with this drag source
            </summary>
        </member>
        <member name="P:Ext.Net.CycleButtonDirectEvents.Change">
            <summary>
            Fires after the button's active menu items has changed. Note that if a changeHandler function is set on this CycleButton, it will be called instead on active items change and this change event will not be fired.
            </summary>
        </member>
        <member name="T:Ext.Net.CommandFill">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterListeners.Click">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterListeners.LeftClick">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterListeners.MiddleClick">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterListeners.RightClick">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterListeners.MouseDown">
            <summary>
            Fires when the mouse button is depressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterListeners.MouseUp">
            <summary>
            Fires when the mouse key is released.
            </summary>
        </member>
        <member name="M:Ext.Net.WindowManager.BringToFront(System.String)">
            <summary>
            Brings the specified window to the front of any other active windows.
            </summary>
            <param name="windowID">The id of the window</param>
            <returns>WindowMgr</returns>
        </member>
        <member name="M:Ext.Net.WindowManager.BringToFront(Ext.Net.WindowBase)">
            <summary>
            Brings the specified window to the front of any other active windows.
            </summary>
            <param name="window">Window</param>
            <returns>WindowMgr</returns>
        </member>
        <member name="M:Ext.Net.WindowManager.HideAll">
            <summary>
            Hides all windows in the group.
            </summary>
            <returns>WindowMgr</returns>
        </member>
        <member name="M:Ext.Net.WindowManager.SendToBack(System.String)">
            <summary>
            Sends the specified window to the back of other active windows.
            </summary>
            <param name="windowID">The id of the window</param>
            <returns>WindowMgr</returns>
        </member>
        <member name="M:Ext.Net.WindowManager.SendToBack(Ext.Net.WindowBase)">
            <summary>
            Sends the specified window to the back of other active windows.
            </summary>
            <param name="window">Window</param>
            <returns>WindowMgr</returns>
        </member>
        <member name="T:Ext.Net.TabScrollerMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabScrollerMenu.PageSize">
            <summary>
            The page size.
            </summary>
        </member>
        <member name="P:Ext.Net.TabScrollerMenu.MaxText">
            <summary>
            The maximum text length to truncate.
            </summary>
        </member>
        <member name="P:Ext.Net.TabScrollerMenu.MenuPrefixText">
            <summary>
            Menu prefix text.
            </summary>
        </member>
        <member name="M:Ext.Net.TabScrollerMenu.Builder.PageSize(System.Int32)">
            <summary>
            The page size.
            </summary>
        </member>
        <member name="M:Ext.Net.TabScrollerMenu.Builder.MaxText(System.Int32)">
            <summary>
            The maximum text length to truncate.
            </summary>
        </member>
        <member name="M:Ext.Net.TabScrollerMenu.Builder.MenuPrefixText(System.String)">
            <summary>
            Menu prefix text.
            </summary>
        </member>
        <member name="P:Ext.Net.TabScrollerMenu.Config.PageSize">
            <summary>
            The page size.
            </summary>
        </member>
        <member name="P:Ext.Net.TabScrollerMenu.Config.MaxText">
            <summary>
            The maximum text length to truncate.
            </summary>
        </member>
        <member name="P:Ext.Net.TabScrollerMenu.Config.MenuPrefixText">
            <summary>
            Menu prefix text.
            </summary>
        </member>
        <member name="T:Ext.Net.SpinnerField">
            <summary>
            Spinner Field
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Spin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Spin(System.Boolean)">
            <summary>
            
            </summary>
            <param name="down"></param>
        </member>
        <member name="M:Ext.Net.SpinnerField.Spin(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="down"></param>
            <param name="alternate"></param>
        </member>
        <member name="M:Ext.Net.SpinnerField.FixBoundries(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ext.Net.SpinnerField.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.XType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.DeferHeight">
            <summary>
            Increment Value
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.IncrementValue">
            <summary>
            Increment Value
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.AlternateIncrementValue">
            <summary>
            Alerternate Increment Value
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.TriggerClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.SplitterClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Accelerate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.DeferHeight">
            <summary>
            Increment Value
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.IncrementValue">
            <summary>
            Increment Value
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.AlternateIncrementValue">
            <summary>
            Alerternate Increment Value
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.TriggerClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.SplitterClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.Accelerate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.SpinnerField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.DeferHeight(System.Boolean)">
            <summary>
            Increment Value
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.IncrementValue(System.Double)">
            <summary>
            Increment Value
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.AlternateIncrementValue(System.Double)">
            <summary>
            Alerternate Increment Value
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.TriggerClass(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.SplitterClass(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.DefaultValue(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.Accelerate(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.Spin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.Spin(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.Spin(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SpinnerField.Builder.FixBoundries(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorListeners.AfterEdit">
            <summary>
            Fired after a row is edited and passes validation.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorListeners.BeforeEdit">
            <summary>
            Fired before the row editor is activated.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorListeners.CancelEdit">
            <summary>
            Fired when the editor is cancelled.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorListeners.ValidateEdit">
            <summary>
            Fired after a row is edited and passes validation.
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditorListeners.PreEdit">
            <summary>
            Fired for each field's value.
            </summary>
        </member>
        <member name="T:Ext.Net.MonthPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.FlashComponent">
            <summary>
            A Flash Component
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.BackgroundColor">
            <summary>
            The background color. Defaults to '#ffffff' (white).
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.ExpressInstall">
            <summary>
            True to prompt the user to install flash if not installed. Note that this uses Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.FlashVersion">
            <summary>
            Indicates the version the flash content was published for. Defaults to '9.0.45'.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Url">
            <summary>
            The URL of the swf object to include. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.FlashVars">
            <summary>
            A set of key value pairs to be passed to the flash object as flash variables.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.FlashParams">
            <summary>
            A set of key value pairs to be passed to the flash object as parameters.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.BackgroundColor">
            <summary>
            The background color. Defaults to '#ffffff' (white).
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.ExpressInstall">
            <summary>
            True to prompt the user to install flash if not installed. Note that this uses Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.FlashVersion">
            <summary>
            Indicates the version the flash content was published for. Defaults to '9.0.45'.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.Url">
            <summary>
            The URL of the swf object to include. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.FlashVars">
            <summary>
            A set of key value pairs to be passed to the flash object as flash variables.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.FlashParams">
            <summary>
            A set of key value pairs to be passed to the flash object as parameters.
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.FlashComponent.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.FlashComponent.Builder.BackgroundColor(System.String)">
            <summary>
            The background color. Defaults to '#ffffff' (white).
            </summary>
        </member>
        <member name="M:Ext.Net.FlashComponent.Builder.ExpressInstall(System.Boolean)">
            <summary>
            True to prompt the user to install flash if not installed. Note that this uses Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.FlashComponent.Builder.FlashVersion(System.String)">
            <summary>
            Indicates the version the flash content was published for. Defaults to '9.0.45'.
            </summary>
        </member>
        <member name="M:Ext.Net.FlashComponent.Builder.Url(System.String)">
            <summary>
            The URL of the swf object to include. Defaults to undefined.
            </summary>
        </member>
        <member name="P:Ext.Net.DataView.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DataView.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DataView.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DataView.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.RestActions">
            <summary>
            Defined {CRUD action}:{HTTP method} pairs to associate HTTP methods with the corresponding actions for RESTful proxies.
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.AutoHide">
            <summary>
            True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.Cls">
            <summary>
            An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules.
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.Text">
            <summary>
            Tooltip text
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.Title">
            <summary>
            Tooltip title
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.DismissDelay">
            <summary>
            Delay in milliseconds before the tooltip automatically hides (defaults to 5000). To disable automatic hiding, set dismissDelay = 0.
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.Width">
            <summary>
            Tooltip width
            </summary>
        </member>
        <member name="P:Ext.Net.QTipCfg.Target">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="P:Ext.Net.CardLayoutConfig.DeferredRender">
            <summary>
            True to render each contained item at the time it becomes active, false to render all contained items as soon as the layout is rendered (defaults to false). If there is a significant amount of content or a lot of heavy controls being rendered into panels that are not displayed by default, setting this to true might improve performance.
            </summary>
        </member>
        <member name="P:Ext.Net.CardLayoutConfig.LayoutOnCardChange">
            <summary>
            True to force a layout of the active item when the active card is changed. Defaults to false.
            </summary>
        </member>
        <member name="T:Ext.Net.SplitButton">
            <summary>
            A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event of the button. Typically this would be used to display a dropdown menu that provides additional options to the primary button action, but any custom handler can provide the arrowclick implementation.
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButton.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButton.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButton.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.SplitButton.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.DropDownField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownField.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownField.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownField.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DropDownField.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.ColumnModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Serialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ColumnModel.CallColumnModel(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.ColumnModel.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Moves a column from one position to another.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetColumnHeader(System.Int32,System.String)">
            <summary>
            Sets the header for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetColumnTooltip(System.Int32,System.String)">
            <summary>
            Sets the tooltip for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the width for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetDataIndex(System.Int32,System.String)">
            <summary>
            Sets the dataIndex for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetEditable(System.Int32,System.Boolean)">
            <summary>
            Sets if a column is editable.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetEditor(System.Int32,Ext.Net.Field)">
            <summary>
            Sets the editor for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetEditor(System.Int32,Ext.Net.Field,Ext.Net.GridEditorOptions)">
            <summary>
            Sets the editor for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetHidden(System.Int32,System.Boolean)">
            <summary>
            Sets if a column is hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetLocked(System.Int32,System.Boolean)">
            <summary>
            Sets if a column is locked.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetLocked(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets if a column is locked.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.SetRenderer(System.Int32,Ext.Net.Renderer)">
            <summary>
            Sets the rendering (formatting) function for a column. See Ext.util.Format for some default formatting functions.
            Parameters:
                col : Number
                    The column index
                fn : Function
                    The function to use to process the cell's raw data to return HTML markup for the grid view. 
                    The render function is called with the following parameters:
                        value : Object
                            The data value for the cell.
                        metadata : Object
                            An object in which you may set the following attributes:
                                css : String
                                    A CSS class name to add to the cell's TD element.
                                attr : String
                                    An HTML attribute definition string to apply to the data container element within the table cell (e.g. 'style="color:red;"').
                        record : Ext.data.record
                            The Ext.data.Record from which the data was extracted.
                        rowIndex : Number
                            Row index
                        colIndex : Number
                            Column index
                        store : Ext.data.Store
                            The Ext.data.Store object from which the Record was extracted.
                Returns:
                    void
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.RegisterCommandStyleRules">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.ParentGrid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.DefaultSortable">
            <summary>
            Default sortable of columns which have no sortable specified (defaults to false). This property shall preferably be configured through the defaults config property.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.DefaultWidth">
            <summary>
            The width of columns which have no width specified (defaults to 100). This property shall preferably be configured through the defaults config property.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Defaults">
            <summary>
            Object literal which will be used to apply Ext.grid.Column configuration options to all columns. Configuration options specified with individual column configs will supersede these defaults.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Columns">
            <summary>
            The columns to use when rendering the grid (required).
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.DefaultSortable(System.Boolean)">
            <summary>
            Default sortable of columns which have no sortable specified (defaults to false). This property shall preferably be configured through the defaults config property.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.DefaultWidth(System.Int32)">
            <summary>
            The width of columns which have no width specified (defaults to 100). This property shall preferably be configured through the defaults config property.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Moves a column from one position to another.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetColumnHeader(System.Int32,System.String)">
            <summary>
            Sets the header for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetColumnTooltip(System.Int32,System.String)">
            <summary>
            Sets the tooltip for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the width for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetDataIndex(System.Int32,System.String)">
            <summary>
            Sets the dataIndex for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetEditable(System.Int32,System.Boolean)">
            <summary>
            Sets if a column is editable.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetEditor(System.Int32,Ext.Net.Field)">
            <summary>
            Sets the editor for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetEditor(System.Int32,Ext.Net.Field,Ext.Net.GridEditorOptions)">
            <summary>
            Sets the editor for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetHidden(System.Int32,System.Boolean)">
            <summary>
            Sets if a column is hidden.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetLocked(System.Int32,System.Boolean)">
            <summary>
            Sets if a column is locked.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetLocked(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets if a column is locked.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.SetRenderer(System.Int32,Ext.Net.Renderer)">
            <summary>
            Sets the rendering (formatting) function for a column.
            </summary>
        </member>
        <member name="M:Ext.Net.ColumnModel.Builder.RegisterCommandStyleRules">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Config.DefaultSortable">
            <summary>
            Default sortable of columns which have no sortable specified (defaults to false). This property shall preferably be configured through the defaults config property.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Config.DefaultWidth">
            <summary>
            The width of columns which have no width specified (defaults to 100). This property shall preferably be configured through the defaults config property.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Config.Defaults">
            <summary>
            Object literal which will be used to apply Ext.grid.Column configuration options to all columns. Configuration options specified with individual column configs will supersede these defaults.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Config.Columns">
            <summary>
            The columns to use when rendering the grid (required).
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnModel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.Extensions.ToElement(System.Web.UI.Control)">
            <new date="2010-01-04" owner="geoff" key="Control">
            Added new .ToElement() Extension Method to Control which enables the easy explicit conversion
            of Control objects into Ext.Net.Element objects. Once converted into an Element, effect can be run against
            the Element, including .Show(), .Hide() and many other Animations. Method chaining default is "true".
            </new>
        </member>
        <member name="M:Ext.Net.Extensions.ToElement(System.Web.UI.Control,System.Boolean)">
            <new date="2010-01-30" owner="geoff" key="Control">
            Added extra chaining parameter to .ToElement() Extension Method. Default is "true".
            </new>
        </member>
        <member name="T:Ext.Net.ListView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.SetColumnHeader(System.Int32,System.String)">
            <summary>
            Sets the header for a column.
            </summary>
            <param name="index">The column index</param>
            <param name="header">The new header</param>
        </member>
        <member name="M:Ext.Net.ListView.SetColumnHeader(System.String,System.String)">
            <summary>
            Sets the header for a column.
            </summary>
            <param name="dataIndex">The column data index</param>
            <param name="header">The new header</param>
        </member>
        <member name="P:Ext.Net.ListView.ColumnResize">
            <summary>
            Specify true to enable the columns to be resizable (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.MinPct">
            <summary>
            The minimum percentage to allot for any column (defaults to .05)
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.ColumnSort">
            <summary>
            Specify true to enable the columns to be sortable (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Columns">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.HideHeaders">
            <summary>
            true to hide the header row (defaults to false so the header row will be shown).
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.ReserveScrollOffset">
            <summary>
            By default will defer accounting for the configured scrollOffset for 10 milliseconds. Specify true to account for the configured scrollOffset immediately.
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to 19 pixels)
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.OverClass">
            <summary>
            The CSS class applied when over a row (defaults to 'x-list-over').
            An example overriding the default styling:
            .x-list-over {background-color: orange;}
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.SelectedClass">
            <summary>
            The CSS class applied to a selected row (defaults to 'x-list-selected'). An example overriding the default styling:
            .x-list-selected {background-color: yellow;}
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.DisableHeaders">
            <summary>
            Set this property to true to disable the header click handler disabling sort (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.ColumnResize(System.Boolean)">
            <summary>
            Specify true to enable the columns to be resizable (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.MinPct(System.Double)">
            <summary>
            The minimum percentage to allot for any column (defaults to .05)
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.ColumnSort(System.Boolean)">
            <summary>
            Specify true to enable the columns to be sortable (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.HideHeaders(System.Boolean)">
            <summary>
            true to hide the header row (defaults to false so the header row will be shown).
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.ReserveScrollOffset(System.Boolean)">
            <summary>
            By default will defer accounting for the configured scrollOffset for 10 milliseconds. Specify true to account for the configured scrollOffset immediately.
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.ScrollOffset(System.Int32)">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to 19 pixels)
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.OverClass(System.String)">
            <summary>
            The CSS class applied when over a row (defaults to 'x-list-over').
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.SelectedClass(System.String)">
            <summary>
            The CSS class applied to a selected row (defaults to 'x-list-selected'). 
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.DisableHeaders(System.Boolean)">
            <summary>
            Set this property to true to disable the header click handler disabling sort (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ListView.Builder.Items(System.Action{Ext.Net.ListViewColumnCollectionBuilder{Ext.Net.ListView,Ext.Net.ListView.Builder}})">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.ColumnResize">
            <summary>
            Specify true to enable the columns to be resizable (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.MinPct">
            <summary>
            The minimum percentage to allot for any column (defaults to .05)
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.ColumnSort">
            <summary>
            Specify true to enable the columns to be sortable (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.Columns">
            <summary>
            An array of column configuration objects
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.HideHeaders">
            <summary>
            true to hide the header row (defaults to false so the header row will be shown).
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.ReserveScrollOffset">
            <summary>
            By default will defer accounting for the configured scrollOffset for 10 milliseconds. Specify true to account for the configured scrollOffset immediately.
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.ScrollOffset">
            <summary>
            The amount of space to reserve for the scrollbar (defaults to 19 pixels)
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.OverClass">
            <summary>
            The CSS class applied when over a row (defaults to 'x-list-over').
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.SelectedClass">
            <summary>
            The CSS class applied to a selected row (defaults to 'x-list-selected'). 
            </summary>
        </member>
        <member name="P:Ext.Net.ListView.Config.DisableHeaders">
            <summary>
            Set this property to true to disable the header click handler disabling sort (defaults to false).
            </summary>
        </member>
        <member name="T:Ext.Net.ScriptPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.SortDirection.ASC">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:Ext.Net.SortDirection.DESC">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Ext.Net.JSONDateTimeJsonConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53) using the server
            time. Does not adjust for timezone.
            </summary>
        </member>
        <member name="M:Ext.Net.JSONDateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ext.Net.JSONDateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Ext.Net.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Ext.Net.JSONDateTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Ext.Net.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Parameter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Parameter.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Parameter.#ctor(System.String,System.String,Ext.Net.ParameterMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Parameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Parameter.#ctor(System.String,System.String,Ext.Net.ParameterMode,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerDirectEvents.DocumentReady">
            <summary>
            Fires when the document is ready (before onload and before images are loaded). Can be accessed shorthanded as Ext.onReady().
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerDirectEvents.TextResize">
            <summary>
            Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerDirectEvents.WindowResize">
            <summary>
            Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerDirectEvents.WindowUnload">
            <summary>
            Fires when the browser window is unloaded. Return 'true' to prompt the message, or 'false' to cancel the unload.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerDirectEvents.WindowScroll">
            <summary>
            Fires when the browser window is scrolled.
            </summary>
        </member>
        <member name="P:Ext.Net.ProgressBarListeners.Update">
            <summary>
            Fires after each update interval
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Title">
            <summary>
            The title text
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.AnimEl">
            <summary>
            An id or Element from which the message box should animate as it opens and closes (defaults to undefined)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Buttons">
            <summary>
            A buttons kind, or NONE to not show any buttons (defaults to NONE)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.MessageBoxButtonsConfig">
            <summary>
            A buttons kind, or NONE to not show any buttons (defaults to NONE)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Closable">
            <summary>
            False to hide the top-right close button (defaults to true). Note that progress and wait dialogs will ignore this property and always hide the close button as they can only be closed programmatically.
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Cls">
            <summary>
            A custom CSS class to apply to the message box's container element
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.MultilineHeight">
            <summary>
            The height in pixels to create the textbox
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Handler">
            <summary>
            A callback function which is called when the dialog is dismissed either by clicking on the configured buttons, or on the dialog close button, or by pressing the return button to enter input.
            Progress and wait dialogs will ignore this option since they do not respond to user actions and can only be closed programmatically, so any required function should be called by the same code after it closes the dialog. Parameters passed:
                buttonId : String
                    The ID of the button pressed, one of:
                        ok
                        yes
                        no
                        cancel
                text : String
                    Value of the input field if either prompt or multiline is true
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Fn">
            <summary>
            A callback function which is called when the dialog is dismissed either by clicking on the configured buttons, or on the dialog close button, or by pressing the return button to enter input.
            Progress and wait dialogs will ignore this option since they do not respond to user actions and can only be closed programmatically, so any required function should be called by the same code after it closes the dialog. Parameters passed:
                buttonId : String
                    The ID of the button pressed, one of:
                        ok
                        yes
                        no
                        cancel
                text : String
                    Value of the input field if either prompt or multiline is true
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Scope">
            <summary>
            The scope of the callback function
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Icon">
            <summary>
            A CSS class that provides a background image to be used as the body icon for the dialog (e.g. Ext.MessageBox.WARNING or 'custom-class') (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.IconCls">
            <summary>
            A CSS class that provides a background image
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.HeaderIcon">
            <summary>
            The standard Ext.Window.iconCls to add an optional header icon (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.HeaderIconCls">
            <summary>
            The standard Ext.Window.iconCls to add an optional header icon (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.MaxWidth">
            <summary>
            The maximum width in pixels of the message box (defaults to 600)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.MinWidth">
            <summary>
            The minimum width in pixels of the message box (defaults to 100)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Modal">
            <summary>
            False to allow user interaction with the page while the message box is displayed (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Message">
            <summary>
            A string that will replace the existing message box body text (defaults to the XHTML-compliant non-breaking space character '&#160;')
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Multiline">
            <summary>
            True to prompt the user to enter multi-line text (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Progress">
            <summary>
            True to display a progress bar (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.ProgressText">
            <summary>
            The text to display inside the progress bar if progress = true (defaults to '')
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Prompt">
            <summary>
            True to prompt the user to enter single-line text (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.ProxyDrag">
            <summary>
            True to display a lightweight proxy while dragging (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Value">
            <summary>
            The string value to set into the active textbox element if displayed
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Wait">
            <summary>
            True to display a progress bar (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.WaitConfig">
            <summary>
            A WaitConfig object (applies only if Wait = true)
            </summary>
        </member>
        <member name="P:Ext.Net.MessageBoxConfig.Width">
            <summary>
            The width of the dialog in pixels
            </summary>
        </member>
        <member name="T:Ext.Net.EditorAlignmentConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.EditorAlignmentConfig.ElementAnchor">
            <summary>
            Element anchor point
            </summary>
        </member>
        <member name="P:Ext.Net.EditorAlignmentConfig.TargetAnchor">
            <summary>
            Target anchor point
            </summary>
        </member>
        <member name="P:Ext.Net.EditorAlignmentConfig.ConstrainViewport">
            <summary>
             The editor will attempt to align as specified, but the position will be adjusted to constrain to the viewport if necessary
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxDirectEvents.Check">
            <summary>
            Fires when the Checkbox is checked or unchecked.
            </summary>
        </member>
        <member name="T:Ext.Net.DirectEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.DirectEventArgs.#ctor(Ext.Net.ParameterCollection)">
            <summary>
            
            </summary>
            <param name="extraParams"></param>
        </member>
        <member name="P:Ext.Net.DirectEventArgs.ExtraParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventArgs.ExtraParamsResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventArgs.Success">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DirectEventArgs.ErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.MultiSelectMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.MultiSelectMode.Checkbox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.MultiSelectMode.Selection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.MultiSelectMode.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.FitLayout">
            <summary>
            This is a base class for layouts that contain a single items that automatically expands to fill the layout's content Container. This class is intended to be extended or created via the layout:'fit' Ext.Container.layout config, and should generally not need to be created directly via the new keyword. FitLayout does not have any direct config options (other than inherited ones). To fit a panel to a content Container using FitLayout, simply set layout:'fit' on the content Container and add a single panel to it. If the content Container has multiple panels, only the first one will be displayed.
            </summary>
        </member>
        <member name="T:Ext.Net.Container">
            <summary>
            Base class for any Ext.BoxComponent that may contain other Components. Containers handle the basic behavior of containing items, namely adding, inserting and removing items.
            </summary>
        </member>
        <member name="P:Ext.Net.Container.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Container.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Container.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Container.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Scope">
            <summary>
            The scope in which to execute the handler function. The handler function's 'this' context.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Delegate">
            <summary>
            A simple selector to filter the target or look for a descendant of the target.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.StopEvent">
            <summary>
            True to stop the event. That is stop propagation, and prevent the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.PreventDefault">
            <summary>
            True to prevent the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.StopPropagation">
            <summary>
            True to prevent event propagation.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Normalized">
            <summary>
            False to pass a browser event to the handler function instead of an Ext.EventObject.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Delay">
            <summary>
            The number of milliseconds to delay the invocation of the handler after the event fires.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Single">
            <summary>
            True to add a handler to handle just the next firing of the event, and then remove itself.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Buffer">
            <summary>
            Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Args">
            <summary>
            Custom arguments passed to event handler.
            </summary>
        </member>
        <member name="P:Ext.Net.HandlerConfig.Target">
            <summary>
            Only call the handler if the event was fired on the target Observable, not if the event was bubbled up from a child Observable.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.ActiveOnTop">
            <summary>
            True to swap the position of each panel as it is expanded so that it becomes the first item in the container, false to keep the panels in the rendered order. This is NOT compatible with Animate="true" (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.OriginalHeader">
            <summary>
            If true then original header UI is used.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.Animate">
            <summary>
            True to slide the contained panels open and closed during expand/collapse using animation, false to open and close directly with no animation (defaults to false). Note: to defer to the specific config setting of each contained panel for this property, set this to undefined at the layout level.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.AutoWidth">
            <summary>
            True to set each contained item's width to 'auto', false to use the item's current width (defaults to true). Note that some components, in particular the grid, will not function properly within layouts if they have auto width, so in such cases this config should be set to false.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.CollapseFirst">
            <summary>
            True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the contained panels' title bars, false to render it last (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.Fill">
            <summary>
            True to adjust the active item's height to fill the available space in the container, false to use the item's current height, or auto height if not explicitly set (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.HideCollapseTool">
            <summary>
            True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false). When set to true, titleCollapse should be true also.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.Sequence">
            <summary>
            Experimental. If animate is set to true, this will result in each animation running in sequence.
            </summary>
        </member>
        <member name="P:Ext.Net.AccordionLayoutConfig.TitleCollapse">
            <summary>
            True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow expand/collapse only when the toggle tool button is clicked (defaults to true). When set to false, hideCollapseTool should be false also.
            </summary>
        </member>
        <member name="T:Ext.Net.RadioColumn">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Radio">
            <summary>
            Single radio field. Can be used as a direct replacement for traditional Radio controls.
            </summary>
        </member>
        <member name="P:Ext.Net.Radio.GroupName">
            <summary>
            The field's HTML name attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.Radio.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Radio.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.Radio.CheckedChanged">
            <summary>
            Fires when the Checked property has been changed
            </summary>
        </member>
        <member name="E:Ext.Net.Radio.DirectCheck">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="M:Ext.Net.Radio.Builder.GroupName(System.String)">
            <summary>
            The field's HTML name attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.Radio.Config.GroupName">
            <summary>
            The field's HTML name attribute.
            </summary>
        </member>
        <member name="P:Ext.Net.Radio.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.Radio.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RadioColumn.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.RadioColumn.Config.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayoutConfig.TrackLabels">
            <summary>
            True to show/hide the field label when the field is hidden. Defaults to true. 
            </summary>
        </member>
        <member name="T:Ext.Net.ElementAnimationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ElementAnimationProperty.By">
            <summary>
            relative change - start at current value, change by this value
            </summary>
        </member>
        <member name="P:Ext.Net.ElementAnimationProperty.From">
            <summary>
            ignore current value, start from this value
            </summary>
        </member>
        <member name="P:Ext.Net.ElementAnimationProperty.To">
            <summary>
            start at current value, go to this value
            </summary>
        </member>
        <member name="P:Ext.Net.ElementAnimationProperty.Unit">
            <summary>
            any allowable unit specification
            </summary>
        </member>
        <member name="T:Ext.Net.LazyMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.LazyMode.Inherit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.LazyMode.Config">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.LazyMode.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.DropDownMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DropDownMode.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DropDownMode.ValueText">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ExtNet">
            <summary>
            Ext core utilities and functions.
            </summary>
        </member>
        <member name="M:Ext.Net.ExtNet.Apply(System.Object,System.Object)">
            <summary>
            Copies all the properties of config to obj.
            </summary>
            <param name="obj">The receiver of the properties</param>
            <param name="config">The source of the properties</param>
            <returns>obj</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Apply``1(System.Object,System.Object)">
            <summary>
            Copies all the properties of config to obj.
            </summary>
            <typeparam name="T">The Type of the obj param.</typeparam>
            <param name="obj">The receiver of the properties</param>
            <param name="config">The source of the properties</param>
            <returns>obj as T</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Redirect(System.String)">
            <summary>
            Redirects a client to a new Url.
            </summary>
            <param name="url">The location of the target.</param>
        </member>
        <member name="M:Ext.Net.ExtNet.Redirect(System.String,System.String)">
            <summary>
            Redirects a client to a new Url.
            </summary>
            <param name="url">The location of the target.</param>
            <param name="msg">The message to display in the loading mask which is rendered during the Redirect.</param>
        </member>
        <member name="M:Ext.Net.ExtNet.Redirect(System.String,System.String,System.String)">
            <summary>
            Redirects a client to a new Url.
            </summary>
            <param name="url">The location of the target.</param>
            <param name="msg">The message to display in the load mask which is rendered during the Redirect.</param>
            <param name="msgCls">A custom css class to apply to the load mask element.</param>
        </member>
        <member name="M:Ext.Net.ExtNet.GetCtl(System.String)">
            <summary>
            Get the Control with the specified id.
            </summary>
            <param name="id">The ID of the Control to find.</param>
            <returns>Control</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.GetCtl``1(System.String)">
            <summary>
            Get the Control with the specified id.
            </summary>
            <typeparam name="T">The Type control to return</typeparam>
            <param name="id">The ID of the Control to find.</param>
            <returns>Control</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.GetCmp(System.String)">
            <summary>
            Returns a Component by id.
            </summary>
            <param name="id">The Component id</param>
            <returns>The Component, or throws ArgumentNullException if not found</returns>        [Description("")]
        </member>
        <member name="M:Ext.Net.ExtNet.GetCmp``1(System.String)">
            <summary>
            Returns a Component by id.
            </summary>
            <param name="id">The Component id</param>
            <typeparam name="T">The Type of Component to return.</typeparam>
            <returns>The Component, or throws ArgumentNullException if not found</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Get(System.Web.UI.Control)">
            <summary>
            Retrieves Ext.Element objects.
            This method does not retrieve Components. This method retrieves Ext.Element objects which encapsulate DOM elements.
            Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with the same id via AJAX or DOM.
            </summary>
            <param name="control">The Control to get as an Element object.</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Get(System.String)">
            <summary>
            Retrieves Ext.Element objects.
            This method does not retrieve Components. This method retrieves Ext.Element objects which encapsulate DOM elements.
            Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with the same id via AJAX or DOM.
            </summary>
            <param name="id">The id of the node</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Fly(System.String)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element - the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
            Use this to make one-time references to DOM elements which are not going to be accessed again either by application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get will be more appropriate to take advantage of the caching provided by the Ext.Element class.
            </summary>
            <param name="id">The id of the node</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Fly(System.String,System.String)">
            <summary>
            Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element - the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
            Use this to make one-time references to DOM elements which are not going to be accessed again either by application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get will be more appropriate to take advantage of the caching provided by the Ext.Element class.
            </summary>
            <param name="id">The id of the node</param>
            <param name="named">Allows for creation of named reusable flyweights to prevent conflicts</param>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Body">
            <summary>
            Returns the current document body as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Form">
            <summary>
            Returns the current ASP.NET form as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Document">
            <summary>
            Returns the current HTML document object as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Head">
            <summary>
            Returns the current HTML head object as an Ext.Element.
            </summary>
            <returns>Element</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Select(System.String,System.Boolean,System.String)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in one statement
            </summary>
            <param name="selector">The CSS selector or an array of elements</param>
            <param name="unique">true to create a unique Ext.Element for each element (defaults to a shared flyweight object)</param>
            <param name="root">id of the root</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Select(System.String,System.Boolean)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in one statement
            </summary>
            <param name="selector">The CSS selector or an array of elements</param>
            <param name="unique">true to create a unique Ext.Element for each element (defaults to a shared flyweight object)</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Select(System.String)">
            <summary>
            Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in one statement
            </summary>
            <param name="selector">The CSS selector or an array of elements</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.SingleSelect(System.String)">
            <summary>
            Selects first element based on the passed CSS selector
            </summary>
            <param name="selector">The CSS selector</param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.SingleSelect(System.String,System.Boolean)">
            <summary>
            Selects first element based on the passed CSS selector
            </summary>
            <param name="selector">The CSS selector</param>
            <param name="unique"></param>
            <returns>Elements</returns>
        </member>
        <member name="M:Ext.Net.ExtNet.SingleSelect(System.String,System.Boolean,System.String)">
            <summary>
            Selects first element based on the passed CSS selector
            </summary>
            <param name="selector">The CSS selector</param>
            <param name="unique"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ExtNet.Call(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ExtNet.Call(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ExtNet.Set(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.IsAjaxRequest">
            <summary>
            Determines if the current HttpRequest is an Ext.NET Ajax Request.
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.ResourceManager">
            <summary>
            Returns an instance of the current Ext.NET ResourceManager.
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.Mask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.Msg">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.MessageBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.QuickTips">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.WindowManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ExtNet.Js">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Js">
            <summary>
            JavaScript helper functions.
            </summary>
        </member>
        <member name="M:Ext.Net.Js.Alert(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ext.Net.Js.Confirm(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Ext.Net.Js.ToScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ext.Net.ToolTip">
            <summary>
            A standard tooltip implementation for providing additional information when hovering over a target element.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Update(System.String)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.RemoveContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.AnchorOffset">
            <summary>
            A numeric pixel value used to offset the default position of the anchor arrow (defaults to 0). When the anchor position is on the top or bottom of the tooltip, anchorOffset will be used as a horizontal offset. Likewise, when the anchor position is on the left or right side, anchorOffset will be used as a vertical offset.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.AnchorToTarget">
            <summary>
            True to anchor the tooltip to the target element, false to anchor it relative to the mouse coordinates (defaults to true). When anchorToTarget is true, use defaultAlign to control tooltip alignment to the target element. When anchorToTarget is false, use anchorPosition instead to control alignment.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.AutoHide">
            <summary>
            True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Delegate">
            <summary>
            Optional. A DomQuery selector which allows selection of individual elements within the target element to trigger showing and hiding the ToolTip as the mouse moves within the target.
            When specified, the child element of the target which caused a show event is placed into the triggerElement property before the ToolTip is shown.
            This may be useful when a Component has regular, repeating elements in it, each of which need a Tooltip which contains information specific to that element.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.DismissDelay">
            <summary>
            Delay in milliseconds before the tooltip automatically hides (defaults to 5000). To disable automatic hiding, set dismissDelay = 0.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.HideDelay">
            <summary>
            Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides (defaults to 200). Set to 0 for the tooltip to hide immediately.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.MouseOffset">
            <summary>
            An XY offset from the mouse position where the tooltip should be shown (defaults to [15,18]).
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.ShowDelay">
            <summary>
            Delay in milliseconds before the tooltip displays after the mouse enters the target element (defaults to 500).
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.TargetControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Target">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.TargetProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.TrackMouse">
            <summary>
            True to have the tooltip follow the mouse as it moves over the target element (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.AnchorOffset">
            <summary>
            A numeric pixel value used to offset the default position of the anchor arrow (defaults to 0). When the anchor position is on the top or bottom of the tooltip, anchorOffset will be used as a horizontal offset. Likewise, when the anchor position is on the left or right side, anchorOffset will be used as a vertical offset.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.AnchorToTarget">
            <summary>
            True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.AutoHide">
            <summary>
            True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.Delegate">
            <summary>
            A DomQuery selector which allows selection of individual elements within the target element to trigger showing and hiding the ToolTip as the mouse moves within the target.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.DismissDelay">
            <summary>
            Delay in milliseconds before the tooltip automatically hides (defaults to 5000). To disable automatic hiding, set dismissDelay = 0.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.HideDelay">
            <summary>
            Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides (defaults to 200). Set to 0 for the tooltip to hide immediately.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.MouseOffset">
            <summary>
            An XY offset from the mouse position where the tooltip should be shown (defaults to [15,18]).
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.ShowDelay">
            <summary>
            Delay in milliseconds before the tooltip displays after the mouse enters the target element (defaults to 500).
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.TargetControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.Target">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.TrackMouse">
            <summary>
            True to have the tooltip follow the mouse as it moves over the target element (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ToolTip.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.AnchorOffset(System.Int32)">
            <summary>
            A numeric pixel value used to offset the default position of the anchor arrow (defaults to 0). When the anchor position is on the top or bottom of the tooltip, anchorOffset will be used as a horizontal offset. Likewise, when the anchor position is on the left or right side, anchorOffset will be used as a vertical offset.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.AnchorToTarget(System.Boolean)">
            <summary>
            True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.AutoHide(System.Boolean)">
            <summary>
            True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.Delegate(System.String)">
            <summary>
            A DomQuery selector which allows selection of individual elements within the target element to trigger showing and hiding the ToolTip as the mouse moves within the target.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.DismissDelay(System.Int32)">
            <summary>
            Delay in milliseconds before the tooltip automatically hides (defaults to 5000). To disable automatic hiding, set dismissDelay = 0.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.HideDelay(System.Int32)">
            <summary>
            Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides (defaults to 200). Set to 0 for the tooltip to hide immediately.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.MouseOffset(System.Int32[])">
            <summary>
            An XY offset from the mouse position where the tooltip should be shown (defaults to [15,18]).
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.ShowDelay(System.Int32)">
            <summary>
            Delay in milliseconds before the tooltip displays after the mouse enters the target element (defaults to 500).
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.Target(System.String)">
            <summary>
            The target id to associate with this tooltip.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.TrackMouse(System.Boolean)">
            <summary>
            True to have the tooltip follow the mouse as it moves over the target element (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.ToolTip.Builder.Update(System.String)">
            <summary>
            Update the html of the Body, optionally searching for and processing scripts.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelDirectEvents.BeforeTabChange">
            <summary>
            Fires before the active tab changes. Handlers can return false to cancel the tab change.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelDirectEvents.ContextMenu">
            <summary>
            Fires when the original browser contextmenu event originated from a tab element.
            </summary>
        </member>
        <member name="P:Ext.Net.TabPanelDirectEvents.TabChange">
            <summary>
            Fires after the active tab has changed.
            </summary>
        </member>
        <member name="P:Ext.Net.PageTreeLoader.Type">
            <summary>
            The type of DirectEvent to perform. The 'Submit' type will submit the &lt;form> and 'Load' will make a POST request to url set in the .Url property, or the current url if the .Url property has not been set.
            </summary>
        </member>
        <member name="P:Ext.Net.PageTreeLoader.FormID">
            <summary>
            The id of the form to submit. If this.ParentForm is not null then this.ParentForm.ClientID is used, else if FormID is empty then FormID is used, else try to find the form in dom tree hierarchy, otherwise the Url of current page is used.
            </summary>
        </member>
        <member name="T:Ext.Net.DesktopWindow">
            <summary>
            A specialized panel intended for use as an application window. Windows are floated and draggable by default, and also provide specific behavior like the ability to maximize and restore (with an event for minimizing, since the minimize behavior is application-specific). Windows can also be linked to a Ext.WindowGroup or managed by the Ext.WindowManager to provide grouping, activation, to front/back and other application-specific behavior.
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopWindow.Show">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.Maximizable">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size.
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.LazyRender">
            <summary>
            True to force rendering otherwise rendering will be performed before the first showing.
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.ShowInTaskbar">
            <summary>
            False to skip task button showing
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.Minimizable">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.Config.Maximizable">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size.
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.Config.LazyRender">
            <summary>
            True to force rendering otherwise rendering will be performed before the first showing.
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.Config.ShowInTaskbar">
            <summary>
            False to skip task button showing
            </summary>
        </member>
        <member name="P:Ext.Net.DesktopWindow.Config.Minimizable">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopWindow.Builder.Maximizable(System.Boolean)">
            <summary>
            True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size.
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopWindow.Builder.LazyRender(System.Boolean)">
            <summary>
            True to force rendering otherwise rendering will be performed before the first showing.
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopWindow.Builder.ShowInTaskbar(System.Boolean)">
            <summary>
            False to skip task button showing
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopWindow.Builder.Minimizable(System.Boolean)">
            <summary>
            True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful.
            </summary>
        </member>
        <member name="M:Ext.Net.DesktopWindow.Builder.Show">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxListeners.Check">
            <summary>
            Fires when the Checkbox is checked or unchecked.
            </summary>
        </member>
        <member name="T:Ext.Net.ButtonGroup">
            <summary>
            Container for a group of buttons.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr. Defaults to 'button' in ButtonGroup).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Frame">
            <summary>
            True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Columns">
            <summary>
            The columns configuration property passed to the configured layout manager. See Ext.layout.TableLayout.columns.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Layout">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonGroup.Builder.DefaultType(System.String)">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr. Defaults to 'button' in ButtonGroup
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonGroup.Builder.Frame(System.Boolean)">
            <summary>
            True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonGroup.Builder.Columns(System.Int32)">
            <summary>
            The columns configuration property passed to the configured layout manager. See Ext.layout.TableLayout.columns.
            </summary>
        </member>
        <member name="M:Ext.Net.ButtonGroup.Builder.Layout(System.String)">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Config.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr. Defaults to 'button' in ButtonGroup
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Config.Frame">
            <summary>
            True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Config.Columns">
            <summary>
            The columns configuration property passed to the configured layout manager. See Ext.layout.TableLayout.columns.
            </summary>
        </member>
        <member name="P:Ext.Net.ButtonGroup.Config.Layout">
            <summary>
            The layout type to be used in this container.
            </summary>
        </member>
        <member name="T:Ext.Net.HybridSummary">
            <summary>
            Adds capability to specify the summary data for the group via json
            </summary>
        </member>
        <member name="T:Ext.Net.GroupingSummary">
            <summary>
            A GridPanel plugin that enables dynamic column calculations and a dynamically updated grouped summary row.
            </summary>
        </member>
        <member name="M:Ext.Net.GroupingSummary.ToggleSummaries(System.Boolean)">
            <summary>
            Toggle the display of the summary row on/off
            </summary>
            <param name="visible">visible 'true' to show the summary, 'false' to hide the summary.</param>
        </member>
        <member name="M:Ext.Net.GroupingSummary.RefreshSummary(System.String)">
            <summary>
            Note: requires that all (or the first) record in the group share the same group value.
            </summary>
            <param name="groupValue"></param>
        </member>
        <member name="M:Ext.Net.GroupingSummary.ShowSummaryMsg(System.String,System.String)">
            <summary>
            Show a message in the summary row.
            </summary>
            <param name="groupValue">group value</param>
            <param name="msg">Text to use as innerHTML for the summary row.</param>
        </member>
        <member name="P:Ext.Net.GroupingSummary.Calculations">
            <summary>
             Calculation types for summary row
            </summary>
        </member>
        <member name="M:Ext.Net.HybridSummary.UpdateSummaryData(System.String,System.Object,System.Boolean)">
            <summary>
            Update summary with new data
            </summary>
            <param name="groupValue">group value</param>
            <param name="data">data object</param>
            <param name="skipRefresh">skip grid refresh</param>
        </member>
        <member name="M:Ext.Net.HybridSummary.UpdateSummaryData(System.String,System.Object)">
            <summary>
            Update summary with new data
            </summary>
            <param name="groupValue">group value</param>
            <param name="data">data object</param>
        </member>
        <member name="P:Ext.Net.GroupTabListeners.Activate">
            <summary>
            Fires after tab is activated.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabListeners.Deactivate">
            <summary>
            Fires after tab is deactivated.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabListeners.ChangeMainItem">
            <summary>
            Fires after main item is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabListeners.BeforeTabChange">
            <summary>
            Fires before tab is changed.
            </summary>
        </member>
        <member name="P:Ext.Net.GroupTabListeners.TabChange">
            <summary>
            Fires after tab is changed.
            </summary>
        </member>
        <member name="T:Ext.Net.AnimationType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.AnimationType.Run">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Ext.Net.AnimationType.Color">
            <summary>
            Animates transition of background, text, or border colors.
            </summary>
        </member>
        <member name="F:Ext.Net.AnimationType.Motion">
            <summary>
            Animates the motion of an element to/from specific points using optional bezier way points during transit.
            </summary>
        </member>
        <member name="F:Ext.Net.AnimationType.Scroll">
            <summary>
            Animate horizontal or vertical scrolling of an overflowing page element.
            </summary>
        </member>
        <member name="T:Ext.Net.RegionPosition">
            <summary>
            Summary description for Region
            </summary>
        </member>
        <member name="T:Ext.Net.RecordFieldType">
            <summary>
            The data type for conversion to displayable value
            </summary>
        </member>
        <member name="F:Ext.Net.RecordFieldType.Auto">
            <summary>
            (Default, implies no conversion)
            </summary>
        </member>
        <member name="F:Ext.Net.RecordFieldType.String">
            <summary>
            To string conversion
            </summary>
        </member>
        <member name="F:Ext.Net.RecordFieldType.Int">
            <summary>
            To int conversion
            </summary>
        </member>
        <member name="F:Ext.Net.RecordFieldType.Float">
            <summary>
            To float conversion
            </summary>
        </member>
        <member name="F:Ext.Net.RecordFieldType.Boolean">
            <summary>
            To boolean conversion
            </summary>
        </member>
        <member name="F:Ext.Net.RecordFieldType.Date">
            <summary>
            To date conversion
            </summary>
        </member>
        <member name="T:Ext.Net.CellSelectionModel">
             <summary>
             This class provides the basic implementation for single cell selection in a grid.
             The object stored as the selection and returned by getSelectedCell contains the following properties:
                 record : Ext.data.record
                     The Record which provides the data for the row containing the selection
                 cell : Ext.data.record
                     An object containing the following properties:
                          rowIndex : Number
                             The index of the selected row
                         cellIndex : Number
                             The index of the selected cell
              Note that due to possible column reordering, the cellIndex should not be used as an index into
              the Record's data. Instead, the name of the selected field should be determined in order to
              retrieve the data value from the record by name:
            
                 var fieldName = grid.getColumnModel().getDataIndex(cellIndex);
                 var data = record.get(fieldName);
             </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.ClearSelections(System.Boolean)">
            <summary>
            Clears all selections.
            </summary>
            <param name="notify">true to prevent the gridview from being notified about the change.</param>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.Select(System.Int32,System.Int32)">
            <summary>
            Selects a cell.
            </summary>
            <param name="rowIndex">The row index of the cell</param>
            <param name="collIndex ">The column index of the cell</param>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.IgnoreTargets">
            <summary>
            The list of selectors of the ignore targets
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.SelectedCell">
            <summary>
            Selected cell
            </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.Builder.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.Builder.ClearSelections">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.Builder.ClearSelections(System.Boolean)">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Ext.Net.CellSelectionModel.Builder.Select(System.Int32,System.Int32)">
            <summary>
            Selects a range of rows. All rows in between startRow and endRow are also selected.
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModel.Config.SelectedCell">
            <summary>
            Selected cell
            </summary>
        </member>
        <member name="T:Ext.Net.WaitConfig">
            <summary>
            A config object containing any or all of the following properties. If this object is not specified the status will be cleared using the defaults.
            </summary>
        </member>
        <member name="P:Ext.Net.WaitConfig.Duration">
            <summary>
            The length of time in milliseconds that the progress bar should run before resetting itself (defaults to undefined, in which case it will run indefinitely until reset is called)
            </summary>
        </member>
        <member name="P:Ext.Net.WaitConfig.Interval">
            <summary>
            The length of time in milliseconds between each progress update (defaults to 1000 ms)
            </summary>
        </member>
        <member name="P:Ext.Net.WaitConfig.Increment">
            <summary>
            The number of progress update segments to display within the progress bar (defaults to 10).  If the bar reaches the end and is still updating, it will automatically wrap back to the beginning.
            </summary>
        </member>
        <member name="P:Ext.Net.WaitConfig.Text">
            <summary>
            Optional text to display in the progress bar element (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.WaitConfig.Fn">
            <summary>
            A callback function to execute after the progress bar finishes auto-updating. The function will be called with no arguments. This function will be ignored if duration is not specified since in that case the progress bar can only be stopped programmatically, so any required function should be called by the same code after it resets the progress bar.
            </summary>
        </member>
        <member name="P:Ext.Net.WaitConfig.Scope">
            <summary>
            The scope that is passed to the callback function (only applies when duration and fn are both passed).
            </summary>
        </member>
        <member name="T:Ext.Net.TaskManager">
            <summary>
            Provides the ability to execute one or more arbitrary tasks in a multithreaded manner.
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.StartAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.StopAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.StartTask(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.TaskManager.StopTask(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.TaskManager.StartTask(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Ext.Net.TaskManager.StopTask(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Ext.Net.TaskManager.Interval">
            <summary>
            The minimum precision in milliseconds supported by this TaskRunner instance (defaults to 10)
            </summary>
        </member>
        <member name="P:Ext.Net.TaskManager.AutoRunDelay">
            <summary>
            The start delay in milliseconds for autorun tasks
            </summary>
        </member>
        <member name="P:Ext.Net.TaskManager.Tasks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TaskManager.Config.Interval">
            <summary>
            The minimum precision in milliseconds supported by this TaskRunner instance (defaults to 10)
            </summary>
        </member>
        <member name="P:Ext.Net.TaskManager.Config.AutoRunDelay">
            <summary>
            The start delay in milliseconds for autorun tasks
            </summary>
        </member>
        <member name="P:Ext.Net.TaskManager.Config.Tasks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.Interval(System.Int32)">
            <summary>
            The minimum precision in milliseconds supported by this TaskRunner instance (defaults to 10)
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.AutoRunDelay(System.Int32)">
            <summary>
            The start delay in milliseconds for autorun tasks
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.AddTask(Ext.Net.Task)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.RemoveTask(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.RemoveTask(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.StartAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.StopAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.StartTask(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.StopTask(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.StartTask(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TaskManager.Builder.StopTask(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Highlight">
            <summary>
            Highlights the Element by setting a color (applies to the background-color by default, but can be changed using the "attr" config option) and then fading back to the original color. If no original color is available, you should provide the "endColor" config option which will be cleared after the animation. 
            </summary>
        </member>
        <member name="P:Ext.Net.Highlight.Color">
            <summary>
            The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
            </summary>
        </member>
        <member name="P:Ext.Net.DefaultSelectionModelListeners.BeforeSelect">
            <summary>
            Fires before the selected node changes, return false to cancel the change
            </summary>
        </member>
        <member name="P:Ext.Net.DefaultSelectionModelListeners.SelectionChange">
            <summary>
            Fires when the selected node changes
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxyListeners.BeforeLoad">
            <summary>
            Fires before a network request is made to retrieve a data object.
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxyListeners.Load">
            <summary>
            Fires before the load method's callback is called.
            </summary>
        </member>
        <member name="P:Ext.Net.DataProxyListeners.LoadException">
             <summary>
             Fires if an exception occurs in the Proxy during data loading. 
             This event can be fired for one of two reasons:
                 The load call timed out. This means the load callback did
                 not execute within the time limit specified by timeout.
                 In this case, this event will be raised and the fourth
                 parameter (read error) will be null.
            
                 The load succeeded but the reader could not read the response.
                 This means the server returned data, but the configured Reader
                 threw an error while reading the data. In this case, this event
                 will be raised and the caught error will be passed along as 
                 the fourth parameter of this event.
             
                 Note that this event is also relayed through Store, so you
                 can listen for it directly on any Store instance.
             
                 Listeners will be called with the following arguments:
                     this : Object
                     
                     options : Object
                         The loading options that were specified (see load for details).
                         If the load call timed out, this parameter will be null.
                     
                     arg : Object
                         The callback's arg object passed to the load function
             
                     e : Error
                     The JavaScript Error object caught if the configured Reader
                     could not read the data. If the load call returned 
                     success: false, this parameter will be null.
             </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterDirectEvents.Click">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterDirectEvents.LeftClick">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterDirectEvents.MiddleClick">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterDirectEvents.RightClick">
            <summary>
            Fires on a specified interval during the time the element is pressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterDirectEvents.MouseDown">
            <summary>
            Fires when the mouse button is depressed.
            </summary>
        </member>
        <member name="P:Ext.Net.ClickRepeaterDirectEvents.MouseUp">
            <summary>
            Fires when the mouse key is released.
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.Cls">
            <summary>
            CSS class to add to the element
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.ID">
            <summary>
            The Layer ID
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.Constrain">
            <summary>
            False to disable constrain to viewport (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.DH">
            <summary>
            DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}).
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.Shadow">
            <summary>
            True to automatically create an Ext.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. False to disable the shadow. (defaults to false)
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.ShadowOffset">
            <summary>
            Number of pixels to offset the shadow (defaults to 4)
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.Shim">
            <summary>
            False to disable the iframe shim in browsers which need one (defaults to true)
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.UseDisplay">
            <summary>
            Defaults to use css offsets to hide the Layer. Specify true to use css style 'display:none;' to hide the Layer.
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.ZIndex">
            <summary>
            Starting z-index (defaults to 11000)
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.ParentElement">
            <summary>
            Parent element for current Layer
            </summary>
        </member>
        <member name="P:Ext.Net.LayerConfig.ExistingElement">
            <summary>
            Uses an existing DOM element. If the element is not found it creates it.
            </summary>
        </member>
        <member name="P:Ext.Net.HBoxLayoutConfig.Align">
            <summary>
            Controls how the child items of the container are aligned. 
            </summary>
        </member>
        <member name="M:Ext.Net.Layer.SetZIndex(System.Int32)">
            <summary>
            Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).
            </summary>
            <param name="zindex">The new z-index to set</param>
            <returns>This layer</returns>
        </member>
        <member name="T:Ext.Net.DebugConsole">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DebugConsole.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DebugConsole.Ext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DebugConsole.Firebug">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.AbsoluteLayout">
            <summary>
            This layout adds the ability for x/y positioning using the standard x and y component config options.
            </summary>
        </member>
        <member name="T:Ext.Net.ColumnCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.FadeIn">
            <summary>
            Fade an element in (from transparent to opaque). The ending opacity can be specified using the "endOpacity" config option. 
            </summary>
        </member>
        <member name="P:Ext.Net.FadeInConfig.EndOpacity">
            <summary>
            The ending opacity
            </summary>
        </member>
        <member name="P:Ext.Net.HighlightConfig.Attr">
            <summary>
            Can be any valid CSS property (attribute) that supports a color value
            </summary>
        </member>
        <member name="P:Ext.Net.HighlightConfig.EndColor">
            <summary>
            End fading color
            </summary>
        </member>
        <member name="P:Ext.Net.Scale.Width">
            <summary>
            The new width (pass undefined to keep the original width)
            </summary>
        </member>
        <member name="P:Ext.Net.Scale.Height">
            <summary>
            The new height (pass undefined to keep the original height)
            </summary>
        </member>
        <member name="T:Ext.Net.Shift">
            <summary>
            Animates the transition of any combination of an element's dimensions, xy position and/or opacity. Any of these properties not specified in the config object will not be changed. This effect requires that at least one new dimension, position or opacity setting must be passed in on the config object in order for the function to have any effect. 
            </summary>
        </member>
        <member name="P:Ext.Net.ShiftConfig.Width">
            <summary>
            Element's width
            </summary>
        </member>
        <member name="P:Ext.Net.ShiftConfig.Height">
            <summary>
            Element's height
            </summary>
        </member>
        <member name="P:Ext.Net.ShiftConfig.X">
            <summary>
            Element's x position
            </summary>
        </member>
        <member name="P:Ext.Net.ShiftConfig.Y">
            <summary>
            Element's y position
            </summary>
        </member>
        <member name="P:Ext.Net.ShiftConfig.Opacity">
            <summary>
            Element's opacity
            </summary>
        </member>
        <member name="T:Ext.Net.SwitchOff">
            <summary>
            Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television). When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
            </summary>
        </member>
        <member name="T:Ext.Net.TableGrid">
            <summary>
            A Grid which creates itself from an existing HTML table element.
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Table">
            <summary>
            The table element from which this grid will be created.
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.ColumnModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Columns">
            <summary>
            The columns to use when rendering the grid (required).
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Fields">
            <summary>
            An array of field definition objects
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.AutoHeight">
            <summary>
            True to use height:'auto', false to use fixed height (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Config.Table">
            <summary>
            The table element from which this grid will be created.
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Config.ColumnModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Config.Columns">
            <summary>
            The columns to use when rendering the grid (required).
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Config.Fields">
            <summary>
            Either a Collection of RecordField definition objects
            </summary>
        </member>
        <member name="P:Ext.Net.TableGrid.Config.AutoHeight">
            <summary>
            True to use height:'auto', false to use fixed height (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TableGrid.Builder.Table(System.String)">
            <summary>
            The table element from which this grid will be created.
            </summary>
        </member>
        <member name="M:Ext.Net.TableGrid.Builder.AutoHeight(System.Boolean)">
            <summary>
            True to use height:'auto', false to use fixed height (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.MultiSelectionModelListeners.SelectionChange">
            <summary>
            Fires when the selected nodes change
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditorFilter.Attribute">
            <summary>
            Attribute name to retrieve the value
            </summary>
        </member>
        <member name="P:Ext.Net.TreeEditorFilter.Value">
            <summary>
            Value of attribute, the editor will be shown if a node has attribute with the same value
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.BeforeRefresh">
            <summary>
            Internal UI Event. Fired before the view is refreshed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.BeforeRowRemoved">
            <summary>
            Internal UI Event. Fired before a row is removed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.BeforeRowsInserted">
            <summary>
            Internal UI Event. Fired before rows are inserted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.Refresh">
            <summary>
            Internal UI Event. Fired after the GridView's body has been refreshed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.RowRemoved">
            <summary>
            Internal UI Event. Fired after a row is removed.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.RowsInserted">
            <summary>
            Internal UI Event. Fired after rows are inserted.
            </summary>
        </member>
        <member name="P:Ext.Net.GridViewDirectEvents.RowUpdated">
            <summary>
            Internal UI Event. Fired after a row has been updated.
            </summary>
        </member>
        <member name="F:Ext.Net.IDMode.Inherit">
            <summary>
            [Default] Inherits the IDMode for the Parent. This is the default functionality of all Ext.Net Components.
            </summary>
        </member>
        <member name="F:Ext.Net.IDMode.Legacy">
            <summary>
            Legacy functionality for generating CliendID's. No change from default ASP.NET functionality.
            </summary>
        </member>
        <member name="F:Ext.Net.IDMode.Static">
            <summary>
            Render the "id" property in the client as exactly the value set. Developer must manually ensure client-side ID uniqueness.
            </summary>
        </member>
        <member name="F:Ext.Net.IDMode.Ignore">
            <summary>
            Do not render the "id" property in the client. 
            </summary>
        </member>
        <member name="F:Ext.Net.IDMode.Explicit">
            <summary>
            Only render the "id" property if the .ID is explicitly set, otherwise renders as the ClientID if autogenerated by the ASP.NET runtime.
            </summary>
        </member>
        <member name="F:Ext.Net.IDMode.ExplicitClientID">
            <summary>
            Only render the ClientID property if the .ID is explicitly set.
            </summary>
        </member>
        <member name="T:Ext.Net.TabStripItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.#ctor(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Ext.Net.TabStripItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Ext.Net.TabStripItem.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="itemID"></param>
            <param name="title"></param>
        </member>
        <member name="M:Ext.Net.TabStripItem.Call(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Ext.Net.TabStripItem.SetTitle(System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Ext.Net.TabStripItem.SetHidden(System.Boolean)">
            <summary>
            
            </summary>
            <param name="hidden"></param>
        </member>
        <member name="M:Ext.Net.TabStripItem.SetIconCls(System.String)">
            <summary>
            
            </summary>
            <param name="iconCls"></param>
        </member>
        <member name="P:Ext.Net.TabStripItem.ItemID">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.TabStripItem.ActionItemID" -->
        <member name="P:Ext.Net.TabStripItem.ActionItem">
            <summary>
            Managed container. It will be shown when tab is activated
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.HideMode">
            <summary>
            How the action item should be hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.TabTip">
            <summary>
             A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over the associated tab selector element. NOTE: TabTip config is used when a BoxComponent is a child of a TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Closable">
            <summary>
            True to display the 'close' button and allow the user to close the tab, false to hide the button and disallow closing the tab (default to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Hidden">
            <summary>
            Render this item hidden (default is false). If true, the hide method will be called internally.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Icon">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.IconClsProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.CustomConfig">
            <summary>
            Collection of custom js config
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.ItemID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.ActionItemID">
            <summary>
            Managed container id. It will be shown when tab is activated
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.ActionItem">
            <summary>
            Managed container. It will be shown when tab is activated
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.HideMode">
            <summary>
            How the action item. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.TabTip">
            <summary>
            A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over the associated tab selector element. NOTE: TabTip config is used when a BoxComponent is a child of a TabPanel.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.Closable">
            <summary>
            Panels themselves do not directly support being closed, but some Panel subclasses do (like Ext.Window) or a Panel Class within an Ext.TabPanel. Specify true to enable closing in such situations. Defaults to false.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.Hidden">
            <summary>
            Render this component hidden (default is false). If true, the hide method will be called internally.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.Icon">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.IconCls">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStripItem.Config.CustomConfig">
            <summary>
            Collection of custom js config
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.ItemID(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.ActionItemID(System.String)">
            <summary>
            Managed container id. It will be shown when tab is activated
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.ActionItem(Ext.Net.Component)">
            <summary>
            Managed container. It will be shown when tab is activated
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.HideMode(Ext.Net.HideMode)">
            <summary>
            How the action item. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.Title(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.TabTip(System.String)">
            <summary>
            A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over the associated tab selector element. NOTE: TabTip config is used when a BoxComponent is a child of a TabPanel.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.Closable(System.Boolean)">
            <summary>
            Panels themselves do not directly support being closed, but some Panel subclasses do (like Ext.Window) or a Panel Class within an Ext.TabPanel. Specify true to enable closing in such situations. Defaults to false.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.Hidden(System.Boolean)">
            <summary>
            Render this component hidden (default is false). If true, the hide method will be called internally.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.Icon(Ext.Net.Icon)">
            <summary>
            The icon to use in the Button. See also, IconCls to set an icon with a custom Css class.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItem.Builder.IconCls(System.String)">
            <summary>
            A css class which sets a background image to be used as the icon for this button.
            </summary>
        </member>
        <member name="T:Ext.Net.TabStrip">
            <summary>
            A component which renders tabs similar to a TabPanel and can toggle visibility of other items.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.AddItem(Ext.Net.TabStripItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.TabStrip.InsertItem(System.Int32,Ext.Net.TabStripItem)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.TabStrip.Remove(Ext.Net.TabStripItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.TabStrip.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Ext.Net.TabStrip.SetActiveTab(Ext.Net.TabStripItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ext.Net.TabStrip.SetActiveTab(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Ext.Net.TabStrip.ScrollToTab(System.String,System.Boolean)">
            <summary>
            Scrolls to a particular tab if tab scrolling is enabled
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.SyncStripWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Items">
            <summary>
            Items Collection
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.TabStrip.ActionContainerID" -->
        <!-- Badly formed XML comment ignored for member "P:Ext.Net.TabStrip.ActionContainer" -->
        <member name="P:Ext.Net.TabStrip.ActiveTabIndex">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.AnimScroll">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.EnableTabScroll">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on addToStart. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.MinTabWidth">
            <summary>
            The minimum width in pixels for each tab when ResizeTabs = true (defaults to 30).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Plain">
            <summary>
            True to render the tab strip without a background content Container image (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.ResizeTabs">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although MinTabWidth will always be honored).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.SyncOnTabChange">
            <summary>
            Sync size after active tab change. This property is ignored if AutoGrow=false
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.AutoGrow">
            <summary>
            True to auto grow width.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.ScrollDuration">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when AnimScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.ScrollIncrement">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if ResizeTabs = true, the calculated tab width). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.ScrollRepeatInterval">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.TabMargin">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2)
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.TabCls">
            <summary>
            This config option is used on child Components of ths TabPanel. A CSS class name applied to the tab strip item representing the child Component, allowing special styling to be applied.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.TabPosition">
            <summary>
            The position where the tab strip should be rendered (defaults to 'addToStart'). The only other supported value is 'Bottom'. Note that tab scrolling is only supported for position 'addToStart'.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.TabWidth">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.WheelIncrement">
            <summary>
            For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when tab changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="E:Ext.Net.TabStrip.TabChanged">
            <summary>
            Fires when the SelectedDate property has been changed
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.Items">
            <summary>
            Items Collection
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ActionContainerID">
            <summary>
            The ID of the container which has card layout. TabStrip will switch active item automatically beased on the current index.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ActionContainer">
            <summary>
            The container which has card layout. TabStrip will switch active item automatically beased on the current index.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ActiveTabIndex">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.AnimScroll">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.EnableTabScroll">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on addToStart. (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.MinTabWidth">
            <summary>
            The minimum width in pixels for each tab when ResizeTabs = true (defaults to 30).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.Plain">
            <summary>
            True to render the tab strip without a background content Container image (defaults to true).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ResizeTabs">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although MinTabWidth will always be honored).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.SyncOnTabChange">
            <summary>
            Sync size after active tab change. This property is ignored if AutoGrow=false
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.AutoGrow">
            <summary>
            True to auto grow width
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ScrollDuration">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when AnimScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ScrollIncrement">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if ResizeTabs = true, the calculated tab width). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ScrollRepeatInterval">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.TabMargin">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2)
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.TabCls">
            <summary>
            This config option is used on child Components of ths TabPanel. A CSS class name applied to the tab strip item representing the child Component, allowing special styling to be applied.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.TabPosition">
            <summary>
            The position where the tab strip should be rendered (defaults to 'addToStart'). The only other supported value is 'Bottom'. Note that tab scrolling is only supported for position 'addToStart'.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.TabWidth">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.AutoPostBack">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when tab changed.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="P:Ext.Net.TabStrip.Config.ValidationGroup">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ActionContainerID(System.String)">
            <summary>
            The ID of the container which has card layout. TabStrip will switch active item automatically beased on the current index.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ActionContainer(Ext.Net.Container)">
            <summary>
            The container which has card layout. TabStrip will switch active item automatically beased on the current index.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ActiveTabIndex(System.Int32)">
            <summary>
            The numeric index of the tab that should be initially activated on render.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.AnimScroll(System.Boolean)">
            <summary>
            True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.EnableTabScroll(System.Boolean)">
            <summary>
            True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on addToStart. (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.MinTabWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width in pixels for each tab when ResizeTabs = true (defaults to 30).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.Plain(System.Boolean)">
            <summary>
            True to render the tab strip without a background content Container image (defaults to true).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ResizeTabs(System.Boolean)">
            <summary>
            True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although MinTabWidth will always be honored).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.SyncOnTabChange(System.Boolean)">
            <summary>
            Sync size after active tab change. This property is ignored if AutoGrow=false
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.AutoGrow(System.Boolean)">
            <summary>
            True to auto grow width
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ScrollDuration(System.Single)">
            <summary>
            The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when AnimScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ScrollIncrement(System.Int32)">
            <summary>
            The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if ResizeTabs = true, the calculated tab width). Only applies when EnableTabScroll = true.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ScrollRepeatInterval(System.Int32)">
            <summary>
            Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.TabMargin(System.Web.UI.WebControls.Unit)">
            <summary>
            The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2)
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.TabCls(System.String)">
            <summary>
            This config option is used on child Components of ths TabPanel. A CSS class name applied to the tab strip item representing the child Component, allowing special styling to be applied.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.TabPosition(Ext.Net.TabPosition)">
            <summary>
            The position where the tab strip should be rendered (defaults to 'addToStart'). The only other supported value is 'Bottom'. Note that tab scrolling is only supported for position 'addToStart'.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.TabWidth(System.Web.UI.WebControls.Unit)">
            <summary>
            The initial width in pixels of each new tab (defaults to 120).
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.AutoPostBack(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the control state automatically posts back to the server when tab changed.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.CausesValidation(System.Boolean)">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control is set to validate when a postback occurs.
            </summary>
        </member>
        <member name="M:Ext.Net.TabStrip.Builder.ValidationGroup(System.String)">
            <summary>
            Gets or Sets the Controls ValidationGroup
            </summary>
        </member>
        <member name="T:Ext.Net.CheckboxGroup">
            <summary>
            A grouping container for Ext.form.Checkbox controls.
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'checkbox').
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="E:Ext.Net.CheckboxGroup.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.Config.DefaultType">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'checkbox').
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.CheckboxGroup.Config.Items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="M:Ext.Net.CheckboxGroup.Builder.DefaultType(System.String)">
            <summary>
            The default type of content Container represented by this object as registered in Ext.ComponentMgr (defaults to 'checkbox').
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridNumberColumn.Format">
            <summary>
            A formatting string as used by Ext.util.Format.number to format a numeric value for this Column (defaults to '0,000.00').
            </summary>
        </member>
        <member name="T:Ext.Net.ToolbarTextItem">
            <summary>
            A simple class that renders text directly into a toolbar.
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarTextItem.SetText(System.String)">
            <summary>
            Clears the status text and iconCls. Also supports clearing via an optional fade out animation.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarTextItem.Text">
            <summary>
            A Toolbar Text item.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarTextItem.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarTextItem.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="M:Ext.Net.ToolbarTextItem.Builder.Text(System.String)">
            <summary>
            A Toolbar Text item.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarTextItem.Config.Text">
            <summary>
            A Toolbar Text item.
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarTextItem.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarTextItem.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.FormLayout">
            <summary>
            This is a layout specifically designed for creating forms.
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.TrackLabels">
            <summary>
            True to show/hide the field label when the field is hidden. Defaults to true. 
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.ElementStyle">
            <summary>
            A CSS style specification string to add to each field element in this layout (defaults to '').
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.HideLabels">
            <summary>
            True to hide field labels by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.ItemCls">
            <summary>
            A CSS class to add to the div wrapper that contains each field label and field element (the default class is 'x-form-item' and itemCls will be added to that)
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.LabelAlign">
            <summary>
            The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields.
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.LabelPad">
            <summary>
            The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.LabelWidth">
            <summary>
            The default width in pixels of field labels (defaults to 100).
            </summary>
        </member>
        <member name="M:Ext.Net.FormLayout.Builder.HideLabels(System.Boolean)">
            <summary>
            True to hide field labels by default (defaults to false).
            </summary>
        </member>
        <member name="M:Ext.Net.FormLayout.Builder.ItemCls(System.String)">
            <summary>
            A CSS class to add to the div wrapper that contains each field label and field element (the default class is 'x-form-item' and itemCls will be added to that)
            </summary>
        </member>
        <member name="M:Ext.Net.FormLayout.Builder.LabelAlign(Ext.Net.LabelAlign)">
            <summary>
            The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields.
            </summary>
        </member>
        <member name="M:Ext.Net.FormLayout.Builder.LabelPad(System.Int32)">
            <summary>
            The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="M:Ext.Net.FormLayout.Builder.LabelWidth(System.Int32)">
            <summary>
            The default width in pixels of field labels (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.Config.HideLabels">
            <summary>
            True to hide field labels by default (defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.Config.ItemCls">
            <summary>
            A CSS class to add to the div wrapper that contains each field label and field element (the default class is 'x-form-item' and itemCls will be added to that)
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.Config.LabelAlign">
            <summary>
            The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields.
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.Config.LabelPad">
            <summary>
            The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:Ext.Net.FormLayout.Config.LabelWidth">
            <summary>
            The default width in pixels of field labels (defaults to 100).
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridBooleanColumn.FalseText">
            <summary>
            The string returned by the renderer when the column value is falsey (but not undefined) (defaults to 'false').
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridBooleanColumn.TrueText">
            <summary>
            The string returned by the renderer when the column value is not falsey (defaults to 'true').
            </summary>
        </member>
        <member name="P:Ext.Net.TreeGridBooleanColumn.UndefinedText">
            <summary>
            The string returned by the renderer when the column value is undefined (defaults to ' ').
            </summary>
        </member>
        <member name="T:Ext.Net.VisibilityMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.VisibilityMode.Visibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.VisibilityMode.Display">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.CssPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.CssPosition.Static">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.CssPosition.Relative">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.CssPosition.Absolute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.CssPosition.Fixed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.TextArea">
            <summary>
            Multiline text field. Can be used as a direct replacement for traditional textarea &lt;asp:TextBox TextMode='MultiLine'> fields, plus adds support for auto-sizing.
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.GrowMax">
            <summary>
            The maximum width to allow when grow = true (defaults to 800).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.GrowMin">
            <summary>
            The minimum width to allow when grow = true (defaults to 60).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.PreventScrollbars">
            <summary>
            True to prevent scrollbars from appearing regardless of how much text is in the field (equivalent to setting overflow: hidden, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="E:Ext.Net.TextArea.DirectChange">
            <summary>
            Server-side DirectEvent handler. Method signature is (object sender, DirectEventArgs e).
            </summary>
        </member>
        <member name="M:Ext.Net.TextArea.Builder.GrowMax(System.Web.UI.WebControls.Unit)">
            <summary>
            The maximum width to allow when grow = true (defaults to 800).
            </summary>
        </member>
        <member name="M:Ext.Net.TextArea.Builder.GrowMin(System.Web.UI.WebControls.Unit)">
            <summary>
            The minimum width to allow when grow = true (defaults to 60).
            </summary>
        </member>
        <member name="M:Ext.Net.TextArea.Builder.PreventScrollbars(System.Boolean)">
            <summary>
            True to prevent scrollbars from appearing regardless of how much text is in the field (equivalent to setting overflow: hidden, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.Config.GrowMax">
            <summary>
            The maximum width to allow when grow = true (defaults to 800).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.Config.GrowMin">
            <summary>
            The minimum width to allow when grow = true (defaults to 60).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.Config.PreventScrollbars">
            <summary>
            True to prevent scrollbars from appearing regardless of how much text is in the field (equivalent to setting overflow: hidden, defaults to false).
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.Config.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.TextArea.Config.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.SortInfo">
            <summary>
            A config object in the format: {field: 'fieldName', direction: 'ASC|DESC'}. The direction property is case-sensitive.
            </summary>
        </member>
        <member name="P:Ext.Net.SortInfo.Field">
            <summary>
            Internal UI Event. Fired before the view is refreshed.
            </summary>
        </member>
        <member name="P:Ext.Net.SortInfo.Direction">
            <summary>
            The direction to sort ("asc" or "desc")
            </summary>
        </member>
        <member name="M:Ext.Net.SortInfo.Builder.Field(System.String)">
            <summary>
            Internal UI Event. Fired before the view is refreshed.
            </summary>
        </member>
        <member name="M:Ext.Net.SortInfo.Builder.Direction(Ext.Net.SortDirection)">
            <summary>
            The direction to sort (\"asc\" or \"desc\")
            </summary>
        </member>
        <member name="P:Ext.Net.SortInfo.Config.Field">
            <summary>
            Internal UI Event. Fired before the view is refreshed.
            </summary>
        </member>
        <member name="P:Ext.Net.SortInfo.Config.Direction">
            <summary>
            The direction to sort (\"asc\" or \"desc\")
            </summary>
        </member>
        <member name="T:Ext.Net.NumberColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.NumberColumn.Format">
            <summary>
            A formatting string as used by Ext.util.Format.number to format a numeric value for this Column (defaults to '0,000.00').
            Formats the number according to the format string.
            examples (123456.789):
            0 - (123456) show only digits, no precision
            0.00 - (123456.78) show only digits, 2 precision
            0.0000 - (123456.7890) show only digits, 4 precision
            0,000 - (123,456) show comma and digits, no precision
            0,000.00 - (123,456.78) show comma and digits, 2 precision
            0,0.00 - (123,456.78) shortcut method, show comma and digits, 2 precision
            To reverse the grouping (,) and decimal (.) for international numbers, add /i to the end. For example: 0.000,00/i
            </summary>
        </member>
        <member name="P:Ext.Net.NumberColumn.Config.Format">
            <summary>
            A formatting string as used by Ext.util.Format.number to format a numeric value for this Column (defaults to '0,000.00').
            </summary>
        </member>
        <member name="M:Ext.Net.NumberColumn.Builder.Format(System.String)">
            <summary>
            A formatting string as used by Ext.util.Format.number to format a numeric value for this Column (defaults to '0,000.00').
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.Activate">
            <summary>
            Fires when the editor is first receives the focus. Any insertion must wait until after this event.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.BeforePush">
            <summary>
            Fires before the iframe editor is updated with content from the textarea. Return false to cancel the push.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.BeforeSync">
            <summary>
            Fires before the textarea is updated with content from the editor iframe. Return false to cancel the sync.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.EditModeChange">
            <summary>
            Fires when the editor switches edit modes.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.Initialize">
            <summary>
            Fires when the editor is fully initialized (including the iframe).
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.Push">
            <summary>
            Fires when the iframe editor is updated with content from the textarea.
            </summary>
        </member>
        <member name="P:Ext.Net.HtmlEditorDirectEvents.Sync">
            <summary>
            Fires when the textarea is updated with content from the editor iframe.
            </summary>
        </member>
        <member name="T:Ext.Net.DragZone">
            <summary>
            This class provides a container DD instance that allows dragging of multiple child source nodes.
            This class does not move the drag target nodes, but a proxy element which may contain any DOM structure you wish. The DOM element to show in the proxy is provided by either a provided implementation of getDragData, or by registered draggables registered with Ext.dd.Registry
            If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some application object (For example nodes in a DataView) then use of this class is the most efficient way to "activate" those nodes.
            By default, this class requires that draggable child nodes are registered with Ext.dd.Registry. However a simpler way to allow a DragZone to manage any number of draggable elements is to configure the DragZone with an implementation of the getDragData method which interrogates the passed mouse event to see if it has taken place within an element, or class of elements. This is easily done by using the event's getTarget method to identify a node based on a Ext.DomQuery selector.
            </summary>
        </member>
        <member name="P:Ext.Net.DragZone.ContainerScroll">
            <summary>
            True to register this container with the Scrollmanager for auto scrolling during drag operations.
            </summary>
        </member>
        <member name="P:Ext.Net.DragZone.HighlightingColor">
            <summary>
            The color to use when visually highlighting the drag source in the afterRepair method after a failed drop (defaults to "c3daf9" - light blue)
            </summary>
        </member>
        <member name="P:Ext.Net.DragZone.AfterRepair">
            <summary>
            Called after a repair of an invalid drop. By default, highlights this.dragData.ddel
            </summary>
        </member>
        <member name="P:Ext.Net.DragZone.GetRepairXY">
            <summary>
            Called before a repair of an invalid drop to get the XY to animate to. By default returns the XY of this.dragData.ddel
            Parameters:
               e : The mouse up event
            </summary>
        </member>
        <member name="P:Ext.Net.DragZone.OnInitDrag">
            <summary>
            Called once drag threshold has been reached to initialize the proxy element. By default, it clones the this.dragData.ddel
            Parameters:
               x : The x position of the click on the dragged object
               y : The y position of the click on the dragged object
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModelDirectEvents.BeforeCellSelect">
            <summary>
            Fires before a cell is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModelDirectEvents.CellSelect">
            <summary>
            Fires when a cell is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModelDirectEvents.SelectionChange">
            <summary>
            Fires when the active selection changes.
            </summary>
        </member>
        <member name="T:Ext.Net.RowEditor">
            <summary>
            Plugin that adds the ability to rapidly edit full rows in a grid.
            </summary>
        </member>
        <member name="M:Ext.Net.RowEditor.StartEditing(System.Int32)">
            <summary>
            Starts editing the specified for the specified row
            </summary>
            <param name="rowIndex">row index</param>
        </member>
        <member name="M:Ext.Net.RowEditor.StopEditing(System.Boolean)">
            <summary>
            Stops any active editing
            </summary>
            <param name="saveChanges">False to cancel any changes</param>
        </member>
        <member name="M:Ext.Net.RowEditor.StopEditing">
            <summary>
            Stops any active editing
            </summary>
        </member>
        <member name="M:Ext.Net.RowEditor.Hide">
            <summary>
            Hide editor
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditor.ClicksToEdit">
            <summary>
            The number of clicks on a cell required to display the cell's editor (defaults to 0 (auto)).
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditor.MinButtonWidth">
            <summary>
            Minimum width in pixels of all buttons in this panel (defaults to 75).
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditor.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.RowEditor.DirectEvents">
            <summary>
            Server-side Ajax Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.ColorPaletteListeners.Select">
            <summary>
            Fires when a color is selected
            </summary>
        </member>
        <member name="T:Ext.Net.TextAlign">
            <summary>
            The text-align property specifies the horizontal alignment of text in an element.
            </summary>
        </member>
        <member name="F:Ext.Net.TextAlign.Left">
            <summary>
            Aligns the text to the left
            </summary>
        </member>
        <member name="F:Ext.Net.TextAlign.Right">
            <summary>
            Aligns the text to the right
            </summary>
        </member>
        <member name="F:Ext.Net.TextAlign.Center">
            <summary>
            Centers the text
            </summary>
        </member>
        <member name="F:Ext.Net.TextAlign.Justify">
            <summary>
            Stretches the lines so that each line has equal width (like in newspapers and magazines)
            </summary>
        </member>
        <member name="T:Ext.Net.RenderMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.RenderMode.Auto">
            <summary>
            Automatic mode detection
            </summary>
        </member>
        <member name="F:Ext.Net.RenderMode.RenderTo">
            <summary>
            Render the control to the end of the element
            </summary>
        </member>
        <member name="F:Ext.Net.RenderMode.AddTo">
            <summary>
            Add the control to items collection of the element
            </summary>
        </member>
        <member name="F:Ext.Net.RenderMode.InsertTo">
            <summary>
            Insert the control to items collection of the element
            </summary>
        </member>
        <member name="T:Ext.Net.DropPoint">
            <summary>
            The point of the drop
            </summary>
        </member>
        <member name="F:Ext.Net.DropPoint.Append">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DropPoint.Above">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DropPoint.Below">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.Direction.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.Direction.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.Direction.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.Direction.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.Direction.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.SortTypeMethod">
            <summary>
            Sort types
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.None">
            <summary>
            Default sort that does nothing
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.AsDate">
            <summary>
            Date sorting
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.AsFloat">
            <summary>
            Float sorting
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.AsInt">
            <summary>
            Integer sorting
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.AsText">
            <summary>
            Strips all HTML tags to sort on text only
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.AsUCString">
            <summary>
            Case insensitive string
            </summary>
        </member>
        <member name="F:Ext.Net.SortTypeMethod.AsUCText">
            <summary>
            Strips all HTML tags to sort on text only - Case insensitive
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderListeners.BeforeExpand">
            <summary>
            Fires before a row expand
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderListeners.Expand">
            <summary>
            Fires afyter a row expand
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderListeners.BeforeCollapse">
            <summary>
            Fires before a row collapse
            </summary>
        </member>
        <member name="P:Ext.Net.RowExpanderListeners.Collapse">
            <summary>
            Fires after a row collapse
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridListeners.BeforePropertyChange">
            <summary>
            Fires before a property value changes. Handlers can return false to cancel the property change (this will internally call Ext.data.Record.reject on the property's record).
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridListeners.PropertyChange">
            <summary>
            Fires after a property value has changed.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridListeners.BeforeSave">
            <summary>
            Fires before ajax save.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridListeners.Save">
            <summary>
            Fires after successful ajax save.
            </summary>
        </member>
        <member name="P:Ext.Net.PropertyGridListeners.SaveException">
            <summary>
            Fires ajax save failed.
            </summary>
        </member>
        <member name="M:Ext.Net.DragTracker.Destroy">
            <summary>
            Destroy this instance
            </summary>
        </member>
        <member name="M:Ext.Net.DragTracker.InitElement(Ext.Net.Element)">
            <summary>
            Init element of tracker
            </summary>
            <param name="el">Element</param>
        </member>
        <member name="P:Ext.Net.DragTracker.Tolerance">
            <summary>
            Defaults to 5.
            </summary>
        </member>
        <member name="P:Ext.Net.DragTracker.AutoStart">
            <summary>
            Defaults to 0. Specify a Number for the number of milliseconds to defer trigger start.
            </summary>
        </member>
        <member name="P:Ext.Net.DragTracker.ProxyCls">
            <summary>
            Proxy class
            </summary>
        </member>
        <member name="P:Ext.Net.DragTracker.Selection">
            <summary>
            Defaults to true. If false then no selection tracker
            </summary>
        </member>
        <member name="P:Ext.Net.DragTracker.Target">
            <summary>
            ID of the element that is linked to this instance
            </summary>
        </member>
        <member name="P:Ext.Net.DragTracker.Listeners">
            <summary>
            Client-side JavaScript Event Handlers
            </summary>
        </member>
        <member name="P:Ext.Net.DragTracker.DirectEvents">
            <summary>
            Server-side DirectEvent Handlers
            </summary>
        </member>
        <member name="T:Ext.Net.Dom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Dom.op_Implicit(Ext.Net.Element)~Ext.Net.Dom">
            <new date="2010-01-30" owner="geoff" key="Dom">
            New Element to Dom object implicit conversion operator which enables direct cast of Element objects to Ext.Net.Dom objects.
            </new>
        </member>
        <member name="M:Ext.Net.Dom.op_Implicit(System.Web.UI.Control)~Ext.Net.Dom">
            <new date="2010-01-30" owner="geoff" key="Dom">
            New Control to Dom object implicit conversion operator which enables direct cast of Control objects to Ext.Net.Dom objects.
            </new>
        </member>
        <member name="M:Ext.Net.Dom.#ctor(Ext.Net.Element)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Dom.Call(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Dom.Set(System.String,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Dom.ToScript">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.DefaultRenderTo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DefaultRenderTo.Body">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.DefaultRenderTo.Form">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.InitializationScriptNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.InitializationScriptNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Ext.Net.InitializationScriptNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="errorMessage"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Ext.Net.ResourceHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Ext.Net.ResourceHandler.HasModule">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResourceHandler.HasHandler">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ext.Net.ObjectComparer">
            <summary>
            Utility class for comparing objects.
            </summary>
        </member>
        <member name="M:Ext.Net.ObjectComparer.GetDifferentProperties``1(``0,``0,System.Collections.Generic.List{System.Reflection.PropertyInfo}@)">
            <summary>
            Compares the public properties of any 2 objects and determines if the properties of each
            all contain the same value.
            <para> 
            In cases where object1 and object2 are of different Types (both being derived from Type T) 
            we will cast both objects down to the base Type T to ensure the property comparison is only 
            completed on COMMON properties.
            (ex. Type T is Foo, object1 is GoodFoo and object2 is BadFoo -- both being inherited from Foo --
            both objects will be cast to Foo for comparison)
            </para>
            </summary>
            <typeparam name="T">Any class with public properties.</typeparam>
            <param name="object1">Object to compare to object2.</param>
            <param name="object2">Object to compare to object1.</param>
            <param name="propertyInfoList">A List of <see cref="T:System.Reflection.PropertyInfo"/> objects that contain data on the properties
            from object1 that are not equal to the corresponding properties of object2.</param>
            <returns>A boolean value indicating whether or not the properties of each object match.</returns>
        </member>
        <member name="M:Ext.Net.ObjectComparer.GetDifferentProperties``1(``0,``0,System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Reflection.PropertyInfo}@)">
            <summary>
            Compares the public properties of any 2 objects and determines if the properties of each
            all contain the same value.
            <para> 
            In cases where object1 and object2 are of different Types (both being derived from Type T) 
            we will cast both objects down to the base Type T to ensure the property comparison is only 
            completed on COMMON properties.
            (ex. Type T is Foo, object1 is GoodFoo and object2 is BadFoo -- both being inherited from Foo --
            both objects will be cast to Foo for comparison)
            </para>
            </summary>
            <typeparam name="T">Any class with public properties.</typeparam>
            <param name="object1">Object to compare to object2.</param>
            <param name="object2">Object to compare to object1.</param>
            <param name="ignoredProperties">A list of <see cref="T:System.Reflection.PropertyInfo"/> objects
            to ignore when completing the comparison.</param>
            <param name="propertyInfoList">A List of <see cref="T:System.Reflection.PropertyInfo"/> objects that contain data on the properties
            from object1 that are not equal to the corresponding properties of object2.</param>
            <returns>A boolean value indicating whether or not the properties of each object match.</returns>
        </member>
        <member name="M:Ext.Net.ObjectComparer.HasSamePropertyValues``1(``0,``0)">
            <summary>
            Compares the public properties of any 2 objects and determines if the properties of each
            all contain the same value.
            <para> 
            In cases where object1 and object2 are of different Types (both being derived from Type T) 
            we will cast both objects down to the base Type T to ensure the property comparison is only 
            completed on COMMON properties.
            (ex. Type T is Foo, object1 is GoodFoo and object2 is BadFoo -- both being inherited from Foo --
            both objects will be cast to Foo for comparison)
            </para>
            </summary>
            <typeparam name="T">Any class with public properties.</typeparam>
            <param name="object1">Object to compare to object2.</param>
            <param name="object2">Object to compare to object1.</param>
            <returns>A boolean value indicating whether or not the properties of each object match.</returns>
        </member>
        <member name="M:Ext.Net.ObjectComparer.HasSamePropertyValues``1(``0,``0,System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>
            Compares the public properties of any 2 objects and determines if the properties of each
            all contain the same value.
            <para> 
            In cases where object1 and object2 are of different Types (both being derived from Type T) 
            we will cast both objects down to the base Type T to ensure the property comparison is only 
            completed on COMMON properties.
            (ex. Type T is Foo, object1 is GoodFoo and object2 is BadFoo -- both being inherited from Foo --
            both objects will be cast to Foo for comparison)
            </para>
            </summary>
            <typeparam name="T">Any class with public properties.</typeparam>
            <param name="object1">Object to compare to object2.</param>
            <param name="object2">Object to compare to object1.</param>
            <param name="ignoredProperties">A list of <see cref="T:System.Reflection.PropertyInfo"/> objects
            to ignore when completing the comparison.</param>
            <returns>A boolean value indicating whether or not the properties of each object match.</returns>
        </member>
        <member name="M:Ext.Net.ObjectComparer.RemoveProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Removes any <see cref="T:System.Reflection.PropertyInfo"/> object in the supplied List of 
            properties from the supplied Array of properties.
            </summary>
            <param name="allProperties">Array containing master list of 
            <see cref="T:System.Reflection.PropertyInfo"/> objects.</param>
            <param name="propertiesToRemove">List of <see cref="T:System.Reflection.PropertyInfo"/> objects to
            remove from the supplied array of properties.</param>
            <returns>A List of <see cref="T:System.Reflection.PropertyInfo"/> objects.</returns>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.DocumentReady">
            <summary>
            Fires when the document is ready (before onload and before images are loaded). Can be accessed shorthanded as Ext.onReady().
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.TextResize">
            <summary>
            Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.WindowResize">
            <summary>
            Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.WindowUnload">
            <summary>
            Fires when the browser window is unloaded. Return 'true' to prompt the message, or 'false' to cancel the unload.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.WindowScroll">
            <summary>
            Fires when the browser window is scrolled.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.BeforeAjaxRequest">
            <summary>
            Fires before each ajax request
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.AjaxRequestComplete">
            <summary>
            Fires if the ajax request was successfully completed.
            </summary>
        </member>
        <member name="P:Ext.Net.ResourceManagerListeners.AjaxRequestException">
            <summary>
            Fires if the ajax request was failed.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnListeners.ColumnMoved">
            <summary>
            Fires when a column is moved.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnListeners.ConfigChanged">
            <summary>
            Fires when the configuration is changed
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnListeners.HeaderChange">
            <summary>
            Fires when the text of a header changes.
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnListeners.HiddenChange">
            <summary>
            Fires when a column is hidden or "unhidden".
            </summary>
        </member>
        <member name="P:Ext.Net.ColumnListeners.WidthChange">
            <summary>
            Fires when the width of a column is programmaticially changed using setColumnWidth. Note internal resizing suppresses the event from firing. 
            </summary>
        </member>
        <member name="T:Ext.Net.VBoxAlign">
            <summary>
            Controls how the child items of the container are aligned.
            </summary>
        </member>
        <member name="F:Ext.Net.VBoxAlign.Left">
            <summary>
            child items are aligned horizontally at the left side of the container
            </summary>
        </member>
        <member name="F:Ext.Net.VBoxAlign.Center">
            <summary>
            child items are aligned horizontally at the mid-width of the container
            </summary>
        </member>
        <member name="F:Ext.Net.VBoxAlign.Stretch">
            <summary>
            child items are stretched horizontally to fill the width of the container
            </summary>
        </member>
        <member name="F:Ext.Net.VBoxAlign.StretchMax">
            <summary>
            child items are stretched horizontally to the size of the largest item.
            </summary>
        </member>
        <member name="T:Ext.Net.HBoxAlign">
            <summary>
            Controls how the child items of the container are aligned
            </summary>
        </member>
        <member name="F:Ext.Net.HBoxAlign.Top">
            <summary>
            child items are aligned vertically at the left side of the container
            </summary>
        </member>
        <member name="F:Ext.Net.HBoxAlign.Middle">
            <summary>
            child items are aligned vertically at the mid-height of the container
            </summary>
        </member>
        <member name="F:Ext.Net.HBoxAlign.Stretch">
            <summary>
            child items are stretched vertically to fill the height of the container
            </summary>
        </member>
        <member name="F:Ext.Net.HBoxAlign.StretchMax">
            <summary>
            child items are stretched vertically to the size of the largest item.
            </summary>
        </member>
        <member name="T:Ext.Net.SelectBox">
            <summary>
            Makes a ComboBox more closely mimic an HTML SELECT.  Supports clicking and dragging
            through the list, with item selection occurring when the mouse button is released.
            When used will automatically set editable to false and call unselectable
            on inner elements.  Re-enabling editable after calling this will NOT work.
            </summary>
            <new date="2009-12-04" owner="vladsch" key="SelectBox">
            Added new <see cref="T:Ext.Net.SelectBox"/> control on <see cref="T:Ext.Net.SelectBox"/>.
            </new>
        </member>
        <member name="T:Ext.Net.Cookies">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.Cookies.ToScript">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.Cookies.CallCookies(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Ext.Net.Cookies.Clear(System.String)">
            <summary>
            Removes a cookie with the provided name from the browser if found by setting its expiration date to sometime in the past.
            </summary>
            <param name="name">The name of the cookie to remove</param>
        </member>
        <member name="M:Ext.Net.Cookies.GetValue(System.String)">
            <summary>
            Retrieves cookie value that are accessible by the current page. If a cookie does not exist, get() returns null.
            </summary>
            <param name="name">The name of the cookie to get</param>
            <returns>Returns the cookie value for the specified name; null if the cookie name does not exist.</returns>
        </member>
        <member name="M:Ext.Net.Cookies.GetCookie(System.String)">
            <summary>
             Retrieves cookie that are accessible by the current page. If a cookie does not exist, get() returns null.
            </summary>
            <param name="name">The name of the cookie to get</param>
            <returns>Returns the cookie for the specified name; null if the cookie name does not exist.</returns>
        </member>
        <member name="M:Ext.Net.Cookies.Set(System.String,System.Object,System.DateTime,System.String,System.String,System.Boolean)">
            <summary>
            Create a cookie with the specified name and value. Additional settings for the cookie may be optionally specified (for example: expiration, access restriction, SSL).
            </summary>
            <param name="name">The name of the cookie to set.</param>
            <param name="value">The value to set for the cookie.</param>
            <param name="expires">Specify an expiration date the cookie is to persist until. Note that the specified Date object will be converted to Greenwich Mean Time (GMT).</param>
            <param name="path">Setting a path on the cookie restricts access to pages that match that path. Defaults to all pages ('/').</param>
            <param name="domain">Setting a domain restricts access to pages on a given domain (typically used to allow cookie access across subdomains). For example, "ext.net" will create a cookie that can be accessed from any subdomain of ext.net, including www.ext.net, support.ext.net, etc.</param>
            <param name="secure">Specify true to indicate that the cookie should only be accessible via SSL on a page using the HTTPS protocol. Defaults to false. Note that this will only work if the page calling this code uses the HTTPS protocol, otherwise the cookie will be created with default options.</param>
        </member>
        <member name="P:Ext.Net.Cookies.InstanceOf">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.QuickTips">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.QuickTips.Disable">
            <summary>
            Disable quick tips globally.
            </summary>
        </member>
        <member name="M:Ext.Net.QuickTips.Enable">
            <summary>
            Enable quick tips globally.
            </summary>
        </member>
        <member name="M:Ext.Net.QuickTips.Init">
            <summary>
            Initialize the global QuickTips instance and prepare any quick tips.
            </summary>
            <returns>QuickTips</returns>
        </member>
        <member name="M:Ext.Net.QuickTips.Init(System.Boolean)">
            <summary>
            Initialize the global QuickTips instance and prepare any quick tips.
            </summary>
            <param name="autoRender">True to render the QuickTips container immediately to preload images. (Defaults to true)</param>
            <returns>QuickTips</returns>
        </member>
        <member name="M:Ext.Net.QuickTips.Register(Ext.Net.QTipCfg)">
            <summary>
            
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:Ext.Net.QuickTips.Unregister(System.String)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Ext.Net.HeaderGroupRow.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ReferenceColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.ReferenceColumn.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.ISelfRenderingPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.SelfRenderingPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelfRenderingPage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.SelfRenderingPage.VerifyRenderingInServerForm(System.Web.UI.Control)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.BeforeChildRenrendered">
            <summary>
            Fires right before the child nodes for this node are rendered
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.BeforeClick">
            <summary>
            Fires before click processing. Return false to cancel the default action.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.BeforeCollapse">
            <summary>
            Fires before this node is collapsed, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.BeforeExpand">
            <summary>
            Fires before this node is collapsed, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.CheckChange">
            <summary>
            Fires when a node with a checkbox's checked property changes.
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.Click">
            <summary>
            Fires when this node is clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.Collapse">
            <summary>
            Fires when this node is collapsed
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.ContextMenu">
            <summary>
            Fires when this node is right clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.DblClick">
            <summary>
            Fires when this node is double clicked
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.DisabledChange">
            <summary>
            Fires when the disabled status of this node changes
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.Expand">
            <summary>
            Fires when this node is expanded
            </summary>
        </member>
        <member name="P:Ext.Net.TreeNodeDirectEvents.TextChange">
            <summary>
            Fires when the text for this node is changed
            </summary>
        </member>
        <member name="T:Ext.Net.TabStripItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.TabStripItems.IndexOfID(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.TabStripItems.Item(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ext.Net.ResponseManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ext.Net.ResponseManager.Redirect(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Ext.Net.ResponseManager.Redirect(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Ext.Net.ResponseManager.Redirect(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="msg"></param>
            <param name="msgCls"></param>
        </member>
        <member name="M:Ext.Net.ResponseManager.Get(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResponseManager.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResponseManager.GetCmp(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ext.Net.ResponseManager.GetCmp``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Ext.Net.ResponseManager.ResourceManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.TreePanelMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.TreePanelMode.Local">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ext.Net.TreePanelMode.Remote">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.JSON">
            <summary>
            Convenience wrappers for Json.NET
            </summary>
        </member>
        <member name="M:Ext.Net.JSON.Serialize(System.Object,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter},System.Boolean,Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="converters">A List of JsonConverter objects to customize serialization.</param>
            <param name="quoteName">Gets or Sets a value indicating whether object names will be surrounded with quotes.</param>
            <param name="resolver">The IContractResolver object to customize serialization.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize(System.String,System.Type,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter},Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Serializes the Json object to a specific object.
            </summary>
            <param name="value">Json object</param>
            <param name="type">Object's type</param>
            <param name="converters">A List of JsonConverter objects to customize deserialization.</param>
            <param name="resolver">The IContractResolver object to customize serialization.</param>
            <returns>Object</returns>
        </member>
        <member name="M:Ext.Net.JSON.Serialize(System.Object,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="converters">A List of JsonConverter objects to customize serialization.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Serialize(System.Object)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Serialize(System.Object,Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="resolver">The IContractResolver object to customize serialization.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize(System.String,System.Type,Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <param name="resolver">The IContractResolver object to customize serialization.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize``1(System.String,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="converters">A List of JsonConverter objects to customize serialization.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize``1(System.String,Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="resolver">The IContractResolver object to customize serialization.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.Deserialize``1(System.String,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter},Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="converters">A List of JsonConverter objects to customize serialization.</param>
            <param name="resolver">The IContractResolver object to customize serialization.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Ext.Net.JSON.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="P:Ext.Net.JSON.Converters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.JSON.AltConverters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModelListeners.BeforeCellSelect">
            <summary>
            Fires before a cell is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModelListeners.CellSelect">
            <summary>
            Fires when a cell is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.CellSelectionModelListeners.SelectionChange">
            <summary>
            Fires when the active selection changes.
            </summary>
        </member>
        <member name="T:Ext.Net.ParameterMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ext.Net.EditorAutoSize">
            <summary>
            Size for the editor to automatically adopt the size of the underlying field, "Width" to adopt the width only, or "Height" to adopt the height only (defaults to Disable)
            </summary>
        </member>
        <member name="F:Ext.Net.EditorAutoSize.Disable">
            <summary>
            Disable auto size
            </summary>
        </member>
        <member name="F:Ext.Net.EditorAutoSize.Fit">
            <summary>
            Fits the editor to automatically adopt the size of the underlying field
            </summary>
        </member>
        <member name="F:Ext.Net.EditorAutoSize.Width">
            <summary>
            "Width" to adopt the width only
            </summary>
        </member>
        <member name="F:Ext.Net.EditorAutoSize.Height">
            <summary>
            "Height" to adopt the height only
            </summary>
        </member>
        <member name="P:Ext.Net.ToolbarReordererDirectEvents.Reorder">
            <summary>
            Fires after a reorder has occured.
            </summary>
        </member>
        <member name="M:Ext.Net.ItemsBuilder`2.Add(Ext.Net.Component.Builder{`0,`1})">
            TODO: .Add(Control control) // add to .Content() collection
            TODO: .Add(Func)            // add to .Content() collection
        </member>
        <member name="P:Ext.Net.Paddings.IsDefault">
            <summary>
            Does this object currently represent it's default state.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelDirectEvents.BeforeRowSelect">
            <summary>
            Fires when a row is being selected, return false to cancel.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelDirectEvents.RowDeselect">
            <summary>
            Fires when a row is deselected.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelDirectEvents.RowSelect">
            <summary>
            Fires when a row is selected.
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelDirectEvents.SelectionChange">
            <summary>
            Fires when the selection changes
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelDirectEvents.BeforeCheckAllClick">
            <summary>
            Fires when click on the check all
            </summary>
        </member>
        <member name="P:Ext.Net.RowSelectionModelDirectEvents.AfterCheckAllClick">
            <summary>
            Fires when click on the check all
            </summary>
        </member>
        <member name="T:Ext.Net.ButtonScale">
            <summary>
            The size of the Button
            </summary>
        </member>
        <member name="F:Ext.Net.ButtonScale.Small">
            <summary>
            Results in the button element being 16px high.
            </summary>
        </member>
        <member name="F:Ext.Net.ButtonScale.Medium">
            <summary>
            Results in the button element being 24px high.
            </summary>
        </member>
        <member name="F:Ext.Net.ButtonScale.Large">
            <summary>
            Results in the button element being 32px high.
            </summary>
        </member>
        <member name="T:Ext.Net.EditableGrid">
             <summary>
             Plugin to show editors for all cells in a GridPanel
             Do NOT use this plugin for large datasets!
             </summary>
            <new date="2009-12-03" owner="vladsch" key="EditableGrid">
             Added new <see cref="T:Ext.Net.EditableGrid"/> plugin /&gt;.
             </new>
        </member>
    </members>
</doc>
