//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4918.
// 
#pragma warning disable 1591

namespace Isis.ApplicationBlocks.PaymentProcessing.Providers.FirstAtlanticCommerce.FacWebServices {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FACPGWSSoap", Namespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006")]
    public partial class FACPGWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Auth3DSOperationCompleted;
        
        private System.Threading.SendOrPostCallback Auth3DSExtendedAVSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetExpressCheckoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoExpressCheckoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback PayPalPayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthNon3DSOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthNon3DSWithIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthNon3DSExtendedAVSOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthNon3DSExtendedAVSWithIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReversalOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyTransStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FACPGWS() {
            this.Url = global::Isis.ApplicationBlocks.PaymentProcessing.Providers.FirstAtlanticCommerce.Properties.Settings.Default.SoundInTheory_PaymentProcessing_Processors_FirstAtlanticCommerce_FacWebServices_FACPGWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Auth3DSCompletedEventHandler Auth3DSCompleted;
        
        /// <remarks/>
        public event Auth3DSExtendedAVSCompletedEventHandler Auth3DSExtendedAVSCompleted;
        
        /// <remarks/>
        public event SetExpressCheckoutCompletedEventHandler SetExpressCheckoutCompleted;
        
        /// <remarks/>
        public event DoExpressCheckoutCompletedEventHandler DoExpressCheckoutCompleted;
        
        /// <remarks/>
        public event PayPalPayoutCompletedEventHandler PayPalPayoutCompleted;
        
        /// <remarks/>
        public event GetIPInfoCompletedEventHandler GetIPInfoCompleted;
        
        /// <remarks/>
        public event AuthNon3DSCompletedEventHandler AuthNon3DSCompleted;
        
        /// <remarks/>
        public event AuthNon3DSWithIPCompletedEventHandler AuthNon3DSWithIPCompleted;
        
        /// <remarks/>
        public event AuthNon3DSExtendedAVSCompletedEventHandler AuthNon3DSExtendedAVSCompleted;
        
        /// <remarks/>
        public event AuthNon3DSExtendedAVSWithIPCompletedEventHandler AuthNon3DSExtendedAVSWithIPCompleted;
        
        /// <remarks/>
        public event CaptureCompletedEventHandler CaptureCompleted;
        
        /// <remarks/>
        public event ReversalCompletedEventHandler ReversalCompleted;
        
        /// <remarks/>
        public event RefundCompletedEventHandler RefundCompleted;
        
        /// <remarks/>
        public event VerifyTransStatusCompletedEventHandler VerifyTransStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/Auth3DS", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Auth3DS(
                    bool blnIsAuthenticateOnly, 
                    bool blnIsAVS, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strMerRespURL, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState) {
            object[] results = this.Invoke("Auth3DS", new object[] {
                        blnIsAuthenticateOnly,
                        blnIsAVS,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strMerRespURL,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Auth3DSAsync(
                    bool blnIsAuthenticateOnly, 
                    bool blnIsAVS, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strMerRespURL, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState) {
            this.Auth3DSAsync(blnIsAuthenticateOnly, blnIsAVS, intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, intCardNumber, intCardExpDate, intCardCVV2, strSignatureMethod, strSignature, strCaptureFlag, strMerRespURL, strTestFlag, strBillToAddress, strBillToZipPostCode, strBillToFirstName, strBillToLastName, strBillToCity, strBillToState, null);
        }
        
        /// <remarks/>
        public void Auth3DSAsync(
                    bool blnIsAuthenticateOnly, 
                    bool blnIsAVS, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strMerRespURL, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    object userState) {
            if ((this.Auth3DSOperationCompleted == null)) {
                this.Auth3DSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuth3DSOperationCompleted);
            }
            this.InvokeAsync("Auth3DS", new object[] {
                        blnIsAuthenticateOnly,
                        blnIsAVS,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strMerRespURL,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState}, this.Auth3DSOperationCompleted, userState);
        }
        
        private void OnAuth3DSOperationCompleted(object arg) {
            if ((this.Auth3DSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Auth3DSCompleted(this, new Auth3DSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/Auth3DSExtendedAVS", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Auth3DSExtendedAVS(
                    bool blnIsAuthenticateOnly, 
                    bool blnIsAVS, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strMerRespURL, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF) {
            object[] results = this.Invoke("Auth3DSExtendedAVS", new object[] {
                        blnIsAuthenticateOnly,
                        blnIsAVS,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strMerRespURL,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intBillToCountry,
                        strBillToEmail,
                        intBillToTelephone,
                        strHDF});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Auth3DSExtendedAVSAsync(
                    bool blnIsAuthenticateOnly, 
                    bool blnIsAVS, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strMerRespURL, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF) {
            this.Auth3DSExtendedAVSAsync(blnIsAuthenticateOnly, blnIsAVS, intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, intCardNumber, intCardExpDate, intCardCVV2, strSignatureMethod, strSignature, strCaptureFlag, strMerRespURL, strTestFlag, strBillToAddress, strBillToZipPostCode, strBillToFirstName, strBillToLastName, strBillToCity, strBillToState, intBillToCountry, strBillToEmail, intBillToTelephone, strHDF, null);
        }
        
        /// <remarks/>
        public void Auth3DSExtendedAVSAsync(
                    bool blnIsAuthenticateOnly, 
                    bool blnIsAVS, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strMerRespURL, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    object userState) {
            if ((this.Auth3DSExtendedAVSOperationCompleted == null)) {
                this.Auth3DSExtendedAVSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuth3DSExtendedAVSOperationCompleted);
            }
            this.InvokeAsync("Auth3DSExtendedAVS", new object[] {
                        blnIsAuthenticateOnly,
                        blnIsAVS,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strMerRespURL,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intBillToCountry,
                        strBillToEmail,
                        intBillToTelephone,
                        strHDF}, this.Auth3DSExtendedAVSOperationCompleted, userState);
        }
        
        private void OnAuth3DSExtendedAVSOperationCompleted(object arg) {
            if ((this.Auth3DSExtendedAVSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Auth3DSExtendedAVSCompleted(this, new Auth3DSExtendedAVSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/SetExpressCheckout", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetExpressCheckout(string intMerchantId, string intAmount, string intCurrency, string intCurrencyExponent, string strMerRespURL, string strMerCancelURL, string strLocaleCode) {
            object[] results = this.Invoke("SetExpressCheckout", new object[] {
                        intMerchantId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        strMerRespURL,
                        strMerCancelURL,
                        strLocaleCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetExpressCheckoutAsync(string intMerchantId, string intAmount, string intCurrency, string intCurrencyExponent, string strMerRespURL, string strMerCancelURL, string strLocaleCode) {
            this.SetExpressCheckoutAsync(intMerchantId, intAmount, intCurrency, intCurrencyExponent, strMerRespURL, strMerCancelURL, strLocaleCode, null);
        }
        
        /// <remarks/>
        public void SetExpressCheckoutAsync(string intMerchantId, string intAmount, string intCurrency, string intCurrencyExponent, string strMerRespURL, string strMerCancelURL, string strLocaleCode, object userState) {
            if ((this.SetExpressCheckoutOperationCompleted == null)) {
                this.SetExpressCheckoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetExpressCheckoutOperationCompleted);
            }
            this.InvokeAsync("SetExpressCheckout", new object[] {
                        intMerchantId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        strMerRespURL,
                        strMerCancelURL,
                        strLocaleCode}, this.SetExpressCheckoutOperationCompleted, userState);
        }
        
        private void OnSetExpressCheckoutOperationCompleted(object arg) {
            if ((this.SetExpressCheckoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetExpressCheckoutCompleted(this, new SetExpressCheckoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/DoExpressCheckout", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoExpressCheckout(string intAcquirerId, string intMerchantId, string strOrderId, string intAmount, string intCurrency, string intCurrencyExponent, string strSignatureMethod, string strSignature, string strCaptureFlag, string strToken, string strPayerId) {
            object[] results = this.Invoke("DoExpressCheckout", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strToken,
                        strPayerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoExpressCheckoutAsync(string intAcquirerId, string intMerchantId, string strOrderId, string intAmount, string intCurrency, string intCurrencyExponent, string strSignatureMethod, string strSignature, string strCaptureFlag, string strToken, string strPayerId) {
            this.DoExpressCheckoutAsync(intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, strSignatureMethod, strSignature, strCaptureFlag, strToken, strPayerId, null);
        }
        
        /// <remarks/>
        public void DoExpressCheckoutAsync(string intAcquirerId, string intMerchantId, string strOrderId, string intAmount, string intCurrency, string intCurrencyExponent, string strSignatureMethod, string strSignature, string strCaptureFlag, string strToken, string strPayerId, object userState) {
            if ((this.DoExpressCheckoutOperationCompleted == null)) {
                this.DoExpressCheckoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoExpressCheckoutOperationCompleted);
            }
            this.InvokeAsync("DoExpressCheckout", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strToken,
                        strPayerId}, this.DoExpressCheckoutOperationCompleted, userState);
        }
        
        private void OnDoExpressCheckoutOperationCompleted(object arg) {
            if ((this.DoExpressCheckoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoExpressCheckoutCompleted(this, new DoExpressCheckoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/PayPalPayout", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PayPalPayout(string intAcquirerId, string intMerchantId, string strOrderId, string intAmount, string intCurrency, string intCurrencyExponent, string strSignatureMethod, string strSignature, string strEmailAddress) {
            object[] results = this.Invoke("PayPalPayout", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        strSignatureMethod,
                        strSignature,
                        strEmailAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PayPalPayoutAsync(string intAcquirerId, string intMerchantId, string strOrderId, string intAmount, string intCurrency, string intCurrencyExponent, string strSignatureMethod, string strSignature, string strEmailAddress) {
            this.PayPalPayoutAsync(intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, strSignatureMethod, strSignature, strEmailAddress, null);
        }
        
        /// <remarks/>
        public void PayPalPayoutAsync(string intAcquirerId, string intMerchantId, string strOrderId, string intAmount, string intCurrency, string intCurrencyExponent, string strSignatureMethod, string strSignature, string strEmailAddress, object userState) {
            if ((this.PayPalPayoutOperationCompleted == null)) {
                this.PayPalPayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPayPalPayoutOperationCompleted);
            }
            this.InvokeAsync("PayPalPayout", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        strSignatureMethod,
                        strSignature,
                        strEmailAddress}, this.PayPalPayoutOperationCompleted, userState);
        }
        
        private void OnPayPalPayoutOperationCompleted(object arg) {
            if ((this.PayPalPayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PayPalPayoutCompleted(this, new PayPalPayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/GetIPInfo", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIPInfo(string intMerchantId, string strPassword, string strOrderId, string intIPAddress) {
            object[] results = this.Invoke("GetIPInfo", new object[] {
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intIPAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIPInfoAsync(string intMerchantId, string strPassword, string strOrderId, string intIPAddress) {
            this.GetIPInfoAsync(intMerchantId, strPassword, strOrderId, intIPAddress, null);
        }
        
        /// <remarks/>
        public void GetIPInfoAsync(string intMerchantId, string strPassword, string strOrderId, string intIPAddress, object userState) {
            if ((this.GetIPInfoOperationCompleted == null)) {
                this.GetIPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPInfoOperationCompleted);
            }
            this.InvokeAsync("GetIPInfo", new object[] {
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intIPAddress}, this.GetIPInfoOperationCompleted, userState);
        }
        
        private void OnGetIPInfoOperationCompleted(object arg) {
            if ((this.GetIPInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPInfoCompleted(this, new GetIPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/AuthNon3DS", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthNon3DS(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue) {
            object[] results = this.Invoke("AuthNon3DS", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthNon3DSAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue) {
            this.AuthNon3DSAsync(blnIsAVS, blnIsAVSOnly, blnIs3DSPreAuthenticated, intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, intCardNumber, intCardExpDate, intCardCVV2, strSignatureMethod, strSignature, strCaptureFlag, strTestFlag, strBillToAddress, strBillToZipPostCode, strBillToFirstName, strBillToLastName, strBillToCity, strBillToState, intECIIndicator, strAuthenticationResult, strTransactionStain, strCAVVValue, null);
        }
        
        /// <remarks/>
        public void AuthNon3DSAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    object userState) {
            if ((this.AuthNon3DSOperationCompleted == null)) {
                this.AuthNon3DSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthNon3DSOperationCompleted);
            }
            this.InvokeAsync("AuthNon3DS", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue}, this.AuthNon3DSOperationCompleted, userState);
        }
        
        private void OnAuthNon3DSOperationCompleted(object arg) {
            if ((this.AuthNon3DSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthNon3DSCompleted(this, new AuthNon3DSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/AuthNon3DSWithIP", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthNon3DSWithIP(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    string intIPAddress) {
            object[] results = this.Invoke("AuthNon3DSWithIP", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue,
                        intIPAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthNon3DSWithIPAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    string intIPAddress) {
            this.AuthNon3DSWithIPAsync(blnIsAVS, blnIsAVSOnly, blnIs3DSPreAuthenticated, intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, intCardNumber, intCardExpDate, intCardCVV2, strSignatureMethod, strSignature, strCaptureFlag, strTestFlag, strBillToAddress, strBillToZipPostCode, strBillToFirstName, strBillToLastName, strBillToCity, strBillToState, intECIIndicator, strAuthenticationResult, strTransactionStain, strCAVVValue, intIPAddress, null);
        }
        
        /// <remarks/>
        public void AuthNon3DSWithIPAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    string intIPAddress, 
                    object userState) {
            if ((this.AuthNon3DSWithIPOperationCompleted == null)) {
                this.AuthNon3DSWithIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthNon3DSWithIPOperationCompleted);
            }
            this.InvokeAsync("AuthNon3DSWithIP", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue,
                        intIPAddress}, this.AuthNon3DSWithIPOperationCompleted, userState);
        }
        
        private void OnAuthNon3DSWithIPOperationCompleted(object arg) {
            if ((this.AuthNon3DSWithIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthNon3DSWithIPCompleted(this, new AuthNon3DSWithIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/AuthNon3DSExtendedAVS", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthNon3DSExtendedAVS(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue) {
            object[] results = this.Invoke("AuthNon3DSExtendedAVS", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intBillToCountry,
                        strBillToEmail,
                        intBillToTelephone,
                        strHDF,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthNon3DSExtendedAVSAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue) {
            this.AuthNon3DSExtendedAVSAsync(blnIsAVS, blnIsAVSOnly, blnIs3DSPreAuthenticated, intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, intCardNumber, intCardExpDate, intCardCVV2, strSignatureMethod, strSignature, strCaptureFlag, strTestFlag, strBillToAddress, strBillToZipPostCode, strBillToFirstName, strBillToLastName, strBillToCity, strBillToState, intBillToCountry, strBillToEmail, intBillToTelephone, strHDF, intECIIndicator, strAuthenticationResult, strTransactionStain, strCAVVValue, null);
        }
        
        /// <remarks/>
        public void AuthNon3DSExtendedAVSAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    object userState) {
            if ((this.AuthNon3DSExtendedAVSOperationCompleted == null)) {
                this.AuthNon3DSExtendedAVSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthNon3DSExtendedAVSOperationCompleted);
            }
            this.InvokeAsync("AuthNon3DSExtendedAVS", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intBillToCountry,
                        strBillToEmail,
                        intBillToTelephone,
                        strHDF,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue}, this.AuthNon3DSExtendedAVSOperationCompleted, userState);
        }
        
        private void OnAuthNon3DSExtendedAVSOperationCompleted(object arg) {
            if ((this.AuthNon3DSExtendedAVSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthNon3DSExtendedAVSCompleted(this, new AuthNon3DSExtendedAVSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/AuthNon3DSExtendedAVSW" +
            "ithIP", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthNon3DSExtendedAVSWithIP(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    string intIPAddress) {
            object[] results = this.Invoke("AuthNon3DSExtendedAVSWithIP", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intBillToCountry,
                        strBillToEmail,
                        intBillToTelephone,
                        strHDF,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue,
                        intIPAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthNon3DSExtendedAVSWithIPAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    string intIPAddress) {
            this.AuthNon3DSExtendedAVSWithIPAsync(blnIsAVS, blnIsAVSOnly, blnIs3DSPreAuthenticated, intAcquirerId, intMerchantId, strOrderId, intAmount, intCurrency, intCurrencyExponent, intCardNumber, intCardExpDate, intCardCVV2, strSignatureMethod, strSignature, strCaptureFlag, strTestFlag, strBillToAddress, strBillToZipPostCode, strBillToFirstName, strBillToLastName, strBillToCity, strBillToState, intBillToCountry, strBillToEmail, intBillToTelephone, strHDF, intECIIndicator, strAuthenticationResult, strTransactionStain, strCAVVValue, intIPAddress, null);
        }
        
        /// <remarks/>
        public void AuthNon3DSExtendedAVSWithIPAsync(
                    bool blnIsAVS, 
                    bool blnIsAVSOnly, 
                    bool blnIs3DSPreAuthenticated, 
                    string intAcquirerId, 
                    string intMerchantId, 
                    string strOrderId, 
                    string intAmount, 
                    string intCurrency, 
                    string intCurrencyExponent, 
                    string intCardNumber, 
                    string intCardExpDate, 
                    string intCardCVV2, 
                    string strSignatureMethod, 
                    string strSignature, 
                    string strCaptureFlag, 
                    string strTestFlag, 
                    string strBillToAddress, 
                    string strBillToZipPostCode, 
                    string strBillToFirstName, 
                    string strBillToLastName, 
                    string strBillToCity, 
                    string strBillToState, 
                    string intBillToCountry, 
                    string strBillToEmail, 
                    string intBillToTelephone, 
                    string strHDF, 
                    string intECIIndicator, 
                    string strAuthenticationResult, 
                    string strTransactionStain, 
                    string strCAVVValue, 
                    string intIPAddress, 
                    object userState) {
            if ((this.AuthNon3DSExtendedAVSWithIPOperationCompleted == null)) {
                this.AuthNon3DSExtendedAVSWithIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthNon3DSExtendedAVSWithIPOperationCompleted);
            }
            this.InvokeAsync("AuthNon3DSExtendedAVSWithIP", new object[] {
                        blnIsAVS,
                        blnIsAVSOnly,
                        blnIs3DSPreAuthenticated,
                        intAcquirerId,
                        intMerchantId,
                        strOrderId,
                        intAmount,
                        intCurrency,
                        intCurrencyExponent,
                        intCardNumber,
                        intCardExpDate,
                        intCardCVV2,
                        strSignatureMethod,
                        strSignature,
                        strCaptureFlag,
                        strTestFlag,
                        strBillToAddress,
                        strBillToZipPostCode,
                        strBillToFirstName,
                        strBillToLastName,
                        strBillToCity,
                        strBillToState,
                        intBillToCountry,
                        strBillToEmail,
                        intBillToTelephone,
                        strHDF,
                        intECIIndicator,
                        strAuthenticationResult,
                        strTransactionStain,
                        strCAVVValue,
                        intIPAddress}, this.AuthNon3DSExtendedAVSWithIPOperationCompleted, userState);
        }
        
        private void OnAuthNon3DSExtendedAVSWithIPOperationCompleted(object arg) {
            if ((this.AuthNon3DSExtendedAVSWithIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthNon3DSExtendedAVSWithIPCompleted(this, new AuthNon3DSExtendedAVSWithIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/Capture", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Capture(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent) {
            object[] results = this.Invoke("Capture", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intAmount,
                        intCurrencyExponent});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CaptureAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent) {
            this.CaptureAsync(intAcquirerId, intMerchantId, strPassword, strOrderId, intAmount, intCurrencyExponent, null);
        }
        
        /// <remarks/>
        public void CaptureAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent, object userState) {
            if ((this.CaptureOperationCompleted == null)) {
                this.CaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCaptureOperationCompleted);
            }
            this.InvokeAsync("Capture", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intAmount,
                        intCurrencyExponent}, this.CaptureOperationCompleted, userState);
        }
        
        private void OnCaptureOperationCompleted(object arg) {
            if ((this.CaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CaptureCompleted(this, new CaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/Reversal", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Reversal(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent) {
            object[] results = this.Invoke("Reversal", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intAmount,
                        intCurrencyExponent});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReversalAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent) {
            this.ReversalAsync(intAcquirerId, intMerchantId, strPassword, strOrderId, intAmount, intCurrencyExponent, null);
        }
        
        /// <remarks/>
        public void ReversalAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent, object userState) {
            if ((this.ReversalOperationCompleted == null)) {
                this.ReversalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReversalOperationCompleted);
            }
            this.InvokeAsync("Reversal", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intAmount,
                        intCurrencyExponent}, this.ReversalOperationCompleted, userState);
        }
        
        private void OnReversalOperationCompleted(object arg) {
            if ((this.ReversalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReversalCompleted(this, new ReversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/Refund", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Refund(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent) {
            object[] results = this.Invoke("Refund", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intAmount,
                        intCurrencyExponent});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RefundAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent) {
            this.RefundAsync(intAcquirerId, intMerchantId, strPassword, strOrderId, intAmount, intCurrencyExponent, null);
        }
        
        /// <remarks/>
        public void RefundAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, string intAmount, string intCurrencyExponent, object userState) {
            if ((this.RefundOperationCompleted == null)) {
                this.RefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundOperationCompleted);
            }
            this.InvokeAsync("Refund", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId,
                        intAmount,
                        intCurrencyExponent}, this.RefundOperationCompleted, userState);
        }
        
        private void OnRefundOperationCompleted(object arg) {
            if ((this.RefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundCompleted(this, new RefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006/VerifyTransStatus", RequestNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", ResponseNamespace="http://marlin.firstatlanticcommerce.com/FACPG/FACPGWS/2006", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyTransStatus(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId) {
            object[] results = this.Invoke("VerifyTransStatus", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyTransStatusAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId) {
            this.VerifyTransStatusAsync(intAcquirerId, intMerchantId, strPassword, strOrderId, null);
        }
        
        /// <remarks/>
        public void VerifyTransStatusAsync(string intAcquirerId, string intMerchantId, string strPassword, string strOrderId, object userState) {
            if ((this.VerifyTransStatusOperationCompleted == null)) {
                this.VerifyTransStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyTransStatusOperationCompleted);
            }
            this.InvokeAsync("VerifyTransStatus", new object[] {
                        intAcquirerId,
                        intMerchantId,
                        strPassword,
                        strOrderId}, this.VerifyTransStatusOperationCompleted, userState);
        }
        
        private void OnVerifyTransStatusOperationCompleted(object arg) {
            if ((this.VerifyTransStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyTransStatusCompleted(this, new VerifyTransStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void Auth3DSCompletedEventHandler(object sender, Auth3DSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Auth3DSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Auth3DSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void Auth3DSExtendedAVSCompletedEventHandler(object sender, Auth3DSExtendedAVSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Auth3DSExtendedAVSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Auth3DSExtendedAVSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void SetExpressCheckoutCompletedEventHandler(object sender, SetExpressCheckoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetExpressCheckoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetExpressCheckoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void DoExpressCheckoutCompletedEventHandler(object sender, DoExpressCheckoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoExpressCheckoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoExpressCheckoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void PayPalPayoutCompletedEventHandler(object sender, PayPalPayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PayPalPayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PayPalPayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void GetIPInfoCompletedEventHandler(object sender, GetIPInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void AuthNon3DSCompletedEventHandler(object sender, AuthNon3DSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthNon3DSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthNon3DSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void AuthNon3DSWithIPCompletedEventHandler(object sender, AuthNon3DSWithIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthNon3DSWithIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthNon3DSWithIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void AuthNon3DSExtendedAVSCompletedEventHandler(object sender, AuthNon3DSExtendedAVSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthNon3DSExtendedAVSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthNon3DSExtendedAVSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void AuthNon3DSExtendedAVSWithIPCompletedEventHandler(object sender, AuthNon3DSExtendedAVSWithIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthNon3DSExtendedAVSWithIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthNon3DSExtendedAVSWithIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void CaptureCompletedEventHandler(object sender, CaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void ReversalCompletedEventHandler(object sender, ReversalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReversalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReversalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void RefundCompletedEventHandler(object sender, RefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    public delegate void VerifyTransStatusCompletedEventHandler(object sender, VerifyTransStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4918")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyTransStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyTransStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591