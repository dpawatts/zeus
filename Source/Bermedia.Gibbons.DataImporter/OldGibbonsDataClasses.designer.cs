#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bermedia.Gibbons.DataImporter.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GibbonsOld")]
	public partial class OldGibbonsDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBillingAddress(BillingAddress instance);
    partial void UpdateBillingAddress(BillingAddress instance);
    partial void DeleteBillingAddress(BillingAddress instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertCollection(Collection instance);
    partial void UpdateCollection(Collection instance);
    partial void DeleteCollection(Collection instance);
    partial void InsertColourOrder(ColourOrder instance);
    partial void UpdateColourOrder(ColourOrder instance);
    partial void DeleteColourOrder(ColourOrder instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDeliveryAddress(DeliveryAddress instance);
    partial void UpdateDeliveryAddress(DeliveryAddress instance);
    partial void DeleteDeliveryAddress(DeliveryAddress instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertGiftCard(GiftCard instance);
    partial void UpdateGiftCard(GiftCard instance);
    partial void DeleteGiftCard(GiftCard instance);
    partial void InsertNewsletter(Newsletter instance);
    partial void UpdateNewsletter(Newsletter instance);
    partial void DeleteNewsletter(Newsletter instance);
    partial void InsertNewsletterSubscription(NewsletterSubscription instance);
    partial void UpdateNewsletterSubscription(NewsletterSubscription instance);
    partial void DeleteNewsletterSubscription(NewsletterSubscription instance);
    partial void InsertOrderedProduct(OrderedProduct instance);
    partial void UpdateOrderedProduct(OrderedProduct instance);
    partial void DeleteOrderedProduct(OrderedProduct instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertParishState(ParishState instance);
    partial void UpdateParishState(ParishState instance);
    partial void DeleteParishState(ParishState instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion
		
		public OldGibbonsDataClassesDataContext() : 
				base(global::Bermedia.Gibbons.DataImporter.Properties.Settings.Default.GibbonsOldConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OldGibbonsDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OldGibbonsDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OldGibbonsDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OldGibbonsDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BillingAddress> BillingAddresses
		{
			get
			{
				return this.GetTable<BillingAddress>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<Collection> Collections
		{
			get
			{
				return this.GetTable<Collection>();
			}
		}
		
		public System.Data.Linq.Table<ColourOrder> ColourOrders
		{
			get
			{
				return this.GetTable<ColourOrder>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryAddress> DeliveryAddresses
		{
			get
			{
				return this.GetTable<DeliveryAddress>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<GiftCard> GiftCards
		{
			get
			{
				return this.GetTable<GiftCard>();
			}
		}
		
		public System.Data.Linq.Table<Newsletter> Newsletters
		{
			get
			{
				return this.GetTable<Newsletter>();
			}
		}
		
		public System.Data.Linq.Table<NewsletterSubscription> NewsletterSubscriptions
		{
			get
			{
				return this.GetTable<NewsletterSubscription>();
			}
		}
		
		public System.Data.Linq.Table<OrderedProduct> OrderedProducts
		{
			get
			{
				return this.GetTable<OrderedProduct>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<ParishState> ParishStates
		{
			get
			{
				return this.GetTable<ParishState>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
	}
	
	[Table(Name="dbo.BillingAddresses")]
	public partial class BillingAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillingAddressID;
		
		private int _CustomerID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _City;
		
		private int _ParishStateID;
		
		private string _ZipPostalCode;
		
		private int _CountryID;
		
		private bool _Active;
		
		private string _PhoneNumber;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ParishState> _ParishState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingAddressIDChanging(int value);
    partial void OnBillingAddressIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnParishStateIDChanging(int value);
    partial void OnParishStateIDChanged();
    partial void OnZipPostalCodeChanging(string value);
    partial void OnZipPostalCodeChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public BillingAddress()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Country = default(EntityRef<Country>);
			this._Customer = default(EntityRef<Customer>);
			this._ParishState = default(EntityRef<ParishState>);
			OnCreated();
		}
		
		[Column(Storage="_BillingAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillingAddressID
		{
			get
			{
				return this._BillingAddressID;
			}
			set
			{
				if ((this._BillingAddressID != value))
				{
					this.OnBillingAddressIDChanging(value);
					this.SendPropertyChanging();
					this._BillingAddressID = value;
					this.SendPropertyChanged("BillingAddressID");
					this.OnBillingAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressLine1", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[Column(Storage="_AddressLine2", DbType="VarChar(1000)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_ParishStateID", DbType="Int NOT NULL")]
		public int ParishStateID
		{
			get
			{
				return this._ParishStateID;
			}
			set
			{
				if ((this._ParishStateID != value))
				{
					if (this._ParishState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParishStateIDChanging(value);
					this.SendPropertyChanging();
					this._ParishStateID = value;
					this.SendPropertyChanged("ParishStateID");
					this.OnParishStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_ZipPostalCode", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ZipPostalCode
		{
			get
			{
				return this._ZipPostalCode;
			}
			set
			{
				if ((this._ZipPostalCode != value))
				{
					this.OnZipPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipPostalCode = value;
					this.SendPropertyChanged("ZipPostalCode");
					this.OnZipPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(30)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Association(Name="BillingAddress_Order", Storage="_Orders", ThisKey="BillingAddressID", OtherKey="BillingAddressID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Country_BillingAddress", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.BillingAddresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.BillingAddresses.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Customer_BillingAddress", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.BillingAddresses.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.BillingAddresses.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="ParishState_BillingAddress", Storage="_ParishState", ThisKey="ParishStateID", OtherKey="ParishStateID", IsForeignKey=true)]
		public ParishState ParishState
		{
			get
			{
				return this._ParishState.Entity;
			}
			set
			{
				ParishState previousValue = this._ParishState.Entity;
				if (((previousValue != value) 
							|| (this._ParishState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParishState.Entity = null;
						previousValue.BillingAddresses.Remove(this);
					}
					this._ParishState.Entity = value;
					if ((value != null))
					{
						value.BillingAddresses.Add(this);
						this._ParishStateID = value.ParishStateID;
					}
					else
					{
						this._ParishStateID = default(int);
					}
					this.SendPropertyChanged("ParishState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.BillingAddress = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.BillingAddress = null;
		}
	}
	
	[Table(Name="dbo.SubCategories")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategoryID;
		
		private string _Name;
		
		private int _DepartmentID;
		
		private EntitySet<Collection> _Collections;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public SubCategory()
		{
			this._Collections = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections), new Action<Collection>(this.detach_Collections));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_SubCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Association(Name="SubCategory_Collection", Storage="_Collections", ThisKey="SubCategoryID", OtherKey="SubCategoryID")]
		public EntitySet<Collection> Collections
		{
			get
			{
				return this._Collections;
			}
			set
			{
				this._Collections.Assign(value);
			}
		}
		
		[Association(Name="Department_SubCategory", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
	}
	
	[Table(Name="dbo.Brands")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrandID;
		
		private string _Name;
		
		private EntitySet<Collection> _Collections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrandIDChanging(int value);
    partial void OnBrandIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Brand()
		{
			this._Collections = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections), new Action<Collection>(this.detach_Collections));
			OnCreated();
		}
		
		[Column(Storage="_BrandID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Brand_Collection", Storage="_Collections", ThisKey="BrandID", OtherKey="BrandID")]
		public EntitySet<Collection> Collections
		{
			get
			{
				return this._Collections;
			}
			set
			{
				this._Collections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[Table(Name="dbo.Collections")]
	public partial class Collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectionID;
		
		private string _Name;
		
		private int _BrandID;
		
		private int _SubCategoryID;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Brand> _Brand;
		
		private EntityRef<SubCategory> _SubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBrandIDChanging(int value);
    partial void OnBrandIDChanged();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    #endregion
		
		public Collection()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Brand = default(EntityRef<Brand>);
			this._SubCategory = default(EntityRef<SubCategory>);
			OnCreated();
		}
		
		[Column(Storage="_CollectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BrandID", DbType="Int NOT NULL")]
		public int BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryID", DbType="Int NOT NULL")]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[Association(Name="Collection_Product", Storage="_Products", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="Brand_Collection", Storage="_Brand", ThisKey="BrandID", OtherKey="BrandID", IsForeignKey=true)]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.Collections.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.Collections.Add(this);
						this._BrandID = value.BrandID;
					}
					else
					{
						this._BrandID = default(int);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		[Association(Name="SubCategory_Collection", Storage="_SubCategory", ThisKey="SubCategoryID", OtherKey="SubCategoryID", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.Collections.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.Collections.Add(this);
						this._SubCategoryID = value.SubCategoryID;
					}
					else
					{
						this._SubCategoryID = default(int);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
	}
	
	[Table(Name="dbo.ColourOrders")]
	public partial class ColourOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColourOrderID;
		
		private string _Colour;
		
		private int _MyOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColourOrderIDChanging(int value);
    partial void OnColourOrderIDChanged();
    partial void OnColourChanging(string value);
    partial void OnColourChanged();
    partial void OnMyOrderChanging(int value);
    partial void OnMyOrderChanged();
    #endregion
		
		public ColourOrder()
		{
			OnCreated();
		}
		
		[Column(Storage="_ColourOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ColourOrderID
		{
			get
			{
				return this._ColourOrderID;
			}
			set
			{
				if ((this._ColourOrderID != value))
				{
					this.OnColourOrderIDChanging(value);
					this.SendPropertyChanging();
					this._ColourOrderID = value;
					this.SendPropertyChanged("ColourOrderID");
					this.OnColourOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Colour", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Colour
		{
			get
			{
				return this._Colour;
			}
			set
			{
				if ((this._Colour != value))
				{
					this.OnColourChanging(value);
					this.SendPropertyChanging();
					this._Colour = value;
					this.SendPropertyChanged("Colour");
					this.OnColourChanged();
				}
			}
		}
		
		[Column(Storage="_MyOrder", DbType="Int NOT NULL")]
		public int MyOrder
		{
			get
			{
				return this._MyOrder;
			}
			set
			{
				if ((this._MyOrder != value))
				{
					this.OnMyOrderChanging(value);
					this.SendPropertyChanging();
					this._MyOrder = value;
					this.SendPropertyChanged("MyOrder");
					this.OnMyOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _Name;
		
		private EntitySet<BillingAddress> _BillingAddresses;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<DeliveryAddress> _DeliveryAddresses;
		
		private EntitySet<ParishState> _ParishStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._BillingAddresses = new EntitySet<BillingAddress>(new Action<BillingAddress>(this.attach_BillingAddresses), new Action<BillingAddress>(this.detach_BillingAddresses));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._DeliveryAddresses = new EntitySet<DeliveryAddress>(new Action<DeliveryAddress>(this.attach_DeliveryAddresses), new Action<DeliveryAddress>(this.detach_DeliveryAddresses));
			this._ParishStates = new EntitySet<ParishState>(new Action<ParishState>(this.attach_ParishStates), new Action<ParishState>(this.detach_ParishStates));
			OnCreated();
		}
		
		[Column(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Country_BillingAddress", Storage="_BillingAddresses", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<BillingAddress> BillingAddresses
		{
			get
			{
				return this._BillingAddresses;
			}
			set
			{
				this._BillingAddresses.Assign(value);
			}
		}
		
		[Association(Name="Country_Customer", Storage="_Customers", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="Country_DeliveryAddress", Storage="_DeliveryAddresses", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<DeliveryAddress> DeliveryAddresses
		{
			get
			{
				return this._DeliveryAddresses;
			}
			set
			{
				this._DeliveryAddresses.Assign(value);
			}
		}
		
		[Association(Name="Country_ParishState", Storage="_ParishStates", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<ParishState> ParishStates
		{
			get
			{
				return this._ParishStates;
			}
			set
			{
				this._ParishStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillingAddresses(BillingAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_BillingAddresses(BillingAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_ParishStates(ParishState entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ParishStates(ParishState entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Title;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _EMailAddress;
		
		private string _Password;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _City;
		
		private System.Nullable<int> _ParishStateID;
		
		private string _ZipPostalCode;
		
		private System.Nullable<int> _CountryID;
		
		private string _PhoneNumber;
		
		private string _PasswordHintQuestion;
		
		private string _PasswordHintAnswer;
		
		private System.Nullable<bool> _ReceiveOffers;
		
		private EntitySet<BillingAddress> _BillingAddresses;
		
		private EntitySet<DeliveryAddress> _DeliveryAddresses;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<ParishState> _ParishState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEMailAddressChanging(string value);
    partial void OnEMailAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnParishStateIDChanging(System.Nullable<int> value);
    partial void OnParishStateIDChanged();
    partial void OnZipPostalCodeChanging(string value);
    partial void OnZipPostalCodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPasswordHintQuestionChanging(string value);
    partial void OnPasswordHintQuestionChanged();
    partial void OnPasswordHintAnswerChanging(string value);
    partial void OnPasswordHintAnswerChanged();
    partial void OnReceiveOffersChanging(System.Nullable<bool> value);
    partial void OnReceiveOffersChanged();
    #endregion
		
		public Customer()
		{
			this._BillingAddresses = new EntitySet<BillingAddress>(new Action<BillingAddress>(this.attach_BillingAddresses), new Action<BillingAddress>(this.detach_BillingAddresses));
			this._DeliveryAddresses = new EntitySet<DeliveryAddress>(new Action<DeliveryAddress>(this.attach_DeliveryAddresses), new Action<DeliveryAddress>(this.detach_DeliveryAddresses));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Country = default(EntityRef<Country>);
			this._ParishState = default(EntityRef<ParishState>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_EMailAddress", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string EMailAddress
		{
			get
			{
				return this._EMailAddress;
			}
			set
			{
				if ((this._EMailAddress != value))
				{
					this.OnEMailAddressChanging(value);
					this.SendPropertyChanging();
					this._EMailAddress = value;
					this.SendPropertyChanged("EMailAddress");
					this.OnEMailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_AddressLine1", DbType="VarChar(1000)")]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[Column(Storage="_AddressLine2", DbType="VarChar(1000)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_ParishStateID", DbType="Int")]
		public System.Nullable<int> ParishStateID
		{
			get
			{
				return this._ParishStateID;
			}
			set
			{
				if ((this._ParishStateID != value))
				{
					if (this._ParishState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParishStateIDChanging(value);
					this.SendPropertyChanging();
					this._ParishStateID = value;
					this.SendPropertyChanged("ParishStateID");
					this.OnParishStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_ZipPostalCode", DbType="VarChar(30)")]
		public string ZipPostalCode
		{
			get
			{
				return this._ZipPostalCode;
			}
			set
			{
				if ((this._ZipPostalCode != value))
				{
					this.OnZipPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipPostalCode = value;
					this.SendPropertyChanged("ZipPostalCode");
					this.OnZipPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(30)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHintQuestion", DbType="VarChar(200)")]
		public string PasswordHintQuestion
		{
			get
			{
				return this._PasswordHintQuestion;
			}
			set
			{
				if ((this._PasswordHintQuestion != value))
				{
					this.OnPasswordHintQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordHintQuestion = value;
					this.SendPropertyChanged("PasswordHintQuestion");
					this.OnPasswordHintQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHintAnswer", DbType="VarChar(500)")]
		public string PasswordHintAnswer
		{
			get
			{
				return this._PasswordHintAnswer;
			}
			set
			{
				if ((this._PasswordHintAnswer != value))
				{
					this.OnPasswordHintAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordHintAnswer = value;
					this.SendPropertyChanged("PasswordHintAnswer");
					this.OnPasswordHintAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiveOffers", DbType="Bit")]
		public System.Nullable<bool> ReceiveOffers
		{
			get
			{
				return this._ReceiveOffers;
			}
			set
			{
				if ((this._ReceiveOffers != value))
				{
					this.OnReceiveOffersChanging(value);
					this.SendPropertyChanging();
					this._ReceiveOffers = value;
					this.SendPropertyChanged("ReceiveOffers");
					this.OnReceiveOffersChanged();
				}
			}
		}
		
		[Association(Name="Customer_BillingAddress", Storage="_BillingAddresses", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<BillingAddress> BillingAddresses
		{
			get
			{
				return this._BillingAddresses;
			}
			set
			{
				this._BillingAddresses.Assign(value);
			}
		}
		
		[Association(Name="Customer_DeliveryAddress", Storage="_DeliveryAddresses", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<DeliveryAddress> DeliveryAddresses
		{
			get
			{
				return this._DeliveryAddresses;
			}
			set
			{
				this._DeliveryAddresses.Assign(value);
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Orders", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Country_Customer", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="ParishState_Customer", Storage="_ParishState", ThisKey="ParishStateID", OtherKey="ParishStateID", IsForeignKey=true)]
		public ParishState ParishState
		{
			get
			{
				return this._ParishState.Entity;
			}
			set
			{
				ParishState previousValue = this._ParishState.Entity;
				if (((previousValue != value) 
							|| (this._ParishState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParishState.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._ParishState.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._ParishStateID = value.ParishStateID;
					}
					else
					{
						this._ParishStateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParishState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillingAddresses(BillingAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_BillingAddresses(BillingAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.DeliveryAddresses")]
	public partial class DeliveryAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeliveryAddressID;
		
		private int _CustomerID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _City;
		
		private int _ParishStateID;
		
		private string _ZipPostalCode;
		
		private int _CountryID;
		
		private bool _Active;
		
		private string _PhoneNumber;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ParishState> _ParishState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeliveryAddressIDChanging(int value);
    partial void OnDeliveryAddressIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnParishStateIDChanging(int value);
    partial void OnParishStateIDChanged();
    partial void OnZipPostalCodeChanging(string value);
    partial void OnZipPostalCodeChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public DeliveryAddress()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Country = default(EntityRef<Country>);
			this._Customer = default(EntityRef<Customer>);
			this._ParishState = default(EntityRef<ParishState>);
			OnCreated();
		}
		
		[Column(Storage="_DeliveryAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeliveryAddressID
		{
			get
			{
				return this._DeliveryAddressID;
			}
			set
			{
				if ((this._DeliveryAddressID != value))
				{
					this.OnDeliveryAddressIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddressID = value;
					this.SendPropertyChanged("DeliveryAddressID");
					this.OnDeliveryAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressLine1", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[Column(Storage="_AddressLine2", DbType="VarChar(1000)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_ParishStateID", DbType="Int NOT NULL")]
		public int ParishStateID
		{
			get
			{
				return this._ParishStateID;
			}
			set
			{
				if ((this._ParishStateID != value))
				{
					if (this._ParishState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParishStateIDChanging(value);
					this.SendPropertyChanging();
					this._ParishStateID = value;
					this.SendPropertyChanged("ParishStateID");
					this.OnParishStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_ZipPostalCode", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ZipPostalCode
		{
			get
			{
				return this._ZipPostalCode;
			}
			set
			{
				if ((this._ZipPostalCode != value))
				{
					this.OnZipPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipPostalCode = value;
					this.SendPropertyChanged("ZipPostalCode");
					this.OnZipPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(30)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Association(Name="DeliveryAddress_Order", Storage="_Orders", ThisKey="DeliveryAddressID", OtherKey="DeliveryAddressID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Country_DeliveryAddress", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.DeliveryAddresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.DeliveryAddresses.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Customer_DeliveryAddress", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.DeliveryAddresses.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.DeliveryAddresses.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="ParishState_DeliveryAddress", Storage="_ParishState", ThisKey="ParishStateID", OtherKey="ParishStateID", IsForeignKey=true)]
		public ParishState ParishState
		{
			get
			{
				return this._ParishState.Entity;
			}
			set
			{
				ParishState previousValue = this._ParishState.Entity;
				if (((previousValue != value) 
							|| (this._ParishState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParishState.Entity = null;
						previousValue.DeliveryAddresses.Remove(this);
					}
					this._ParishState.Entity = value;
					if ((value != null))
					{
						value.DeliveryAddresses.Add(this);
						this._ParishStateID = value.ParishStateID;
					}
					else
					{
						this._ParishStateID = default(int);
					}
					this.SendPropertyChanged("ParishState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryAddress = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryAddress = null;
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _Name;
		
		private EntitySet<SubCategory> _SubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Department_SubCategory", Storage="_SubCategories", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.GiftCards")]
	public partial class GiftCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GiftCardID;
		
		private int _OrderID;
		
		private double _PurchasePrice;
		
		private string _RecipientName;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGiftCardIDChanging(int value);
    partial void OnGiftCardIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnPurchasePriceChanging(double value);
    partial void OnPurchasePriceChanged();
    partial void OnRecipientNameChanging(string value);
    partial void OnRecipientNameChanged();
    #endregion
		
		public GiftCard()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_GiftCardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GiftCardID
		{
			get
			{
				return this._GiftCardID;
			}
			set
			{
				if ((this._GiftCardID != value))
				{
					this.OnGiftCardIDChanging(value);
					this.SendPropertyChanging();
					this._GiftCardID = value;
					this.SendPropertyChanged("GiftCardID");
					this.OnGiftCardIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_PurchasePrice", DbType="Float NOT NULL")]
		public double PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientName", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string RecipientName
		{
			get
			{
				return this._RecipientName;
			}
			set
			{
				if ((this._RecipientName != value))
				{
					this.OnRecipientNameChanging(value);
					this.SendPropertyChanging();
					this._RecipientName = value;
					this.SendPropertyChanged("RecipientName");
					this.OnRecipientNameChanged();
				}
			}
		}
		
		[Association(Name="Order_GiftCard", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.GiftCards.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.GiftCards.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Newsletters")]
	public partial class Newsletter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsletterID;
		
		private System.DateTime _Date;
		
		private string _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsletterIDChanging(int value);
    partial void OnNewsletterIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Newsletter()
		{
			OnCreated();
		}
		
		[Column(Storage="_NewsletterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsletterID
		{
			get
			{
				return this._NewsletterID;
			}
			set
			{
				if ((this._NewsletterID != value))
				{
					this.OnNewsletterIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterID = value;
					this.SendPropertyChanged("NewsletterID");
					this.OnNewsletterIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NewsletterSubscriptions")]
	public partial class NewsletterSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsletterSubscriptionID;
		
		private string _EMailAddress;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _ContactNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsletterSubscriptionIDChanging(int value);
    partial void OnNewsletterSubscriptionIDChanged();
    partial void OnEMailAddressChanging(string value);
    partial void OnEMailAddressChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    #endregion
		
		public NewsletterSubscription()
		{
			OnCreated();
		}
		
		[Column(Storage="_NewsletterSubscriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsletterSubscriptionID
		{
			get
			{
				return this._NewsletterSubscriptionID;
			}
			set
			{
				if ((this._NewsletterSubscriptionID != value))
				{
					this.OnNewsletterSubscriptionIDChanging(value);
					this.SendPropertyChanging();
					this._NewsletterSubscriptionID = value;
					this.SendPropertyChanged("NewsletterSubscriptionID");
					this.OnNewsletterSubscriptionIDChanged();
				}
			}
		}
		
		[Column(Storage="_EMailAddress", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string EMailAddress
		{
			get
			{
				return this._EMailAddress;
			}
			set
			{
				if ((this._EMailAddress != value))
				{
					this.OnEMailAddressChanging(value);
					this.SendPropertyChanging();
					this._EMailAddress = value;
					this.SendPropertyChanged("EMailAddress");
					this.OnEMailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactNo", DbType="VarChar(30)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderedProducts")]
	public partial class OrderedProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderedProductID;
		
		private int _OrderID;
		
		private int _ProductID;
		
		private int _QuantityOrdered;
		
		private double _PurchasePricePerUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderedProductIDChanging(int value);
    partial void OnOrderedProductIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnQuantityOrderedChanging(int value);
    partial void OnQuantityOrderedChanged();
    partial void OnPurchasePricePerUnitChanging(double value);
    partial void OnPurchasePricePerUnitChanged();
    #endregion
		
		public OrderedProduct()
		{
			OnCreated();
		}
		
		[Column(Storage="_OrderedProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderedProductID
		{
			get
			{
				return this._OrderedProductID;
			}
			set
			{
				if ((this._OrderedProductID != value))
				{
					this.OnOrderedProductIDChanging(value);
					this.SendPropertyChanging();
					this._OrderedProductID = value;
					this.SendPropertyChanged("OrderedProductID");
					this.OnOrderedProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityOrdered", DbType="Int NOT NULL")]
		public int QuantityOrdered
		{
			get
			{
				return this._QuantityOrdered;
			}
			set
			{
				if ((this._QuantityOrdered != value))
				{
					this.OnQuantityOrderedChanging(value);
					this.SendPropertyChanging();
					this._QuantityOrdered = value;
					this.SendPropertyChanged("QuantityOrdered");
					this.OnQuantityOrderedChanged();
				}
			}
		}
		
		[Column(Storage="_PurchasePricePerUnit", DbType="Float NOT NULL")]
		public double PurchasePricePerUnit
		{
			get
			{
				return this._PurchasePricePerUnit;
			}
			set
			{
				if ((this._PurchasePricePerUnit != value))
				{
					this.OnPurchasePricePerUnitChanging(value);
					this.SendPropertyChanging();
					this._PurchasePricePerUnit = value;
					this.SendPropertyChanged("PurchasePricePerUnit");
					this.OnPurchasePricePerUnitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _CustomerID;
		
		private System.DateTime _OrderDate;
		
		private double _Price;
		
		private double _Weight;
		
		private string _DeliveryType;
		
		private System.Nullable<int> _BillingAddressID;
		
		private System.Nullable<int> _DeliveryAddressID;
		
		private string _Status;
		
		private System.Nullable<int> _Currency;
		
		private EntitySet<GiftCard> _GiftCards;
		
		private EntityRef<BillingAddress> _BillingAddress;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<DeliveryAddress> _DeliveryAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnDeliveryTypeChanging(string value);
    partial void OnDeliveryTypeChanged();
    partial void OnBillingAddressIDChanging(System.Nullable<int> value);
    partial void OnBillingAddressIDChanged();
    partial void OnDeliveryAddressIDChanging(System.Nullable<int> value);
    partial void OnDeliveryAddressIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCurrencyChanging(System.Nullable<int> value);
    partial void OnCurrencyChanged();
    #endregion
		
		public Order()
		{
			this._GiftCards = new EntitySet<GiftCard>(new Action<GiftCard>(this.attach_GiftCards), new Action<GiftCard>(this.detach_GiftCards));
			this._BillingAddress = default(EntityRef<BillingAddress>);
			this._Customer = default(EntityRef<Customer>);
			this._DeliveryAddress = default(EntityRef<DeliveryAddress>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DeliveryType
		{
			get
			{
				return this._DeliveryType;
			}
			set
			{
				if ((this._DeliveryType != value))
				{
					this.OnDeliveryTypeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryType = value;
					this.SendPropertyChanged("DeliveryType");
					this.OnDeliveryTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAddressID", DbType="Int")]
		public System.Nullable<int> BillingAddressID
		{
			get
			{
				return this._BillingAddressID;
			}
			set
			{
				if ((this._BillingAddressID != value))
				{
					if (this._BillingAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingAddressIDChanging(value);
					this.SendPropertyChanging();
					this._BillingAddressID = value;
					this.SendPropertyChanged("BillingAddressID");
					this.OnBillingAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryAddressID", DbType="Int")]
		public System.Nullable<int> DeliveryAddressID
		{
			get
			{
				return this._DeliveryAddressID;
			}
			set
			{
				if ((this._DeliveryAddressID != value))
				{
					if (this._DeliveryAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryAddressIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddressID = value;
					this.SendPropertyChanged("DeliveryAddressID");
					this.OnDeliveryAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="Int")]
		public System.Nullable<int> Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Association(Name="Order_GiftCard", Storage="_GiftCards", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<GiftCard> GiftCards
		{
			get
			{
				return this._GiftCards;
			}
			set
			{
				this._GiftCards.Assign(value);
			}
		}
		
		[Association(Name="BillingAddress_Order", Storage="_BillingAddress", ThisKey="BillingAddressID", OtherKey="BillingAddressID", IsForeignKey=true)]
		public BillingAddress BillingAddress
		{
			get
			{
				return this._BillingAddress.Entity;
			}
			set
			{
				BillingAddress previousValue = this._BillingAddress.Entity;
				if (((previousValue != value) 
							|| (this._BillingAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingAddress.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._BillingAddress.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._BillingAddressID = value.BillingAddressID;
					}
					else
					{
						this._BillingAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BillingAddress");
				}
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="DeliveryAddress_Order", Storage="_DeliveryAddress", ThisKey="DeliveryAddressID", OtherKey="DeliveryAddressID", IsForeignKey=true)]
		public DeliveryAddress DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress.Entity;
			}
			set
			{
				DeliveryAddress previousValue = this._DeliveryAddress.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryAddress.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._DeliveryAddress.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._DeliveryAddressID = value.DeliveryAddressID;
					}
					else
					{
						this._DeliveryAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeliveryAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GiftCards(GiftCard entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_GiftCards(GiftCard entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.ParishStates")]
	public partial class ParishState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParishStateID;
		
		private int _CountryID;
		
		private string _Name;
		
		private EntitySet<BillingAddress> _BillingAddresses;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<DeliveryAddress> _DeliveryAddresses;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParishStateIDChanging(int value);
    partial void OnParishStateIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ParishState()
		{
			this._BillingAddresses = new EntitySet<BillingAddress>(new Action<BillingAddress>(this.attach_BillingAddresses), new Action<BillingAddress>(this.detach_BillingAddresses));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._DeliveryAddresses = new EntitySet<DeliveryAddress>(new Action<DeliveryAddress>(this.attach_DeliveryAddresses), new Action<DeliveryAddress>(this.detach_DeliveryAddresses));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ParishStateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParishStateID
		{
			get
			{
				return this._ParishStateID;
			}
			set
			{
				if ((this._ParishStateID != value))
				{
					this.OnParishStateIDChanging(value);
					this.SendPropertyChanging();
					this._ParishStateID = value;
					this.SendPropertyChanged("ParishStateID");
					this.OnParishStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ParishState_BillingAddress", Storage="_BillingAddresses", ThisKey="ParishStateID", OtherKey="ParishStateID")]
		public EntitySet<BillingAddress> BillingAddresses
		{
			get
			{
				return this._BillingAddresses;
			}
			set
			{
				this._BillingAddresses.Assign(value);
			}
		}
		
		[Association(Name="ParishState_Customer", Storage="_Customers", ThisKey="ParishStateID", OtherKey="ParishStateID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="ParishState_DeliveryAddress", Storage="_DeliveryAddresses", ThisKey="ParishStateID", OtherKey="ParishStateID")]
		public EntitySet<DeliveryAddress> DeliveryAddresses
		{
			get
			{
				return this._DeliveryAddresses;
			}
			set
			{
				this._DeliveryAddresses.Assign(value);
			}
		}
		
		[Association(Name="Country_ParishState", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ParishStates.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ParishStates.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillingAddresses(BillingAddress entity)
		{
			this.SendPropertyChanging();
			entity.ParishState = this;
		}
		
		private void detach_BillingAddresses(BillingAddress entity)
		{
			this.SendPropertyChanging();
			entity.ParishState = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.ParishState = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.ParishState = null;
		}
		
		private void attach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.ParishState = this;
		}
		
		private void detach_DeliveryAddresses(DeliveryAddress entity)
		{
			this.SendPropertyChanging();
			entity.ParishState = null;
		}
	}
	
	[Table(Name="dbo.ProductImages")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductImageID;
		
		private int _ProductID;
		
		private int _ThumbnailWidth;
		
		private int _ThumbnailHeight;
		
		private int _Width;
		
		private int _Height;
		
		private string _Extension;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductImageIDChanging(int value);
    partial void OnProductImageIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnThumbnailWidthChanging(int value);
    partial void OnThumbnailWidthChanged();
    partial void OnThumbnailHeightChanging(int value);
    partial void OnThumbnailHeightChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    #endregion
		
		public ProductImage()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductImageID
		{
			get
			{
				return this._ProductImageID;
			}
			set
			{
				if ((this._ProductImageID != value))
				{
					this.OnProductImageIDChanging(value);
					this.SendPropertyChanging();
					this._ProductImageID = value;
					this.SendPropertyChanged("ProductImageID");
					this.OnProductImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbnailWidth", DbType="Int NOT NULL")]
		public int ThumbnailWidth
		{
			get
			{
				return this._ThumbnailWidth;
			}
			set
			{
				if ((this._ThumbnailWidth != value))
				{
					this.OnThumbnailWidthChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailWidth = value;
					this.SendPropertyChanged("ThumbnailWidth");
					this.OnThumbnailWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbnailHeight", DbType="Int NOT NULL")]
		public int ThumbnailHeight
		{
			get
			{
				return this._ThumbnailHeight;
			}
			set
			{
				if ((this._ThumbnailHeight != value))
				{
					this.OnThumbnailHeightChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailHeight = value;
					this.SendPropertyChanged("ThumbnailHeight");
					this.OnThumbnailHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _SKUCode;
		
		private string _Name;
		
		private int _CollectionID;
		
		private double _Price;
		
		private string _Size;
		
		private string _Description;
		
		private double _Weight;
		
		private int _Quantity;
		
		private string _Color1;
		
		private string _Color2;
		
		private string _Color3;
		
		private string _Color4;
		
		private string _Color5;
		
		private bool _TopProduct;
		
		private bool _Active;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnSKUCodeChanging(string value);
    partial void OnSKUCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnColor1Changing(string value);
    partial void OnColor1Changed();
    partial void OnColor2Changing(string value);
    partial void OnColor2Changed();
    partial void OnColor3Changing(string value);
    partial void OnColor3Changed();
    partial void OnColor4Changing(string value);
    partial void OnColor4Changed();
    partial void OnColor5Changing(string value);
    partial void OnColor5Changed();
    partial void OnTopProductChanging(bool value);
    partial void OnTopProductChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Product()
		{
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_SKUCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SKUCode
		{
			get
			{
				return this._SKUCode;
			}
			set
			{
				if ((this._SKUCode != value))
				{
					this.OnSKUCodeChanging(value);
					this.SendPropertyChanging();
					this._SKUCode = value;
					this.SendPropertyChanged("SKUCode");
					this.OnSKUCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CollectionID", DbType="Int NOT NULL")]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="VarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(3000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Color1", DbType="VarChar(100)")]
		public string Color1
		{
			get
			{
				return this._Color1;
			}
			set
			{
				if ((this._Color1 != value))
				{
					this.OnColor1Changing(value);
					this.SendPropertyChanging();
					this._Color1 = value;
					this.SendPropertyChanged("Color1");
					this.OnColor1Changed();
				}
			}
		}
		
		[Column(Storage="_Color2", DbType="VarChar(100)")]
		public string Color2
		{
			get
			{
				return this._Color2;
			}
			set
			{
				if ((this._Color2 != value))
				{
					this.OnColor2Changing(value);
					this.SendPropertyChanging();
					this._Color2 = value;
					this.SendPropertyChanged("Color2");
					this.OnColor2Changed();
				}
			}
		}
		
		[Column(Storage="_Color3", DbType="VarChar(100)")]
		public string Color3
		{
			get
			{
				return this._Color3;
			}
			set
			{
				if ((this._Color3 != value))
				{
					this.OnColor3Changing(value);
					this.SendPropertyChanging();
					this._Color3 = value;
					this.SendPropertyChanged("Color3");
					this.OnColor3Changed();
				}
			}
		}
		
		[Column(Storage="_Color4", DbType="VarChar(100)")]
		public string Color4
		{
			get
			{
				return this._Color4;
			}
			set
			{
				if ((this._Color4 != value))
				{
					this.OnColor4Changing(value);
					this.SendPropertyChanging();
					this._Color4 = value;
					this.SendPropertyChanged("Color4");
					this.OnColor4Changed();
				}
			}
		}
		
		[Column(Storage="_Color5", DbType="VarChar(100)")]
		public string Color5
		{
			get
			{
				return this._Color5;
			}
			set
			{
				if ((this._Color5 != value))
				{
					this.OnColor5Changing(value);
					this.SendPropertyChanging();
					this._Color5 = value;
					this.SendPropertyChanged("Color5");
					this.OnColor5Changed();
				}
			}
		}
		
		[Column(Storage="_TopProduct", DbType="Bit NOT NULL")]
		public bool TopProduct
		{
			get
			{
				return this._TopProduct;
			}
			set
			{
				if ((this._TopProduct != value))
				{
					this.OnTopProductChanging(value);
					this.SendPropertyChanging();
					this._TopProduct = value;
					this.SendPropertyChanged("TopProduct");
					this.OnTopProductChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_ProductImages", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[Association(Name="Collection_Product", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
}
#pragma warning restore 1591
